/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARRAY_ITERATE_KEY: () => (/* binding */ ARRAY_ITERATE_KEY),\n/* harmony export */   EffectFlags: () => (/* binding */ EffectFlags),\n/* harmony export */   EffectScope: () => (/* binding */ EffectScope),\n/* harmony export */   ITERATE_KEY: () => (/* binding */ ITERATE_KEY),\n/* harmony export */   MAP_KEY_ITERATE_KEY: () => (/* binding */ MAP_KEY_ITERATE_KEY),\n/* harmony export */   ReactiveEffect: () => (/* binding */ ReactiveEffect),\n/* harmony export */   ReactiveFlags: () => (/* binding */ ReactiveFlags),\n/* harmony export */   TrackOpTypes: () => (/* binding */ TrackOpTypes),\n/* harmony export */   TriggerOpTypes: () => (/* binding */ TriggerOpTypes),\n/* harmony export */   WatchErrorCodes: () => (/* binding */ WatchErrorCodes),\n/* harmony export */   computed: () => (/* binding */ computed),\n/* harmony export */   customRef: () => (/* binding */ customRef),\n/* harmony export */   effect: () => (/* binding */ effect),\n/* harmony export */   effectScope: () => (/* binding */ effectScope),\n/* harmony export */   enableTracking: () => (/* binding */ enableTracking),\n/* harmony export */   getCurrentScope: () => (/* binding */ getCurrentScope),\n/* harmony export */   getCurrentWatcher: () => (/* binding */ getCurrentWatcher),\n/* harmony export */   isProxy: () => (/* binding */ isProxy),\n/* harmony export */   isReactive: () => (/* binding */ isReactive),\n/* harmony export */   isReadonly: () => (/* binding */ isReadonly),\n/* harmony export */   isRef: () => (/* binding */ isRef),\n/* harmony export */   isShallow: () => (/* binding */ isShallow),\n/* harmony export */   markRaw: () => (/* binding */ markRaw),\n/* harmony export */   onEffectCleanup: () => (/* binding */ onEffectCleanup),\n/* harmony export */   onScopeDispose: () => (/* binding */ onScopeDispose),\n/* harmony export */   onWatcherCleanup: () => (/* binding */ onWatcherCleanup),\n/* harmony export */   pauseTracking: () => (/* binding */ pauseTracking),\n/* harmony export */   proxyRefs: () => (/* binding */ proxyRefs),\n/* harmony export */   reactive: () => (/* binding */ reactive),\n/* harmony export */   reactiveReadArray: () => (/* binding */ reactiveReadArray),\n/* harmony export */   readonly: () => (/* binding */ readonly),\n/* harmony export */   ref: () => (/* binding */ ref),\n/* harmony export */   resetTracking: () => (/* binding */ resetTracking),\n/* harmony export */   shallowReactive: () => (/* binding */ shallowReactive),\n/* harmony export */   shallowReadArray: () => (/* binding */ shallowReadArray),\n/* harmony export */   shallowReadonly: () => (/* binding */ shallowReadonly),\n/* harmony export */   shallowRef: () => (/* binding */ shallowRef),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   toRaw: () => (/* binding */ toRaw),\n/* harmony export */   toReactive: () => (/* binding */ toReactive),\n/* harmony export */   toReadonly: () => (/* binding */ toReadonly),\n/* harmony export */   toRef: () => (/* binding */ toRef),\n/* harmony export */   toRefs: () => (/* binding */ toRefs),\n/* harmony export */   toValue: () => (/* binding */ toValue),\n/* harmony export */   track: () => (/* binding */ track),\n/* harmony export */   traverse: () => (/* binding */ traverse),\n/* harmony export */   trigger: () => (/* binding */ trigger),\n/* harmony export */   triggerRef: () => (/* binding */ triggerRef),\n/* harmony export */   unref: () => (/* binding */ unref),\n/* harmony export */   watch: () => (/* binding */ watch)\n/* harmony export */ });\n/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/shared */ \"./node_modules/@vue/shared/dist/shared.esm-bundler.js\");\n/**\n* @vue/reactivity v3.5.7\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n\nfunction warn(msg, ...args) {\n  console.warn(`[Vue warn] ${msg}`, ...args);\n}\nlet activeEffectScope;\nclass EffectScope {\n  constructor(detached = false) {\n    this.detached = detached;\n    /**\n     * @internal\n     */\n    this._active = true;\n    /**\n     * @internal\n     */\n    this.effects = [];\n    /**\n     * @internal\n     */\n    this.cleanups = [];\n    this._isPaused = false;\n    this.parent = activeEffectScope;\n    if (!detached && activeEffectScope) {\n      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;\n    }\n  }\n  get active() {\n    return this._active;\n  }\n  pause() {\n    if (this._active) {\n      this._isPaused = true;\n      let i, l;\n      if (this.scopes) {\n        for (i = 0, l = this.scopes.length; i < l; i++) {\n          this.scopes[i].pause();\n        }\n      }\n      for (i = 0, l = this.effects.length; i < l; i++) {\n        this.effects[i].pause();\n      }\n    }\n  }\n  /**\n   * Resumes the effect scope, including all child scopes and effects.\n   */\n  resume() {\n    if (this._active) {\n      if (this._isPaused) {\n        this._isPaused = false;\n        let i, l;\n        if (this.scopes) {\n          for (i = 0, l = this.scopes.length; i < l; i++) {\n            this.scopes[i].resume();\n          }\n        }\n        for (i = 0, l = this.effects.length; i < l; i++) {\n          this.effects[i].resume();\n        }\n      }\n    }\n  }\n  run(fn) {\n    if (this._active) {\n      const currentEffectScope = activeEffectScope;\n      try {\n        activeEffectScope = this;\n        return fn();\n      } finally {\n        activeEffectScope = currentEffectScope;\n      }\n    } else if (true) {\n      warn(`cannot run an inactive effect scope.`);\n    }\n  }\n  /**\n   * This should only be called on non-detached scopes\n   * @internal\n   */\n  on() {\n    activeEffectScope = this;\n  }\n  /**\n   * This should only be called on non-detached scopes\n   * @internal\n   */\n  off() {\n    activeEffectScope = this.parent;\n  }\n  stop(fromParent) {\n    if (this._active) {\n      let i, l;\n      for (i = 0, l = this.effects.length; i < l; i++) {\n        this.effects[i].stop();\n      }\n      for (i = 0, l = this.cleanups.length; i < l; i++) {\n        this.cleanups[i]();\n      }\n      if (this.scopes) {\n        for (i = 0, l = this.scopes.length; i < l; i++) {\n          this.scopes[i].stop(true);\n        }\n      }\n      if (!this.detached && this.parent && !fromParent) {\n        const last = this.parent.scopes.pop();\n        if (last && last !== this) {\n          this.parent.scopes[this.index] = last;\n          last.index = this.index;\n        }\n      }\n      this.parent = void 0;\n      this._active = false;\n    }\n  }\n}\nfunction effectScope(detached) {\n  return new EffectScope(detached);\n}\nfunction getCurrentScope() {\n  return activeEffectScope;\n}\nfunction onScopeDispose(fn, failSilently = false) {\n  if (activeEffectScope) {\n    activeEffectScope.cleanups.push(fn);\n  } else if ( true && !failSilently) {\n    warn(`onScopeDispose() is called when there is no active effect scope to be associated with.`);\n  }\n}\nlet activeSub;\nconst EffectFlags = {\n  \"ACTIVE\": 1,\n  \"1\": \"ACTIVE\",\n  \"RUNNING\": 2,\n  \"2\": \"RUNNING\",\n  \"TRACKING\": 4,\n  \"4\": \"TRACKING\",\n  \"NOTIFIED\": 8,\n  \"8\": \"NOTIFIED\",\n  \"DIRTY\": 16,\n  \"16\": \"DIRTY\",\n  \"ALLOW_RECURSE\": 32,\n  \"32\": \"ALLOW_RECURSE\",\n  \"PAUSED\": 64,\n  \"64\": \"PAUSED\"\n};\nconst pausedQueueEffects = /* @__PURE__ */new WeakSet();\nclass ReactiveEffect {\n  constructor(fn) {\n    this.fn = fn;\n    /**\n     * @internal\n     */\n    this.deps = void 0;\n    /**\n     * @internal\n     */\n    this.depsTail = void 0;\n    /**\n     * @internal\n     */\n    this.flags = 1 | 4;\n    /**\n     * @internal\n     */\n    this.next = void 0;\n    /**\n     * @internal\n     */\n    this.cleanup = void 0;\n    this.scheduler = void 0;\n    if (activeEffectScope && activeEffectScope.active) {\n      activeEffectScope.effects.push(this);\n    }\n  }\n  pause() {\n    this.flags |= 64;\n  }\n  resume() {\n    if (this.flags & 64) {\n      this.flags &= ~64;\n      if (pausedQueueEffects.has(this)) {\n        pausedQueueEffects.delete(this);\n        this.trigger();\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  notify() {\n    if (this.flags & 2 && !(this.flags & 32)) {\n      return;\n    }\n    if (!(this.flags & 8)) {\n      batch(this);\n    }\n  }\n  run() {\n    if (!(this.flags & 1)) {\n      return this.fn();\n    }\n    this.flags |= 2;\n    cleanupEffect(this);\n    prepareDeps(this);\n    const prevEffect = activeSub;\n    const prevShouldTrack = shouldTrack;\n    activeSub = this;\n    shouldTrack = true;\n    try {\n      return this.fn();\n    } finally {\n      if ( true && activeSub !== this) {\n        warn(\"Active effect was not restored correctly - this is likely a Vue internal bug.\");\n      }\n      cleanupDeps(this);\n      activeSub = prevEffect;\n      shouldTrack = prevShouldTrack;\n      this.flags &= ~2;\n    }\n  }\n  stop() {\n    if (this.flags & 1) {\n      for (let link = this.deps; link; link = link.nextDep) {\n        removeSub(link);\n      }\n      this.deps = this.depsTail = void 0;\n      cleanupEffect(this);\n      this.onStop && this.onStop();\n      this.flags &= ~1;\n    }\n  }\n  trigger() {\n    if (this.flags & 64) {\n      pausedQueueEffects.add(this);\n    } else if (this.scheduler) {\n      this.scheduler();\n    } else {\n      this.runIfDirty();\n    }\n  }\n  /**\n   * @internal\n   */\n  runIfDirty() {\n    if (isDirty(this)) {\n      this.run();\n    }\n  }\n  get dirty() {\n    return isDirty(this);\n  }\n}\nlet batchDepth = 0;\nlet batchedSub;\nfunction batch(sub) {\n  sub.flags |= 8;\n  sub.next = batchedSub;\n  batchedSub = sub;\n}\nfunction startBatch() {\n  batchDepth++;\n}\nfunction endBatch() {\n  if (--batchDepth > 0) {\n    return;\n  }\n  let error;\n  while (batchedSub) {\n    let e = batchedSub;\n    batchedSub = void 0;\n    while (e) {\n      const next = e.next;\n      e.next = void 0;\n      e.flags &= ~8;\n      if (e.flags & 1) {\n        try {\n          ;\n          e.trigger();\n        } catch (err) {\n          if (!error) error = err;\n        }\n      }\n      e = next;\n    }\n  }\n  if (error) throw error;\n}\nfunction prepareDeps(sub) {\n  for (let link = sub.deps; link; link = link.nextDep) {\n    link.version = -1;\n    link.prevActiveLink = link.dep.activeLink;\n    link.dep.activeLink = link;\n  }\n}\nfunction cleanupDeps(sub) {\n  let head;\n  let tail = sub.depsTail;\n  let link = tail;\n  while (link) {\n    const prev = link.prevDep;\n    if (link.version === -1) {\n      if (link === tail) tail = prev;\n      removeSub(link);\n      removeDep(link);\n    } else {\n      head = link;\n    }\n    link.dep.activeLink = link.prevActiveLink;\n    link.prevActiveLink = void 0;\n    link = prev;\n  }\n  sub.deps = head;\n  sub.depsTail = tail;\n}\nfunction isDirty(sub) {\n  for (let link = sub.deps; link; link = link.nextDep) {\n    if (link.dep.version !== link.version || link.dep.computed && (refreshComputed(link.dep.computed) || link.dep.version !== link.version)) {\n      return true;\n    }\n  }\n  if (sub._dirty) {\n    return true;\n  }\n  return false;\n}\nfunction refreshComputed(computed) {\n  if (computed.flags & 4 && !(computed.flags & 16)) {\n    return;\n  }\n  computed.flags &= ~16;\n  if (computed.globalVersion === globalVersion) {\n    return;\n  }\n  computed.globalVersion = globalVersion;\n  const dep = computed.dep;\n  computed.flags |= 2;\n  if (dep.version > 0 && !computed.isSSR && computed.deps && !isDirty(computed)) {\n    computed.flags &= ~2;\n    return;\n  }\n  const prevSub = activeSub;\n  const prevShouldTrack = shouldTrack;\n  activeSub = computed;\n  shouldTrack = true;\n  try {\n    prepareDeps(computed);\n    const value = computed.fn(computed._value);\n    if (dep.version === 0 || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasChanged)(value, computed._value)) {\n      computed._value = value;\n      dep.version++;\n    }\n  } catch (err) {\n    dep.version++;\n    throw err;\n  } finally {\n    activeSub = prevSub;\n    shouldTrack = prevShouldTrack;\n    cleanupDeps(computed);\n    computed.flags &= ~2;\n  }\n}\nfunction removeSub(link, fromComputed = false) {\n  const {\n    dep,\n    prevSub,\n    nextSub\n  } = link;\n  if (prevSub) {\n    prevSub.nextSub = nextSub;\n    link.prevSub = void 0;\n  }\n  if (nextSub) {\n    nextSub.prevSub = prevSub;\n    link.nextSub = void 0;\n  }\n  if (dep.subs === link) {\n    dep.subs = prevSub;\n  }\n  if ( true && dep.subsHead === link) {\n    dep.subsHead = nextSub;\n  }\n  if (!dep.subs) {\n    if (dep.computed) {\n      dep.computed.flags &= ~4;\n      for (let l = dep.computed.deps; l; l = l.nextDep) {\n        removeSub(l, true);\n      }\n    } else if (dep.map && !fromComputed) {\n      dep.map.delete(dep.key);\n      if (!dep.map.size) targetMap.delete(dep.target);\n    }\n  }\n}\nfunction removeDep(link) {\n  const {\n    prevDep,\n    nextDep\n  } = link;\n  if (prevDep) {\n    prevDep.nextDep = nextDep;\n    link.prevDep = void 0;\n  }\n  if (nextDep) {\n    nextDep.prevDep = prevDep;\n    link.nextDep = void 0;\n  }\n}\nfunction effect(fn, options) {\n  if (fn.effect instanceof ReactiveEffect) {\n    fn = fn.effect.fn;\n  }\n  const e = new ReactiveEffect(fn);\n  if (options) {\n    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.extend)(e, options);\n  }\n  try {\n    e.run();\n  } catch (err) {\n    e.stop();\n    throw err;\n  }\n  const runner = e.run.bind(e);\n  runner.effect = e;\n  return runner;\n}\nfunction stop(runner) {\n  runner.effect.stop();\n}\nlet shouldTrack = true;\nconst trackStack = [];\nfunction pauseTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = false;\n}\nfunction enableTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = true;\n}\nfunction resetTracking() {\n  const last = trackStack.pop();\n  shouldTrack = last === void 0 ? true : last;\n}\nfunction onEffectCleanup(fn, failSilently = false) {\n  if (activeSub instanceof ReactiveEffect) {\n    activeSub.cleanup = fn;\n  } else if ( true && !failSilently) {\n    warn(`onEffectCleanup() was called when there was no active effect to associate with.`);\n  }\n}\nfunction cleanupEffect(e) {\n  const {\n    cleanup\n  } = e;\n  e.cleanup = void 0;\n  if (cleanup) {\n    const prevSub = activeSub;\n    activeSub = void 0;\n    try {\n      cleanup();\n    } finally {\n      activeSub = prevSub;\n    }\n  }\n}\nlet globalVersion = 0;\nclass Link {\n  constructor(sub, dep) {\n    this.sub = sub;\n    this.dep = dep;\n    this.version = dep.version;\n    this.nextDep = this.prevDep = this.nextSub = this.prevSub = this.prevActiveLink = void 0;\n  }\n}\nclass Dep {\n  constructor(computed) {\n    this.computed = computed;\n    this.version = 0;\n    /**\n     * Link between this dep and the current active effect\n     */\n    this.activeLink = void 0;\n    /**\n     * Doubly linked list representing the subscribing effects (tail)\n     */\n    this.subs = void 0;\n    /**\n     * For object property deps cleanup\n     */\n    this.target = void 0;\n    this.map = void 0;\n    this.key = void 0;\n    if (true) {\n      this.subsHead = void 0;\n    }\n  }\n  track(debugInfo) {\n    if (!activeSub || !shouldTrack || activeSub === this.computed) {\n      return;\n    }\n    let link = this.activeLink;\n    if (link === void 0 || link.sub !== activeSub) {\n      link = this.activeLink = new Link(activeSub, this);\n      if (!activeSub.deps) {\n        activeSub.deps = activeSub.depsTail = link;\n      } else {\n        link.prevDep = activeSub.depsTail;\n        activeSub.depsTail.nextDep = link;\n        activeSub.depsTail = link;\n      }\n      if (activeSub.flags & 4) {\n        addSub(link);\n      }\n    } else if (link.version === -1) {\n      link.version = this.version;\n      if (link.nextDep) {\n        const next = link.nextDep;\n        next.prevDep = link.prevDep;\n        if (link.prevDep) {\n          link.prevDep.nextDep = next;\n        }\n        link.prevDep = activeSub.depsTail;\n        link.nextDep = void 0;\n        activeSub.depsTail.nextDep = link;\n        activeSub.depsTail = link;\n        if (activeSub.deps === link) {\n          activeSub.deps = next;\n        }\n      }\n    }\n    if ( true && activeSub.onTrack) {\n      activeSub.onTrack((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.extend)({\n        effect: activeSub\n      }, debugInfo));\n    }\n    return link;\n  }\n  trigger(debugInfo) {\n    this.version++;\n    globalVersion++;\n    this.notify(debugInfo);\n  }\n  notify(debugInfo) {\n    startBatch();\n    try {\n      if (true) {\n        for (let head = this.subsHead; head; head = head.nextSub) {\n          if (head.sub.onTrigger && !(head.sub.flags & 8)) {\n            head.sub.onTrigger((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.extend)({\n              effect: head.sub\n            }, debugInfo));\n          }\n        }\n      }\n      for (let link = this.subs; link; link = link.prevSub) {\n        if (link.sub.notify()) {\n          ;\n          link.sub.dep.notify();\n        }\n      }\n    } finally {\n      endBatch();\n    }\n  }\n}\nfunction addSub(link) {\n  const computed = link.dep.computed;\n  if (computed && !link.dep.subs) {\n    computed.flags |= 4 | 16;\n    for (let l = computed.deps; l; l = l.nextDep) {\n      addSub(l);\n    }\n  }\n  const currentTail = link.dep.subs;\n  if (currentTail !== link) {\n    link.prevSub = currentTail;\n    if (currentTail) currentTail.nextSub = link;\n  }\n  if ( true && link.dep.subsHead === void 0) {\n    link.dep.subsHead = link;\n  }\n  link.dep.subs = link;\n}\nconst targetMap = /* @__PURE__ */new WeakMap();\nconst ITERATE_KEY = Symbol( true ? \"Object iterate\" : 0);\nconst MAP_KEY_ITERATE_KEY = Symbol( true ? \"Map keys iterate\" : 0);\nconst ARRAY_ITERATE_KEY = Symbol( true ? \"Array iterate\" : 0);\nfunction track(target, type, key) {\n  if (shouldTrack && activeSub) {\n    let depsMap = targetMap.get(target);\n    if (!depsMap) {\n      targetMap.set(target, depsMap = /* @__PURE__ */new Map());\n    }\n    let dep = depsMap.get(key);\n    if (!dep) {\n      depsMap.set(key, dep = new Dep());\n      dep.target = target;\n      dep.map = depsMap;\n      dep.key = key;\n    }\n    if (true) {\n      dep.track({\n        target,\n        type,\n        key\n      });\n    } else {}\n  }\n}\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\n  const depsMap = targetMap.get(target);\n  if (!depsMap) {\n    globalVersion++;\n    return;\n  }\n  const run = dep => {\n    if (dep) {\n      if (true) {\n        dep.trigger({\n          target,\n          type,\n          key,\n          newValue,\n          oldValue,\n          oldTarget\n        });\n      } else {}\n    }\n  };\n  startBatch();\n  if (type === \"clear\") {\n    depsMap.forEach(run);\n  } else {\n    const targetIsArray = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target);\n    const isArrayIndex = targetIsArray && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isIntegerKey)(key);\n    if (targetIsArray && key === \"length\") {\n      const newLength = Number(newValue);\n      depsMap.forEach((dep, key2) => {\n        if (key2 === \"length\" || key2 === ARRAY_ITERATE_KEY || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isSymbol)(key2) && key2 >= newLength) {\n          run(dep);\n        }\n      });\n    } else {\n      if (key !== void 0) {\n        run(depsMap.get(key));\n      }\n      if (isArrayIndex) {\n        run(depsMap.get(ARRAY_ITERATE_KEY));\n      }\n      switch (type) {\n        case \"add\":\n          if (!targetIsArray) {\n            run(depsMap.get(ITERATE_KEY));\n            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isMap)(target)) {\n              run(depsMap.get(MAP_KEY_ITERATE_KEY));\n            }\n          } else if (isArrayIndex) {\n            run(depsMap.get(\"length\"));\n          }\n          break;\n        case \"delete\":\n          if (!targetIsArray) {\n            run(depsMap.get(ITERATE_KEY));\n            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isMap)(target)) {\n              run(depsMap.get(MAP_KEY_ITERATE_KEY));\n            }\n          }\n          break;\n        case \"set\":\n          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isMap)(target)) {\n            run(depsMap.get(ITERATE_KEY));\n          }\n          break;\n      }\n    }\n  }\n  endBatch();\n}\nfunction getDepFromReactive(object, key) {\n  var _a;\n  return (_a = targetMap.get(object)) == null ? void 0 : _a.get(key);\n}\nfunction reactiveReadArray(array) {\n  const raw = toRaw(array);\n  if (raw === array) return raw;\n  track(raw, \"iterate\", ARRAY_ITERATE_KEY);\n  return isShallow(array) ? raw : raw.map(toReactive);\n}\nfunction shallowReadArray(arr) {\n  track(arr = toRaw(arr), \"iterate\", ARRAY_ITERATE_KEY);\n  return arr;\n}\nconst arrayInstrumentations = {\n  __proto__: null,\n  [Symbol.iterator]() {\n    return iterator(this, Symbol.iterator, toReactive);\n  },\n  concat(...args) {\n    return reactiveReadArray(this).concat(...args.map(x => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(x) ? reactiveReadArray(x) : x));\n  },\n  entries() {\n    return iterator(this, \"entries\", value => {\n      value[1] = toReactive(value[1]);\n      return value;\n    });\n  },\n  every(fn, thisArg) {\n    return apply(this, \"every\", fn, thisArg, void 0, arguments);\n  },\n  filter(fn, thisArg) {\n    return apply(this, \"filter\", fn, thisArg, v => v.map(toReactive), arguments);\n  },\n  find(fn, thisArg) {\n    return apply(this, \"find\", fn, thisArg, toReactive, arguments);\n  },\n  findIndex(fn, thisArg) {\n    return apply(this, \"findIndex\", fn, thisArg, void 0, arguments);\n  },\n  findLast(fn, thisArg) {\n    return apply(this, \"findLast\", fn, thisArg, toReactive, arguments);\n  },\n  findLastIndex(fn, thisArg) {\n    return apply(this, \"findLastIndex\", fn, thisArg, void 0, arguments);\n  },\n  // flat, flatMap could benefit from ARRAY_ITERATE but are not straight-forward to implement\n  forEach(fn, thisArg) {\n    return apply(this, \"forEach\", fn, thisArg, void 0, arguments);\n  },\n  includes(...args) {\n    return searchProxy(this, \"includes\", args);\n  },\n  indexOf(...args) {\n    return searchProxy(this, \"indexOf\", args);\n  },\n  join(separator) {\n    return reactiveReadArray(this).join(separator);\n  },\n  // keys() iterator only reads `length`, no optimisation required\n  lastIndexOf(...args) {\n    return searchProxy(this, \"lastIndexOf\", args);\n  },\n  map(fn, thisArg) {\n    return apply(this, \"map\", fn, thisArg, void 0, arguments);\n  },\n  pop() {\n    return noTracking(this, \"pop\");\n  },\n  push(...args) {\n    return noTracking(this, \"push\", args);\n  },\n  reduce(fn, ...args) {\n    return reduce(this, \"reduce\", fn, args);\n  },\n  reduceRight(fn, ...args) {\n    return reduce(this, \"reduceRight\", fn, args);\n  },\n  shift() {\n    return noTracking(this, \"shift\");\n  },\n  // slice could use ARRAY_ITERATE but also seems to beg for range tracking\n  some(fn, thisArg) {\n    return apply(this, \"some\", fn, thisArg, void 0, arguments);\n  },\n  splice(...args) {\n    return noTracking(this, \"splice\", args);\n  },\n  toReversed() {\n    return reactiveReadArray(this).toReversed();\n  },\n  toSorted(comparer) {\n    return reactiveReadArray(this).toSorted(comparer);\n  },\n  toSpliced(...args) {\n    return reactiveReadArray(this).toSpliced(...args);\n  },\n  unshift(...args) {\n    return noTracking(this, \"unshift\", args);\n  },\n  values() {\n    return iterator(this, \"values\", toReactive);\n  }\n};\nfunction iterator(self, method, wrapValue) {\n  const arr = shallowReadArray(self);\n  const iter = arr[method]();\n  if (arr !== self && !isShallow(self)) {\n    iter._next = iter.next;\n    iter.next = () => {\n      const result = iter._next();\n      if (result.value) {\n        result.value = wrapValue(result.value);\n      }\n      return result;\n    };\n  }\n  return iter;\n}\nconst arrayProto = Array.prototype;\nfunction apply(self, method, fn, thisArg, wrappedRetFn, args) {\n  const arr = shallowReadArray(self);\n  const needsWrap = arr !== self && !isShallow(self);\n  const methodFn = arr[method];\n  if (methodFn !== arrayProto[method]) {\n    const result2 = methodFn.apply(self, args);\n    return needsWrap ? toReactive(result2) : result2;\n  }\n  let wrappedFn = fn;\n  if (arr !== self) {\n    if (needsWrap) {\n      wrappedFn = function (item, index) {\n        return fn.call(this, toReactive(item), index, self);\n      };\n    } else if (fn.length > 2) {\n      wrappedFn = function (item, index) {\n        return fn.call(this, item, index, self);\n      };\n    }\n  }\n  const result = methodFn.call(arr, wrappedFn, thisArg);\n  return needsWrap && wrappedRetFn ? wrappedRetFn(result) : result;\n}\nfunction reduce(self, method, fn, args) {\n  const arr = shallowReadArray(self);\n  let wrappedFn = fn;\n  if (arr !== self) {\n    if (!isShallow(self)) {\n      wrappedFn = function (acc, item, index) {\n        return fn.call(this, acc, toReactive(item), index, self);\n      };\n    } else if (fn.length > 3) {\n      wrappedFn = function (acc, item, index) {\n        return fn.call(this, acc, item, index, self);\n      };\n    }\n  }\n  return arr[method](wrappedFn, ...args);\n}\nfunction searchProxy(self, method, args) {\n  const arr = toRaw(self);\n  track(arr, \"iterate\", ARRAY_ITERATE_KEY);\n  const res = arr[method](...args);\n  if ((res === -1 || res === false) && isProxy(args[0])) {\n    args[0] = toRaw(args[0]);\n    return arr[method](...args);\n  }\n  return res;\n}\nfunction noTracking(self, method, args = []) {\n  pauseTracking();\n  startBatch();\n  const res = toRaw(self)[method].apply(self, args);\n  endBatch();\n  resetTracking();\n  return res;\n}\nconst isNonTrackableKeys = /* @__PURE__ */(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.makeMap)(`__proto__,__v_isRef,__isVue`);\nconst builtInSymbols = new Set(/* @__PURE__ */Object.getOwnPropertyNames(Symbol).filter(key => key !== \"arguments\" && key !== \"caller\").map(key => Symbol[key]).filter(_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isSymbol));\nfunction hasOwnProperty(key) {\n  if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isSymbol)(key)) key = String(key);\n  const obj = toRaw(this);\n  track(obj, \"has\", key);\n  return obj.hasOwnProperty(key);\n}\nclass BaseReactiveHandler {\n  constructor(_isReadonly = false, _isShallow = false) {\n    this._isReadonly = _isReadonly;\n    this._isShallow = _isShallow;\n  }\n  get(target, key, receiver) {\n    const isReadonly2 = this._isReadonly,\n      isShallow2 = this._isShallow;\n    if (key === \"__v_isReactive\") {\n      return !isReadonly2;\n    } else if (key === \"__v_isReadonly\") {\n      return isReadonly2;\n    } else if (key === \"__v_isShallow\") {\n      return isShallow2;\n    } else if (key === \"__v_raw\") {\n      if (receiver === (isReadonly2 ? isShallow2 ? shallowReadonlyMap : readonlyMap : isShallow2 ? shallowReactiveMap : reactiveMap).get(target) ||\n      // receiver is not the reactive proxy, but has the same prototype\n      // this means the receiver is a user proxy of the reactive proxy\n      Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) {\n        return target;\n      }\n      return;\n    }\n    const targetIsArray = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target);\n    if (!isReadonly2) {\n      let fn;\n      if (targetIsArray && (fn = arrayInstrumentations[key])) {\n        return fn;\n      }\n      if (key === \"hasOwnProperty\") {\n        return hasOwnProperty;\n      }\n    }\n    const res = Reflect.get(target, key,\n    // if this is a proxy wrapping a ref, return methods using the raw ref\n    // as receiver so that we don't have to call `toRaw` on the ref in all\n    // its class methods\n    isRef(target) ? target : receiver);\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isSymbol)(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\n      return res;\n    }\n    if (!isReadonly2) {\n      track(target, \"get\", key);\n    }\n    if (isShallow2) {\n      return res;\n    }\n    if (isRef(res)) {\n      return targetIsArray && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isIntegerKey)(key) ? res : res.value;\n    }\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(res)) {\n      return isReadonly2 ? readonly(res) : reactive(res);\n    }\n    return res;\n  }\n}\nclass MutableReactiveHandler extends BaseReactiveHandler {\n  constructor(isShallow2 = false) {\n    super(false, isShallow2);\n  }\n  set(target, key, value, receiver) {\n    let oldValue = target[key];\n    if (!this._isShallow) {\n      const isOldValueReadonly = isReadonly(oldValue);\n      if (!isShallow(value) && !isReadonly(value)) {\n        oldValue = toRaw(oldValue);\n        value = toRaw(value);\n      }\n      if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) && isRef(oldValue) && !isRef(value)) {\n        if (isOldValueReadonly) {\n          return false;\n        } else {\n          oldValue.value = value;\n          return true;\n        }\n      }\n    }\n    const hadKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isIntegerKey)(key) ? Number(key) < target.length : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasOwn)(target, key);\n    const result = Reflect.set(target, key, value, isRef(target) ? target : receiver);\n    if (target === toRaw(receiver)) {\n      if (!hadKey) {\n        trigger(target, \"add\", key, value);\n      } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasChanged)(value, oldValue)) {\n        trigger(target, \"set\", key, value, oldValue);\n      }\n    }\n    return result;\n  }\n  deleteProperty(target, key) {\n    const hadKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasOwn)(target, key);\n    const oldValue = target[key];\n    const result = Reflect.deleteProperty(target, key);\n    if (result && hadKey) {\n      trigger(target, \"delete\", key, void 0, oldValue);\n    }\n    return result;\n  }\n  has(target, key) {\n    const result = Reflect.has(target, key);\n    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isSymbol)(key) || !builtInSymbols.has(key)) {\n      track(target, \"has\", key);\n    }\n    return result;\n  }\n  ownKeys(target) {\n    track(target, \"iterate\", (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) ? \"length\" : ITERATE_KEY);\n    return Reflect.ownKeys(target);\n  }\n}\nclass ReadonlyReactiveHandler extends BaseReactiveHandler {\n  constructor(isShallow2 = false) {\n    super(true, isShallow2);\n  }\n  set(target, key) {\n    if (true) {\n      warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n    return true;\n  }\n  deleteProperty(target, key) {\n    if (true) {\n      warn(`Delete operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n    return true;\n  }\n}\nconst mutableHandlers = /* @__PURE__ */new MutableReactiveHandler();\nconst readonlyHandlers = /* @__PURE__ */new ReadonlyReactiveHandler();\nconst shallowReactiveHandlers = /* @__PURE__ */new MutableReactiveHandler(true);\nconst shallowReadonlyHandlers = /* @__PURE__ */new ReadonlyReactiveHandler(true);\nconst toShallow = value => value;\nconst getProto = v => Reflect.getPrototypeOf(v);\nfunction get(target, key, isReadonly2 = false, isShallow2 = false) {\n  target = target[\"__v_raw\"];\n  const rawTarget = toRaw(target);\n  const rawKey = toRaw(key);\n  if (!isReadonly2) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasChanged)(key, rawKey)) {\n      track(rawTarget, \"get\", key);\n    }\n    track(rawTarget, \"get\", rawKey);\n  }\n  const {\n    has: has2\n  } = getProto(rawTarget);\n  const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;\n  if (has2.call(rawTarget, key)) {\n    return wrap(target.get(key));\n  } else if (has2.call(rawTarget, rawKey)) {\n    return wrap(target.get(rawKey));\n  } else if (target !== rawTarget) {\n    target.get(key);\n  }\n}\nfunction has(key, isReadonly2 = false) {\n  const target = this[\"__v_raw\"];\n  const rawTarget = toRaw(target);\n  const rawKey = toRaw(key);\n  if (!isReadonly2) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasChanged)(key, rawKey)) {\n      track(rawTarget, \"has\", key);\n    }\n    track(rawTarget, \"has\", rawKey);\n  }\n  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);\n}\nfunction size(target, isReadonly2 = false) {\n  target = target[\"__v_raw\"];\n  !isReadonly2 && track(toRaw(target), \"iterate\", ITERATE_KEY);\n  return Reflect.get(target, \"size\", target);\n}\nfunction add(value, _isShallow = false) {\n  if (!_isShallow && !isShallow(value) && !isReadonly(value)) {\n    value = toRaw(value);\n  }\n  const target = toRaw(this);\n  const proto = getProto(target);\n  const hadKey = proto.has.call(target, value);\n  if (!hadKey) {\n    target.add(value);\n    trigger(target, \"add\", value, value);\n  }\n  return this;\n}\nfunction set(key, value, _isShallow = false) {\n  if (!_isShallow && !isShallow(value) && !isReadonly(value)) {\n    value = toRaw(value);\n  }\n  const target = toRaw(this);\n  const {\n    has: has2,\n    get: get2\n  } = getProto(target);\n  let hadKey = has2.call(target, key);\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has2.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has2, key);\n  }\n  const oldValue = get2.call(target, key);\n  target.set(key, value);\n  if (!hadKey) {\n    trigger(target, \"add\", key, value);\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasChanged)(value, oldValue)) {\n    trigger(target, \"set\", key, value, oldValue);\n  }\n  return this;\n}\nfunction deleteEntry(key) {\n  const target = toRaw(this);\n  const {\n    has: has2,\n    get: get2\n  } = getProto(target);\n  let hadKey = has2.call(target, key);\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has2.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has2, key);\n  }\n  const oldValue = get2 ? get2.call(target, key) : void 0;\n  const result = target.delete(key);\n  if (hadKey) {\n    trigger(target, \"delete\", key, void 0, oldValue);\n  }\n  return result;\n}\nfunction clear() {\n  const target = toRaw(this);\n  const hadItems = target.size !== 0;\n  const oldTarget =  true ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isMap)(target) ? new Map(target) : new Set(target) : 0;\n  const result = target.clear();\n  if (hadItems) {\n    trigger(target, \"clear\", void 0, void 0, oldTarget);\n  }\n  return result;\n}\nfunction createForEach(isReadonly2, isShallow2) {\n  return function forEach(callback, thisArg) {\n    const observed = this;\n    const target = observed[\"__v_raw\"];\n    const rawTarget = toRaw(target);\n    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;\n    !isReadonly2 && track(rawTarget, \"iterate\", ITERATE_KEY);\n    return target.forEach((value, key) => {\n      return callback.call(thisArg, wrap(value), wrap(key), observed);\n    });\n  };\n}\nfunction createIterableMethod(method, isReadonly2, isShallow2) {\n  return function (...args) {\n    const target = this[\"__v_raw\"];\n    const rawTarget = toRaw(target);\n    const targetIsMap = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isMap)(rawTarget);\n    const isPair = method === \"entries\" || method === Symbol.iterator && targetIsMap;\n    const isKeyOnly = method === \"keys\" && targetIsMap;\n    const innerIterator = target[method](...args);\n    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;\n    !isReadonly2 && track(rawTarget, \"iterate\", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\n    return {\n      // iterator protocol\n      next() {\n        const {\n          value,\n          done\n        } = innerIterator.next();\n        return done ? {\n          value,\n          done\n        } : {\n          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\n          done\n        };\n      },\n      // iterable protocol\n      [Symbol.iterator]() {\n        return this;\n      }\n    };\n  };\n}\nfunction createReadonlyMethod(type) {\n  return function (...args) {\n    if (true) {\n      const key = args[0] ? `on key \"${args[0]}\" ` : ``;\n      warn(`${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.capitalize)(type)} operation ${key}failed: target is readonly.`, toRaw(this));\n    }\n    return type === \"delete\" ? false : type === \"clear\" ? void 0 : this;\n  };\n}\nfunction createInstrumentations() {\n  const mutableInstrumentations2 = {\n    get(key) {\n      return get(this, key);\n    },\n    get size() {\n      return size(this);\n    },\n    has,\n    add,\n    set,\n    delete: deleteEntry,\n    clear,\n    forEach: createForEach(false, false)\n  };\n  const shallowInstrumentations2 = {\n    get(key) {\n      return get(this, key, false, true);\n    },\n    get size() {\n      return size(this);\n    },\n    has,\n    add(value) {\n      return add.call(this, value, true);\n    },\n    set(key, value) {\n      return set.call(this, key, value, true);\n    },\n    delete: deleteEntry,\n    clear,\n    forEach: createForEach(false, true)\n  };\n  const readonlyInstrumentations2 = {\n    get(key) {\n      return get(this, key, true);\n    },\n    get size() {\n      return size(this, true);\n    },\n    has(key) {\n      return has.call(this, key, true);\n    },\n    add: createReadonlyMethod(\"add\"),\n    set: createReadonlyMethod(\"set\"),\n    delete: createReadonlyMethod(\"delete\"),\n    clear: createReadonlyMethod(\"clear\"),\n    forEach: createForEach(true, false)\n  };\n  const shallowReadonlyInstrumentations2 = {\n    get(key) {\n      return get(this, key, true, true);\n    },\n    get size() {\n      return size(this, true);\n    },\n    has(key) {\n      return has.call(this, key, true);\n    },\n    add: createReadonlyMethod(\"add\"),\n    set: createReadonlyMethod(\"set\"),\n    delete: createReadonlyMethod(\"delete\"),\n    clear: createReadonlyMethod(\"clear\"),\n    forEach: createForEach(true, true)\n  };\n  const iteratorMethods = [\"keys\", \"values\", \"entries\", Symbol.iterator];\n  iteratorMethods.forEach(method => {\n    mutableInstrumentations2[method] = createIterableMethod(method, false, false);\n    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);\n    shallowInstrumentations2[method] = createIterableMethod(method, false, true);\n    shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);\n  });\n  return [mutableInstrumentations2, readonlyInstrumentations2, shallowInstrumentations2, shallowReadonlyInstrumentations2];\n}\nconst [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */createInstrumentations();\nfunction createInstrumentationGetter(isReadonly2, shallow) {\n  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;\n  return (target, key, receiver) => {\n    if (key === \"__v_isReactive\") {\n      return !isReadonly2;\n    } else if (key === \"__v_isReadonly\") {\n      return isReadonly2;\n    } else if (key === \"__v_raw\") {\n      return target;\n    }\n    return Reflect.get((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasOwn)(instrumentations, key) && key in target ? instrumentations : target, key, receiver);\n  };\n}\nconst mutableCollectionHandlers = {\n  get: /* @__PURE__ */createInstrumentationGetter(false, false)\n};\nconst shallowCollectionHandlers = {\n  get: /* @__PURE__ */createInstrumentationGetter(false, true)\n};\nconst readonlyCollectionHandlers = {\n  get: /* @__PURE__ */createInstrumentationGetter(true, false)\n};\nconst shallowReadonlyCollectionHandlers = {\n  get: /* @__PURE__ */createInstrumentationGetter(true, true)\n};\nfunction checkIdentityKeys(target, has2, key) {\n  const rawKey = toRaw(key);\n  if (rawKey !== key && has2.call(target, rawKey)) {\n    const type = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.toRawType)(target);\n    warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);\n  }\n}\nconst reactiveMap = /* @__PURE__ */new WeakMap();\nconst shallowReactiveMap = /* @__PURE__ */new WeakMap();\nconst readonlyMap = /* @__PURE__ */new WeakMap();\nconst shallowReadonlyMap = /* @__PURE__ */new WeakMap();\nfunction targetTypeMap(rawType) {\n  switch (rawType) {\n    case \"Object\":\n    case \"Array\":\n      return 1 /* COMMON */;\n    case \"Map\":\n    case \"Set\":\n    case \"WeakMap\":\n    case \"WeakSet\":\n      return 2 /* COLLECTION */;\n    default:\n      return 0 /* INVALID */;\n  }\n}\nfunction getTargetType(value) {\n  return value[\"__v_skip\"] || !Object.isExtensible(value) ? 0 /* INVALID */ : targetTypeMap((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.toRawType)(value));\n}\nfunction reactive(target) {\n  if (isReadonly(target)) {\n    return target;\n  }\n  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);\n}\nfunction shallowReactive(target) {\n  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);\n}\nfunction readonly(target) {\n  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);\n}\nfunction shallowReadonly(target) {\n  return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);\n}\nfunction createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {\n  if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(target)) {\n    if (true) {\n      warn(`value cannot be made ${isReadonly2 ? \"readonly\" : \"reactive\"}: ${String(target)}`);\n    }\n    return target;\n  }\n  if (target[\"__v_raw\"] && !(isReadonly2 && target[\"__v_isReactive\"])) {\n    return target;\n  }\n  const existingProxy = proxyMap.get(target);\n  if (existingProxy) {\n    return existingProxy;\n  }\n  const targetType = getTargetType(target);\n  if (targetType === 0 /* INVALID */) {\n    return target;\n  }\n  const proxy = new Proxy(target, targetType === 2 /* COLLECTION */ ? collectionHandlers : baseHandlers);\n  proxyMap.set(target, proxy);\n  return proxy;\n}\nfunction isReactive(value) {\n  if (isReadonly(value)) {\n    return isReactive(value[\"__v_raw\"]);\n  }\n  return !!(value && value[\"__v_isReactive\"]);\n}\nfunction isReadonly(value) {\n  return !!(value && value[\"__v_isReadonly\"]);\n}\nfunction isShallow(value) {\n  return !!(value && value[\"__v_isShallow\"]);\n}\nfunction isProxy(value) {\n  return value ? !!value[\"__v_raw\"] : false;\n}\nfunction toRaw(observed) {\n  const raw = observed && observed[\"__v_raw\"];\n  return raw ? toRaw(raw) : observed;\n}\nfunction markRaw(value) {\n  if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasOwn)(value, \"__v_skip\") && Object.isExtensible(value)) {\n    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.def)(value, \"__v_skip\", true);\n  }\n  return value;\n}\nconst toReactive = value => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) ? reactive(value) : value;\nconst toReadonly = value => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) ? readonly(value) : value;\nfunction isRef(r) {\n  return r ? r[\"__v_isRef\"] === true : false;\n}\nfunction ref(value) {\n  return createRef(value, false);\n}\nfunction shallowRef(value) {\n  return createRef(value, true);\n}\nfunction createRef(rawValue, shallow) {\n  if (isRef(rawValue)) {\n    return rawValue;\n  }\n  return new RefImpl(rawValue, shallow);\n}\nclass RefImpl {\n  constructor(value, isShallow2) {\n    this.dep = new Dep();\n    this[\"__v_isRef\"] = true;\n    this[\"__v_isShallow\"] = false;\n    this._rawValue = isShallow2 ? value : toRaw(value);\n    this._value = isShallow2 ? value : toReactive(value);\n    this[\"__v_isShallow\"] = isShallow2;\n  }\n  get value() {\n    if (true) {\n      this.dep.track({\n        target: this,\n        type: \"get\",\n        key: \"value\"\n      });\n    } else {}\n    return this._value;\n  }\n  set value(newValue) {\n    const oldValue = this._rawValue;\n    const useDirectValue = this[\"__v_isShallow\"] || isShallow(newValue) || isReadonly(newValue);\n    newValue = useDirectValue ? newValue : toRaw(newValue);\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasChanged)(newValue, oldValue)) {\n      this._rawValue = newValue;\n      this._value = useDirectValue ? newValue : toReactive(newValue);\n      if (true) {\n        this.dep.trigger({\n          target: this,\n          type: \"set\",\n          key: \"value\",\n          newValue,\n          oldValue\n        });\n      } else {}\n    }\n  }\n}\nfunction triggerRef(ref2) {\n  if (ref2.dep) {\n    if (true) {\n      ref2.dep.trigger({\n        target: ref2,\n        type: \"set\",\n        key: \"value\",\n        newValue: ref2._value\n      });\n    } else {}\n  }\n}\nfunction unref(ref2) {\n  return isRef(ref2) ? ref2.value : ref2;\n}\nfunction toValue(source) {\n  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isFunction)(source) ? source() : unref(source);\n}\nconst shallowUnwrapHandlers = {\n  get: (target, key, receiver) => key === \"__v_raw\" ? target : unref(Reflect.get(target, key, receiver)),\n  set: (target, key, value, receiver) => {\n    const oldValue = target[key];\n    if (isRef(oldValue) && !isRef(value)) {\n      oldValue.value = value;\n      return true;\n    } else {\n      return Reflect.set(target, key, value, receiver);\n    }\n  }\n};\nfunction proxyRefs(objectWithRefs) {\n  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);\n}\nclass CustomRefImpl {\n  constructor(factory) {\n    this[\"__v_isRef\"] = true;\n    this._value = void 0;\n    const dep = this.dep = new Dep();\n    const {\n      get,\n      set\n    } = factory(dep.track.bind(dep), dep.trigger.bind(dep));\n    this._get = get;\n    this._set = set;\n  }\n  get value() {\n    return this._value = this._get();\n  }\n  set value(newVal) {\n    this._set(newVal);\n  }\n}\nfunction customRef(factory) {\n  return new CustomRefImpl(factory);\n}\nfunction toRefs(object) {\n  if ( true && !isProxy(object)) {\n    warn(`toRefs() expects a reactive object but received a plain one.`);\n  }\n  const ret = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(object) ? new Array(object.length) : {};\n  for (const key in object) {\n    ret[key] = propertyToRef(object, key);\n  }\n  return ret;\n}\nclass ObjectRefImpl {\n  constructor(_object, _key, _defaultValue) {\n    this._object = _object;\n    this._key = _key;\n    this._defaultValue = _defaultValue;\n    this[\"__v_isRef\"] = true;\n    this._value = void 0;\n  }\n  get value() {\n    const val = this._object[this._key];\n    return this._value = val === void 0 ? this._defaultValue : val;\n  }\n  set value(newVal) {\n    this._object[this._key] = newVal;\n  }\n  get dep() {\n    return getDepFromReactive(toRaw(this._object), this._key);\n  }\n}\nclass GetterRefImpl {\n  constructor(_getter) {\n    this._getter = _getter;\n    this[\"__v_isRef\"] = true;\n    this[\"__v_isReadonly\"] = true;\n    this._value = void 0;\n  }\n  get value() {\n    return this._value = this._getter();\n  }\n}\nfunction toRef(source, key, defaultValue) {\n  if (isRef(source)) {\n    return source;\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isFunction)(source)) {\n    return new GetterRefImpl(source);\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(source) && arguments.length > 1) {\n    return propertyToRef(source, key, defaultValue);\n  } else {\n    return ref(source);\n  }\n}\nfunction propertyToRef(source, key, defaultValue) {\n  const val = source[key];\n  return isRef(val) ? val : new ObjectRefImpl(source, key, defaultValue);\n}\nclass ComputedRefImpl {\n  constructor(fn, setter, isSSR) {\n    this.fn = fn;\n    this.setter = setter;\n    /**\n     * @internal\n     */\n    this._value = void 0;\n    /**\n     * @internal\n     */\n    this.dep = new Dep(this);\n    /**\n     * @internal\n     */\n    this.__v_isRef = true;\n    // TODO isolatedDeclarations \"__v_isReadonly\"\n    // A computed is also a subscriber that tracks other deps\n    /**\n     * @internal\n     */\n    this.deps = void 0;\n    /**\n     * @internal\n     */\n    this.depsTail = void 0;\n    /**\n     * @internal\n     */\n    this.flags = 16;\n    /**\n     * @internal\n     */\n    this.globalVersion = globalVersion - 1;\n    // for backwards compat\n    this.effect = this;\n    this[\"__v_isReadonly\"] = !setter;\n    this.isSSR = isSSR;\n  }\n  /**\n   * @internal\n   */\n  notify() {\n    this.flags |= 16;\n    if (!(this.flags & 8) &&\n    // avoid infinite self recursion\n    activeSub !== this) {\n      batch(this);\n      return true;\n    } else if (true) ;\n  }\n  get value() {\n    const link =  true ? this.dep.track({\n      target: this,\n      type: \"get\",\n      key: \"value\"\n    }) : 0;\n    refreshComputed(this);\n    if (link) {\n      link.version = this.dep.version;\n    }\n    return this._value;\n  }\n  set value(newValue) {\n    if (this.setter) {\n      this.setter(newValue);\n    } else if (true) {\n      warn(\"Write operation failed: computed value is readonly\");\n    }\n  }\n}\nfunction computed(getterOrOptions, debugOptions, isSSR = false) {\n  let getter;\n  let setter;\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isFunction)(getterOrOptions)) {\n    getter = getterOrOptions;\n  } else {\n    getter = getterOrOptions.get;\n    setter = getterOrOptions.set;\n  }\n  const cRef = new ComputedRefImpl(getter, setter, isSSR);\n  if ( true && debugOptions && !isSSR) {\n    cRef.onTrack = debugOptions.onTrack;\n    cRef.onTrigger = debugOptions.onTrigger;\n  }\n  return cRef;\n}\nconst TrackOpTypes = {\n  \"GET\": \"get\",\n  \"HAS\": \"has\",\n  \"ITERATE\": \"iterate\"\n};\nconst TriggerOpTypes = {\n  \"SET\": \"set\",\n  \"ADD\": \"add\",\n  \"DELETE\": \"delete\",\n  \"CLEAR\": \"clear\"\n};\nconst ReactiveFlags = {\n  \"SKIP\": \"__v_skip\",\n  \"IS_REACTIVE\": \"__v_isReactive\",\n  \"IS_READONLY\": \"__v_isReadonly\",\n  \"IS_SHALLOW\": \"__v_isShallow\",\n  \"RAW\": \"__v_raw\",\n  \"IS_REF\": \"__v_isRef\"\n};\nconst WatchErrorCodes = {\n  \"WATCH_GETTER\": 2,\n  \"2\": \"WATCH_GETTER\",\n  \"WATCH_CALLBACK\": 3,\n  \"3\": \"WATCH_CALLBACK\",\n  \"WATCH_CLEANUP\": 4,\n  \"4\": \"WATCH_CLEANUP\"\n};\nconst INITIAL_WATCHER_VALUE = {};\nconst cleanupMap = /* @__PURE__ */new WeakMap();\nlet activeWatcher = void 0;\nfunction getCurrentWatcher() {\n  return activeWatcher;\n}\nfunction onWatcherCleanup(cleanupFn, failSilently = false, owner = activeWatcher) {\n  if (owner) {\n    let cleanups = cleanupMap.get(owner);\n    if (!cleanups) cleanupMap.set(owner, cleanups = []);\n    cleanups.push(cleanupFn);\n  } else if ( true && !failSilently) {\n    warn(`onWatcherCleanup() was called when there was no active watcher to associate with.`);\n  }\n}\nfunction watch(source, cb, options = _vue_shared__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJ) {\n  const {\n    immediate,\n    deep,\n    once,\n    scheduler,\n    augmentJob,\n    call\n  } = options;\n  const warnInvalidSource = s => {\n    (options.onWarn || warn)(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`);\n  };\n  const reactiveGetter = source2 => {\n    if (deep) return source2;\n    if (isShallow(source2) || deep === false || deep === 0) return traverse(source2, 1);\n    return traverse(source2);\n  };\n  let effect;\n  let getter;\n  let cleanup;\n  let boundCleanup;\n  let forceTrigger = false;\n  let isMultiSource = false;\n  if (isRef(source)) {\n    getter = () => source.value;\n    forceTrigger = isShallow(source);\n  } else if (isReactive(source)) {\n    getter = () => reactiveGetter(source);\n    forceTrigger = true;\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(source)) {\n    isMultiSource = true;\n    forceTrigger = source.some(s => isReactive(s) || isShallow(s));\n    getter = () => source.map(s => {\n      if (isRef(s)) {\n        return s.value;\n      } else if (isReactive(s)) {\n        return reactiveGetter(s);\n      } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isFunction)(s)) {\n        return call ? call(s, 2) : s();\n      } else {\n         true && warnInvalidSource(s);\n      }\n    });\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isFunction)(source)) {\n    if (cb) {\n      getter = call ? () => call(source, 2) : source;\n    } else {\n      getter = () => {\n        if (cleanup) {\n          pauseTracking();\n          try {\n            cleanup();\n          } finally {\n            resetTracking();\n          }\n        }\n        const currentEffect = activeWatcher;\n        activeWatcher = effect;\n        try {\n          return call ? call(source, 3, [boundCleanup]) : source(boundCleanup);\n        } finally {\n          activeWatcher = currentEffect;\n        }\n      };\n    }\n  } else {\n    getter = _vue_shared__WEBPACK_IMPORTED_MODULE_0__.NOOP;\n     true && warnInvalidSource(source);\n  }\n  if (cb && deep) {\n    const baseGetter = getter;\n    const depth = deep === true ? Infinity : deep;\n    getter = () => traverse(baseGetter(), depth);\n  }\n  const scope = getCurrentScope();\n  const watchHandle = () => {\n    effect.stop();\n    if (scope) {\n      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.remove)(scope.effects, effect);\n    }\n  };\n  if (once && cb) {\n    const _cb = cb;\n    cb = (...args) => {\n      _cb(...args);\n      watchHandle();\n    };\n  }\n  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;\n  const job = immediateFirstRun => {\n    if (!(effect.flags & 1) || !effect.dirty && !immediateFirstRun) {\n      return;\n    }\n    if (cb) {\n      const newValue = effect.run();\n      if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasChanged)(v, oldValue[i])) : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasChanged)(newValue, oldValue))) {\n        if (cleanup) {\n          cleanup();\n        }\n        const currentWatcher = activeWatcher;\n        activeWatcher = effect;\n        try {\n          const args = [newValue,\n          // pass undefined as the old value when it's changed for the first time\n          oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue, boundCleanup];\n          call ? call(cb, 3, args) :\n          // @ts-expect-error\n          cb(...args);\n          oldValue = newValue;\n        } finally {\n          activeWatcher = currentWatcher;\n        }\n      }\n    } else {\n      effect.run();\n    }\n  };\n  if (augmentJob) {\n    augmentJob(job);\n  }\n  effect = new ReactiveEffect(getter);\n  effect.scheduler = scheduler ? () => scheduler(job, false) : job;\n  boundCleanup = fn => onWatcherCleanup(fn, false, effect);\n  cleanup = effect.onStop = () => {\n    const cleanups = cleanupMap.get(effect);\n    if (cleanups) {\n      if (call) {\n        call(cleanups, 4);\n      } else {\n        for (const cleanup2 of cleanups) cleanup2();\n      }\n      cleanupMap.delete(effect);\n    }\n  };\n  if (true) {\n    effect.onTrack = options.onTrack;\n    effect.onTrigger = options.onTrigger;\n  }\n  if (cb) {\n    if (immediate) {\n      job(true);\n    } else {\n      oldValue = effect.run();\n    }\n  } else if (scheduler) {\n    scheduler(job.bind(null, true), true);\n  } else {\n    effect.run();\n  }\n  watchHandle.pause = effect.pause.bind(effect);\n  watchHandle.resume = effect.resume.bind(effect);\n  watchHandle.stop = watchHandle;\n  return watchHandle;\n}\nfunction traverse(value, depth = Infinity, seen) {\n  if (depth <= 0 || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) || value[\"__v_skip\"]) {\n    return value;\n  }\n  seen = seen || /* @__PURE__ */new Set();\n  if (seen.has(value)) {\n    return value;\n  }\n  seen.add(value);\n  depth--;\n  if (isRef(value)) {\n    traverse(value.value, depth, seen);\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(value)) {\n    for (let i = 0; i < value.length; i++) {\n      traverse(value[i], depth, seen);\n    }\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isSet)(value) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isMap)(value)) {\n    value.forEach(v => {\n      traverse(v, depth, seen);\n    });\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value)) {\n    for (const key in value) {\n      traverse(value[key], depth, seen);\n    }\n    for (const key of Object.getOwnPropertySymbols(value)) {\n      if (Object.prototype.propertyIsEnumerable.call(value, key)) {\n        traverse(value[key], depth, seen);\n      }\n    }\n  }\n  return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\n");

/***/ }),

/***/ "./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTransition: () => (/* binding */ BaseTransition),\n/* harmony export */   BaseTransitionPropsValidators: () => (/* binding */ BaseTransitionPropsValidators),\n/* harmony export */   Comment: () => (/* binding */ Comment),\n/* harmony export */   DeprecationTypes: () => (/* binding */ DeprecationTypes),\n/* harmony export */   EffectScope: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.EffectScope),\n/* harmony export */   ErrorCodes: () => (/* binding */ ErrorCodes),\n/* harmony export */   ErrorTypeStrings: () => (/* binding */ ErrorTypeStrings),\n/* harmony export */   Fragment: () => (/* binding */ Fragment),\n/* harmony export */   KeepAlive: () => (/* binding */ KeepAlive),\n/* harmony export */   ReactiveEffect: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ReactiveEffect),\n/* harmony export */   Static: () => (/* binding */ Static),\n/* harmony export */   Suspense: () => (/* binding */ Suspense),\n/* harmony export */   Teleport: () => (/* binding */ Teleport),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   TrackOpTypes: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.TrackOpTypes),\n/* harmony export */   TriggerOpTypes: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.TriggerOpTypes),\n/* harmony export */   assertNumber: () => (/* binding */ assertNumber),\n/* harmony export */   callWithAsyncErrorHandling: () => (/* binding */ callWithAsyncErrorHandling),\n/* harmony export */   callWithErrorHandling: () => (/* binding */ callWithErrorHandling),\n/* harmony export */   camelize: () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize),\n/* harmony export */   capitalize: () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize),\n/* harmony export */   cloneVNode: () => (/* binding */ cloneVNode),\n/* harmony export */   compatUtils: () => (/* binding */ compatUtils),\n/* harmony export */   computed: () => (/* binding */ computed),\n/* harmony export */   createBlock: () => (/* binding */ createBlock),\n/* harmony export */   createCommentVNode: () => (/* binding */ createCommentVNode),\n/* harmony export */   createElementBlock: () => (/* binding */ createElementBlock),\n/* harmony export */   createElementVNode: () => (/* binding */ createBaseVNode),\n/* harmony export */   createHydrationRenderer: () => (/* binding */ createHydrationRenderer),\n/* harmony export */   createPropsRestProxy: () => (/* binding */ createPropsRestProxy),\n/* harmony export */   createRenderer: () => (/* binding */ createRenderer),\n/* harmony export */   createSlots: () => (/* binding */ createSlots),\n/* harmony export */   createStaticVNode: () => (/* binding */ createStaticVNode),\n/* harmony export */   createTextVNode: () => (/* binding */ createTextVNode),\n/* harmony export */   createVNode: () => (/* binding */ createVNode),\n/* harmony export */   customRef: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.customRef),\n/* harmony export */   defineAsyncComponent: () => (/* binding */ defineAsyncComponent),\n/* harmony export */   defineComponent: () => (/* binding */ defineComponent),\n/* harmony export */   defineEmits: () => (/* binding */ defineEmits),\n/* harmony export */   defineExpose: () => (/* binding */ defineExpose),\n/* harmony export */   defineModel: () => (/* binding */ defineModel),\n/* harmony export */   defineOptions: () => (/* binding */ defineOptions),\n/* harmony export */   defineProps: () => (/* binding */ defineProps),\n/* harmony export */   defineSlots: () => (/* binding */ defineSlots),\n/* harmony export */   devtools: () => (/* binding */ devtools),\n/* harmony export */   effect: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.effect),\n/* harmony export */   effectScope: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.effectScope),\n/* harmony export */   getCurrentInstance: () => (/* binding */ getCurrentInstance),\n/* harmony export */   getCurrentScope: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope),\n/* harmony export */   getCurrentWatcher: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.getCurrentWatcher),\n/* harmony export */   getTransitionRawChildren: () => (/* binding */ getTransitionRawChildren),\n/* harmony export */   guardReactiveProps: () => (/* binding */ guardReactiveProps),\n/* harmony export */   h: () => (/* binding */ h),\n/* harmony export */   handleError: () => (/* binding */ handleError),\n/* harmony export */   hasInjectionContext: () => (/* binding */ hasInjectionContext),\n/* harmony export */   hydrateOnIdle: () => (/* binding */ hydrateOnIdle),\n/* harmony export */   hydrateOnInteraction: () => (/* binding */ hydrateOnInteraction),\n/* harmony export */   hydrateOnMediaQuery: () => (/* binding */ hydrateOnMediaQuery),\n/* harmony export */   hydrateOnVisible: () => (/* binding */ hydrateOnVisible),\n/* harmony export */   initCustomFormatter: () => (/* binding */ initCustomFormatter),\n/* harmony export */   inject: () => (/* binding */ inject),\n/* harmony export */   isMemoSame: () => (/* binding */ isMemoSame),\n/* harmony export */   isProxy: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isProxy),\n/* harmony export */   isReactive: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReactive),\n/* harmony export */   isReadonly: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReadonly),\n/* harmony export */   isRef: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef),\n/* harmony export */   isRuntimeOnly: () => (/* binding */ isRuntimeOnly),\n/* harmony export */   isShallow: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isShallow),\n/* harmony export */   isVNode: () => (/* binding */ isVNode),\n/* harmony export */   markRaw: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.markRaw),\n/* harmony export */   mergeDefaults: () => (/* binding */ mergeDefaults),\n/* harmony export */   mergeModels: () => (/* binding */ mergeModels),\n/* harmony export */   mergeProps: () => (/* binding */ mergeProps),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   normalizeClass: () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeClass),\n/* harmony export */   normalizeProps: () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeProps),\n/* harmony export */   normalizeStyle: () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeStyle),\n/* harmony export */   onActivated: () => (/* binding */ onActivated),\n/* harmony export */   onBeforeMount: () => (/* binding */ onBeforeMount),\n/* harmony export */   onBeforeUnmount: () => (/* binding */ onBeforeUnmount),\n/* harmony export */   onBeforeUpdate: () => (/* binding */ onBeforeUpdate),\n/* harmony export */   onDeactivated: () => (/* binding */ onDeactivated),\n/* harmony export */   onErrorCaptured: () => (/* binding */ onErrorCaptured),\n/* harmony export */   onMounted: () => (/* binding */ onMounted),\n/* harmony export */   onRenderTracked: () => (/* binding */ onRenderTracked),\n/* harmony export */   onRenderTriggered: () => (/* binding */ onRenderTriggered),\n/* harmony export */   onScopeDispose: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.onScopeDispose),\n/* harmony export */   onServerPrefetch: () => (/* binding */ onServerPrefetch),\n/* harmony export */   onUnmounted: () => (/* binding */ onUnmounted),\n/* harmony export */   onUpdated: () => (/* binding */ onUpdated),\n/* harmony export */   onWatcherCleanup: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.onWatcherCleanup),\n/* harmony export */   openBlock: () => (/* binding */ openBlock),\n/* harmony export */   popScopeId: () => (/* binding */ popScopeId),\n/* harmony export */   provide: () => (/* binding */ provide),\n/* harmony export */   proxyRefs: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.proxyRefs),\n/* harmony export */   pushScopeId: () => (/* binding */ pushScopeId),\n/* harmony export */   queuePostFlushCb: () => (/* binding */ queuePostFlushCb),\n/* harmony export */   reactive: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.reactive),\n/* harmony export */   readonly: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.readonly),\n/* harmony export */   ref: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ref),\n/* harmony export */   registerRuntimeCompiler: () => (/* binding */ registerRuntimeCompiler),\n/* harmony export */   renderList: () => (/* binding */ renderList),\n/* harmony export */   renderSlot: () => (/* binding */ renderSlot),\n/* harmony export */   resolveComponent: () => (/* binding */ resolveComponent),\n/* harmony export */   resolveDirective: () => (/* binding */ resolveDirective),\n/* harmony export */   resolveDynamicComponent: () => (/* binding */ resolveDynamicComponent),\n/* harmony export */   resolveFilter: () => (/* binding */ resolveFilter),\n/* harmony export */   resolveTransitionHooks: () => (/* binding */ resolveTransitionHooks),\n/* harmony export */   setBlockTracking: () => (/* binding */ setBlockTracking),\n/* harmony export */   setDevtoolsHook: () => (/* binding */ setDevtoolsHook),\n/* harmony export */   setTransitionHooks: () => (/* binding */ setTransitionHooks),\n/* harmony export */   shallowReactive: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReactive),\n/* harmony export */   shallowReadonly: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly),\n/* harmony export */   shallowRef: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowRef),\n/* harmony export */   ssrContextKey: () => (/* binding */ ssrContextKey),\n/* harmony export */   ssrUtils: () => (/* binding */ ssrUtils),\n/* harmony export */   stop: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.stop),\n/* harmony export */   toDisplayString: () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.toDisplayString),\n/* harmony export */   toHandlerKey: () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey),\n/* harmony export */   toHandlers: () => (/* binding */ toHandlers),\n/* harmony export */   toRaw: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw),\n/* harmony export */   toRef: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRef),\n/* harmony export */   toRefs: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRefs),\n/* harmony export */   toValue: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toValue),\n/* harmony export */   transformVNodeArgs: () => (/* binding */ transformVNodeArgs),\n/* harmony export */   triggerRef: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.triggerRef),\n/* harmony export */   unref: () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.unref),\n/* harmony export */   useAttrs: () => (/* binding */ useAttrs),\n/* harmony export */   useId: () => (/* binding */ useId),\n/* harmony export */   useModel: () => (/* binding */ useModel),\n/* harmony export */   useSSRContext: () => (/* binding */ useSSRContext),\n/* harmony export */   useSlots: () => (/* binding */ useSlots),\n/* harmony export */   useTemplateRef: () => (/* binding */ useTemplateRef),\n/* harmony export */   useTransitionState: () => (/* binding */ useTransitionState),\n/* harmony export */   version: () => (/* binding */ version),\n/* harmony export */   warn: () => (/* binding */ warn),\n/* harmony export */   watch: () => (/* binding */ watch),\n/* harmony export */   watchEffect: () => (/* binding */ watchEffect),\n/* harmony export */   watchPostEffect: () => (/* binding */ watchPostEffect),\n/* harmony export */   watchSyncEffect: () => (/* binding */ watchSyncEffect),\n/* harmony export */   withAsyncContext: () => (/* binding */ withAsyncContext),\n/* harmony export */   withCtx: () => (/* binding */ withCtx),\n/* harmony export */   withDefaults: () => (/* binding */ withDefaults),\n/* harmony export */   withDirectives: () => (/* binding */ withDirectives),\n/* harmony export */   withMemo: () => (/* binding */ withMemo),\n/* harmony export */   withScopeId: () => (/* binding */ withScopeId)\n/* harmony export */ });\n/* harmony import */ var _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/reactivity */ \"./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\");\n/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vue/shared */ \"./node_modules/@vue/shared/dist/shared.esm-bundler.js\");\n/**\n* @vue/runtime-core v3.5.7\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n\n\n\n\nconst stack = [];\nfunction pushWarningContext(vnode) {\n  stack.push(vnode);\n}\nfunction popWarningContext() {\n  stack.pop();\n}\nlet isWarning = false;\nfunction warn$1(msg, ...args) {\n  if (isWarning) return;\n  isWarning = true;\n  (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();\n  const instance = stack.length ? stack[stack.length - 1].component : null;\n  const appWarnHandler = instance && instance.appContext.config.warnHandler;\n  const trace = getComponentTrace();\n  if (appWarnHandler) {\n    callWithErrorHandling(appWarnHandler, instance, 11, [\n    // eslint-disable-next-line no-restricted-syntax\n    msg + args.map(a => {\n      var _a, _b;\n      return (_b = (_a = a.toString) == null ? void 0 : _a.call(a)) != null ? _b : JSON.stringify(a);\n    }).join(\"\"), instance && instance.proxy, trace.map(({\n      vnode\n    }) => `at <${formatComponentName(instance, vnode.type)}>`).join(\"\\n\"), trace]);\n  } else {\n    const warnArgs = [`[Vue warn]: ${msg}`, ...args];\n    if (trace.length &&\n    // avoid spamming console during tests\n    true) {\n      warnArgs.push(`\n`, ...formatTrace(trace));\n    }\n    console.warn(...warnArgs);\n  }\n  (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();\n  isWarning = false;\n}\nfunction getComponentTrace() {\n  let currentVNode = stack[stack.length - 1];\n  if (!currentVNode) {\n    return [];\n  }\n  const normalizedStack = [];\n  while (currentVNode) {\n    const last = normalizedStack[0];\n    if (last && last.vnode === currentVNode) {\n      last.recurseCount++;\n    } else {\n      normalizedStack.push({\n        vnode: currentVNode,\n        recurseCount: 0\n      });\n    }\n    const parentInstance = currentVNode.component && currentVNode.component.parent;\n    currentVNode = parentInstance && parentInstance.vnode;\n  }\n  return normalizedStack;\n}\nfunction formatTrace(trace) {\n  const logs = [];\n  trace.forEach((entry, i) => {\n    logs.push(...(i === 0 ? [] : [`\n`]), ...formatTraceEntry(entry));\n  });\n  return logs;\n}\nfunction formatTraceEntry({\n  vnode,\n  recurseCount\n}) {\n  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;\n  const isRoot = vnode.component ? vnode.component.parent == null : false;\n  const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;\n  const close = `>` + postfix;\n  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];\n}\nfunction formatProps(props) {\n  const res = [];\n  const keys = Object.keys(props);\n  keys.slice(0, 3).forEach(key => {\n    res.push(...formatProp(key, props[key]));\n  });\n  if (keys.length > 3) {\n    res.push(` ...`);\n  }\n  return res;\n}\nfunction formatProp(key, value, raw) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(value)) {\n    value = JSON.stringify(value);\n    return raw ? value : [`${key}=${value}`];\n  } else if (typeof value === \"number\" || typeof value === \"boolean\" || value == null) {\n    return raw ? value : [`${key}=${value}`];\n  } else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(value)) {\n    value = formatProp(key, (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(value.value), true);\n    return raw ? value : [`${key}=Ref<`, value, `>`];\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value)) {\n    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];\n  } else {\n    value = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(value);\n    return raw ? value : [`${key}=`, value];\n  }\n}\nfunction assertNumber(val, type) {\n  if (false) {}\n  if (val === void 0) {\n    return;\n  } else if (typeof val !== \"number\") {\n    warn$1(`${type} is not a valid number - got ${JSON.stringify(val)}.`);\n  } else if (isNaN(val)) {\n    warn$1(`${type} is NaN - the duration expression might be incorrect.`);\n  }\n}\nconst ErrorCodes = {\n  \"SETUP_FUNCTION\": 0,\n  \"0\": \"SETUP_FUNCTION\",\n  \"RENDER_FUNCTION\": 1,\n  \"1\": \"RENDER_FUNCTION\",\n  \"NATIVE_EVENT_HANDLER\": 5,\n  \"5\": \"NATIVE_EVENT_HANDLER\",\n  \"COMPONENT_EVENT_HANDLER\": 6,\n  \"6\": \"COMPONENT_EVENT_HANDLER\",\n  \"VNODE_HOOK\": 7,\n  \"7\": \"VNODE_HOOK\",\n  \"DIRECTIVE_HOOK\": 8,\n  \"8\": \"DIRECTIVE_HOOK\",\n  \"TRANSITION_HOOK\": 9,\n  \"9\": \"TRANSITION_HOOK\",\n  \"APP_ERROR_HANDLER\": 10,\n  \"10\": \"APP_ERROR_HANDLER\",\n  \"APP_WARN_HANDLER\": 11,\n  \"11\": \"APP_WARN_HANDLER\",\n  \"FUNCTION_REF\": 12,\n  \"12\": \"FUNCTION_REF\",\n  \"ASYNC_COMPONENT_LOADER\": 13,\n  \"13\": \"ASYNC_COMPONENT_LOADER\",\n  \"SCHEDULER\": 14,\n  \"14\": \"SCHEDULER\",\n  \"COMPONENT_UPDATE\": 15,\n  \"15\": \"COMPONENT_UPDATE\",\n  \"APP_UNMOUNT_CLEANUP\": 16,\n  \"16\": \"APP_UNMOUNT_CLEANUP\"\n};\nconst ErrorTypeStrings$1 = {\n  [\"sp\"]: \"serverPrefetch hook\",\n  [\"bc\"]: \"beforeCreate hook\",\n  [\"c\"]: \"created hook\",\n  [\"bm\"]: \"beforeMount hook\",\n  [\"m\"]: \"mounted hook\",\n  [\"bu\"]: \"beforeUpdate hook\",\n  [\"u\"]: \"updated\",\n  [\"bum\"]: \"beforeUnmount hook\",\n  [\"um\"]: \"unmounted hook\",\n  [\"a\"]: \"activated hook\",\n  [\"da\"]: \"deactivated hook\",\n  [\"ec\"]: \"errorCaptured hook\",\n  [\"rtc\"]: \"renderTracked hook\",\n  [\"rtg\"]: \"renderTriggered hook\",\n  [0]: \"setup function\",\n  [1]: \"render function\",\n  [2]: \"watcher getter\",\n  [3]: \"watcher callback\",\n  [4]: \"watcher cleanup function\",\n  [5]: \"native event handler\",\n  [6]: \"component event handler\",\n  [7]: \"vnode hook\",\n  [8]: \"directive hook\",\n  [9]: \"transition hook\",\n  [10]: \"app errorHandler\",\n  [11]: \"app warnHandler\",\n  [12]: \"ref function\",\n  [13]: \"async component loader\",\n  [14]: \"scheduler flush\",\n  [15]: \"component update\",\n  [16]: \"app unmount cleanup function\"\n};\nfunction callWithErrorHandling(fn, instance, type, args) {\n  try {\n    return args ? fn(...args) : fn();\n  } catch (err) {\n    handleError(err, instance, type);\n  }\n}\nfunction callWithAsyncErrorHandling(fn, instance, type, args) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(fn)) {\n    const res = callWithErrorHandling(fn, instance, type, args);\n    if (res && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isPromise)(res)) {\n      res.catch(err => {\n        handleError(err, instance, type);\n      });\n    }\n    return res;\n  }\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(fn)) {\n    const values = [];\n    for (let i = 0; i < fn.length; i++) {\n      values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));\n    }\n    return values;\n  } else if (true) {\n    warn$1(`Invalid value type passed to callWithAsyncErrorHandling(): ${typeof fn}`);\n  }\n}\nfunction handleError(err, instance, type, throwInDev = true) {\n  const contextVNode = instance ? instance.vnode : null;\n  const {\n    errorHandler,\n    throwUnhandledErrorInProduction\n  } = instance && instance.appContext.config || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;\n  if (instance) {\n    let cur = instance.parent;\n    const exposedInstance = instance.proxy;\n    const errorInfo =  true ? ErrorTypeStrings$1[type] : 0;\n    while (cur) {\n      const errorCapturedHooks = cur.ec;\n      if (errorCapturedHooks) {\n        for (let i = 0; i < errorCapturedHooks.length; i++) {\n          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {\n            return;\n          }\n        }\n      }\n      cur = cur.parent;\n    }\n    if (errorHandler) {\n      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();\n      callWithErrorHandling(errorHandler, null, 10, [err, exposedInstance, errorInfo]);\n      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();\n      return;\n    }\n  }\n  logError(err, type, contextVNode, throwInDev, throwUnhandledErrorInProduction);\n}\nfunction logError(err, type, contextVNode, throwInDev = true, throwInProd = false) {\n  if (true) {\n    const info = ErrorTypeStrings$1[type];\n    if (contextVNode) {\n      pushWarningContext(contextVNode);\n    }\n    warn$1(`Unhandled error${info ? ` during execution of ${info}` : ``}`);\n    if (contextVNode) {\n      popWarningContext();\n    }\n    if (throwInDev) {\n      throw err;\n    } else {\n      console.error(err);\n    }\n  } else {}\n}\nlet isFlushing = false;\nlet isFlushPending = false;\nconst queue = [];\nlet flushIndex = 0;\nconst pendingPostFlushCbs = [];\nlet activePostFlushCbs = null;\nlet postFlushIndex = 0;\nconst resolvedPromise = /* @__PURE__ */Promise.resolve();\nlet currentFlushPromise = null;\nconst RECURSION_LIMIT = 100;\nfunction nextTick(fn) {\n  const p = currentFlushPromise || resolvedPromise;\n  return fn ? p.then(this ? fn.bind(this) : fn) : p;\n}\nfunction findInsertionIndex(id) {\n  let start = isFlushing ? flushIndex + 1 : 0;\n  let end = queue.length;\n  while (start < end) {\n    const middle = start + end >>> 1;\n    const middleJob = queue[middle];\n    const middleJobId = getId(middleJob);\n    if (middleJobId < id || middleJobId === id && middleJob.flags & 2) {\n      start = middle + 1;\n    } else {\n      end = middle;\n    }\n  }\n  return start;\n}\nfunction queueJob(job) {\n  if (!(job.flags & 1)) {\n    const jobId = getId(job);\n    const lastJob = queue[queue.length - 1];\n    if (!lastJob ||\n    // fast path when the job id is larger than the tail\n    !(job.flags & 2) && jobId >= getId(lastJob)) {\n      queue.push(job);\n    } else {\n      queue.splice(findInsertionIndex(jobId), 0, job);\n    }\n    job.flags |= 1;\n    queueFlush();\n  }\n}\nfunction queueFlush() {\n  if (!isFlushing && !isFlushPending) {\n    isFlushPending = true;\n    currentFlushPromise = resolvedPromise.then(flushJobs);\n  }\n}\nfunction queuePostFlushCb(cb) {\n  if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(cb)) {\n    if (activePostFlushCbs && cb.id === -1) {\n      activePostFlushCbs.splice(postFlushIndex + 1, 0, cb);\n    } else if (!(cb.flags & 1)) {\n      pendingPostFlushCbs.push(cb);\n      cb.flags |= 1;\n    }\n  } else {\n    pendingPostFlushCbs.push(...cb);\n  }\n  queueFlush();\n}\nfunction flushPreFlushCbs(instance, seen, i = isFlushing ? flushIndex + 1 : 0) {\n  if (true) {\n    seen = seen || /* @__PURE__ */new Map();\n  }\n  for (; i < queue.length; i++) {\n    const cb = queue[i];\n    if (cb && cb.flags & 2) {\n      if (instance && cb.id !== instance.uid) {\n        continue;\n      }\n      if ( true && checkRecursiveUpdates(seen, cb)) {\n        continue;\n      }\n      queue.splice(i, 1);\n      i--;\n      if (cb.flags & 4) {\n        cb.flags &= ~1;\n      }\n      cb();\n      if (!(cb.flags & 4)) {\n        cb.flags &= ~1;\n      }\n    }\n  }\n}\nfunction flushPostFlushCbs(seen) {\n  if (pendingPostFlushCbs.length) {\n    const deduped = [...new Set(pendingPostFlushCbs)].sort((a, b) => getId(a) - getId(b));\n    pendingPostFlushCbs.length = 0;\n    if (activePostFlushCbs) {\n      activePostFlushCbs.push(...deduped);\n      return;\n    }\n    activePostFlushCbs = deduped;\n    if (true) {\n      seen = seen || /* @__PURE__ */new Map();\n    }\n    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {\n      const cb = activePostFlushCbs[postFlushIndex];\n      if ( true && checkRecursiveUpdates(seen, cb)) {\n        continue;\n      }\n      if (cb.flags & 4) {\n        cb.flags &= ~1;\n      }\n      if (!(cb.flags & 8)) cb();\n      cb.flags &= ~1;\n    }\n    activePostFlushCbs = null;\n    postFlushIndex = 0;\n  }\n}\nconst getId = job => job.id == null ? job.flags & 2 ? -1 : Infinity : job.id;\nfunction flushJobs(seen) {\n  isFlushPending = false;\n  isFlushing = true;\n  if (true) {\n    seen = seen || /* @__PURE__ */new Map();\n  }\n  const check =  true ? job => checkRecursiveUpdates(seen, job) : 0;\n  try {\n    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {\n      const job = queue[flushIndex];\n      if (job && !(job.flags & 8)) {\n        if ( true && check(job)) {\n          continue;\n        }\n        if (job.flags & 4) {\n          job.flags &= ~1;\n        }\n        callWithErrorHandling(job, job.i, job.i ? 15 : 14);\n        if (!(job.flags & 4)) {\n          job.flags &= ~1;\n        }\n      }\n    }\n  } finally {\n    for (; flushIndex < queue.length; flushIndex++) {\n      const job = queue[flushIndex];\n      if (job) {\n        job.flags &= ~1;\n      }\n    }\n    flushIndex = 0;\n    queue.length = 0;\n    flushPostFlushCbs(seen);\n    isFlushing = false;\n    currentFlushPromise = null;\n    if (queue.length || pendingPostFlushCbs.length) {\n      flushJobs(seen);\n    }\n  }\n}\nfunction checkRecursiveUpdates(seen, fn) {\n  const count = seen.get(fn) || 0;\n  if (count > RECURSION_LIMIT) {\n    const instance = fn.i;\n    const componentName = instance && getComponentName(instance.type);\n    handleError(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`, null, 10);\n    return true;\n  }\n  seen.set(fn, count + 1);\n  return false;\n}\nlet isHmrUpdating = false;\nconst hmrDirtyComponents = /* @__PURE__ */new Map();\nif (true) {\n  (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.getGlobalThis)().__VUE_HMR_RUNTIME__ = {\n    createRecord: tryWrap(createRecord),\n    rerender: tryWrap(rerender),\n    reload: tryWrap(reload)\n  };\n}\nconst map = /* @__PURE__ */new Map();\nfunction registerHMR(instance) {\n  const id = instance.type.__hmrId;\n  let record = map.get(id);\n  if (!record) {\n    createRecord(id, instance.type);\n    record = map.get(id);\n  }\n  record.instances.add(instance);\n}\nfunction unregisterHMR(instance) {\n  map.get(instance.type.__hmrId).instances.delete(instance);\n}\nfunction createRecord(id, initialDef) {\n  if (map.has(id)) {\n    return false;\n  }\n  map.set(id, {\n    initialDef: normalizeClassComponent(initialDef),\n    instances: /* @__PURE__ */new Set()\n  });\n  return true;\n}\nfunction normalizeClassComponent(component) {\n  return isClassComponent(component) ? component.__vccOpts : component;\n}\nfunction rerender(id, newRender) {\n  const record = map.get(id);\n  if (!record) {\n    return;\n  }\n  record.initialDef.render = newRender;\n  [...record.instances].forEach(instance => {\n    if (newRender) {\n      instance.render = newRender;\n      normalizeClassComponent(instance.type).render = newRender;\n    }\n    instance.renderCache = [];\n    isHmrUpdating = true;\n    instance.update();\n    isHmrUpdating = false;\n  });\n}\nfunction reload(id, newComp) {\n  const record = map.get(id);\n  if (!record) return;\n  newComp = normalizeClassComponent(newComp);\n  updateComponentDef(record.initialDef, newComp);\n  const instances = [...record.instances];\n  for (let i = 0; i < instances.length; i++) {\n    const instance = instances[i];\n    const oldComp = normalizeClassComponent(instance.type);\n    let dirtyInstances = hmrDirtyComponents.get(oldComp);\n    if (!dirtyInstances) {\n      if (oldComp !== record.initialDef) {\n        updateComponentDef(oldComp, newComp);\n      }\n      hmrDirtyComponents.set(oldComp, dirtyInstances = /* @__PURE__ */new Set());\n    }\n    dirtyInstances.add(instance);\n    instance.appContext.propsCache.delete(instance.type);\n    instance.appContext.emitsCache.delete(instance.type);\n    instance.appContext.optionsCache.delete(instance.type);\n    if (instance.ceReload) {\n      dirtyInstances.add(instance);\n      instance.ceReload(newComp.styles);\n      dirtyInstances.delete(instance);\n    } else if (instance.parent) {\n      queueJob(() => {\n        isHmrUpdating = true;\n        instance.parent.update();\n        isHmrUpdating = false;\n        dirtyInstances.delete(instance);\n      });\n    } else if (instance.appContext.reload) {\n      instance.appContext.reload();\n    } else if (typeof window !== \"undefined\") {\n      window.location.reload();\n    } else {\n      console.warn(\"[HMR] Root or manually mounted instance modified. Full reload required.\");\n    }\n    if (instance.root.ce && instance !== instance.root) {\n      instance.root.ce._removeChildStyle(oldComp);\n    }\n  }\n  queuePostFlushCb(() => {\n    hmrDirtyComponents.clear();\n  });\n}\nfunction updateComponentDef(oldComp, newComp) {\n  (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(oldComp, newComp);\n  for (const key in oldComp) {\n    if (key !== \"__file\" && !(key in newComp)) {\n      delete oldComp[key];\n    }\n  }\n}\nfunction tryWrap(fn) {\n  return (id, arg) => {\n    try {\n      return fn(id, arg);\n    } catch (e) {\n      console.error(e);\n      console.warn(`[HMR] Something went wrong during Vue component hot-reload. Full reload required.`);\n    }\n  };\n}\nlet devtools$1;\nlet buffer = [];\nlet devtoolsNotInstalled = false;\nfunction emit$1(event, ...args) {\n  if (devtools$1) {\n    devtools$1.emit(event, ...args);\n  } else if (!devtoolsNotInstalled) {\n    buffer.push({\n      event,\n      args\n    });\n  }\n}\nfunction setDevtoolsHook$1(hook, target) {\n  var _a, _b;\n  devtools$1 = hook;\n  if (devtools$1) {\n    devtools$1.enabled = true;\n    buffer.forEach(({\n      event,\n      args\n    }) => devtools$1.emit(event, ...args));\n    buffer = [];\n  } else if (\n  // handle late devtools injection - only do this if we are in an actual\n  // browser environment to avoid the timer handle stalling test runner exit\n  // (#4815)\n  typeof window !== \"undefined\" &&\n  // some envs mock window but not fully\n  window.HTMLElement &&\n  // also exclude jsdom\n  // eslint-disable-next-line no-restricted-syntax\n  !((_b = (_a = window.navigator) == null ? void 0 : _a.userAgent) == null ? void 0 : _b.includes(\"jsdom\"))) {\n    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];\n    replay.push(newHook => {\n      setDevtoolsHook$1(newHook, target);\n    });\n    setTimeout(() => {\n      if (!devtools$1) {\n        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;\n        devtoolsNotInstalled = true;\n        buffer = [];\n      }\n    }, 3e3);\n  } else {\n    devtoolsNotInstalled = true;\n    buffer = [];\n  }\n}\nfunction devtoolsInitApp(app, version) {\n  emit$1(\"app:init\" /* APP_INIT */, app, version, {\n    Fragment,\n    Text,\n    Comment,\n    Static\n  });\n}\nfunction devtoolsUnmountApp(app) {\n  emit$1(\"app:unmount\" /* APP_UNMOUNT */, app);\n}\nconst devtoolsComponentAdded = /* @__PURE__ */createDevtoolsComponentHook(\"component:added\" /* COMPONENT_ADDED */);\nconst devtoolsComponentUpdated = /* @__PURE__ */createDevtoolsComponentHook(\"component:updated\" /* COMPONENT_UPDATED */);\nconst _devtoolsComponentRemoved = /* @__PURE__ */createDevtoolsComponentHook(\"component:removed\" /* COMPONENT_REMOVED */);\nconst devtoolsComponentRemoved = component => {\n  if (devtools$1 && typeof devtools$1.cleanupBuffer === \"function\" &&\n  // remove the component if it wasn't buffered\n  !devtools$1.cleanupBuffer(component)) {\n    _devtoolsComponentRemoved(component);\n  }\n};\n/*! #__NO_SIDE_EFFECTS__ */\n// @__NO_SIDE_EFFECTS__\nfunction createDevtoolsComponentHook(hook) {\n  return component => {\n    emit$1(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : void 0, component);\n  };\n}\nconst devtoolsPerfStart = /* @__PURE__ */createDevtoolsPerformanceHook(\"perf:start\" /* PERFORMANCE_START */);\nconst devtoolsPerfEnd = /* @__PURE__ */createDevtoolsPerformanceHook(\"perf:end\" /* PERFORMANCE_END */);\nfunction createDevtoolsPerformanceHook(hook) {\n  return (component, type, time) => {\n    emit$1(hook, component.appContext.app, component.uid, component, type, time);\n  };\n}\nfunction devtoolsComponentEmit(component, event, params) {\n  emit$1(\"component:emit\" /* COMPONENT_EMIT */, component.appContext.app, component, event, params);\n}\nlet currentRenderingInstance = null;\nlet currentScopeId = null;\nfunction setCurrentRenderingInstance(instance) {\n  const prev = currentRenderingInstance;\n  currentRenderingInstance = instance;\n  currentScopeId = instance && instance.type.__scopeId || null;\n  return prev;\n}\nfunction pushScopeId(id) {\n  currentScopeId = id;\n}\nfunction popScopeId() {\n  currentScopeId = null;\n}\nconst withScopeId = _id => withCtx;\nfunction withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {\n  if (!ctx) return fn;\n  if (fn._n) {\n    return fn;\n  }\n  const renderFnWithContext = (...args) => {\n    if (renderFnWithContext._d) {\n      setBlockTracking(-1);\n    }\n    const prevInstance = setCurrentRenderingInstance(ctx);\n    let res;\n    try {\n      res = fn(...args);\n    } finally {\n      setCurrentRenderingInstance(prevInstance);\n      if (renderFnWithContext._d) {\n        setBlockTracking(1);\n      }\n    }\n    if (true) {\n      devtoolsComponentUpdated(ctx);\n    }\n    return res;\n  };\n  renderFnWithContext._n = true;\n  renderFnWithContext._c = true;\n  renderFnWithContext._d = true;\n  return renderFnWithContext;\n}\nfunction validateDirectiveName(name) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isBuiltInDirective)(name)) {\n    warn$1(\"Do not use built-in directive ids as custom directive id: \" + name);\n  }\n}\nfunction withDirectives(vnode, directives) {\n  if (currentRenderingInstance === null) {\n     true && warn$1(`withDirectives can only be used inside render functions.`);\n    return vnode;\n  }\n  const instance = getComponentPublicInstance(currentRenderingInstance);\n  const bindings = vnode.dirs || (vnode.dirs = []);\n  for (let i = 0; i < directives.length; i++) {\n    let [dir, value, arg, modifiers = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ] = directives[i];\n    if (dir) {\n      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(dir)) {\n        dir = {\n          mounted: dir,\n          updated: dir\n        };\n      }\n      if (dir.deep) {\n        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.traverse)(value);\n      }\n      bindings.push({\n        dir,\n        instance,\n        value,\n        oldValue: void 0,\n        arg,\n        modifiers\n      });\n    }\n  }\n  return vnode;\n}\nfunction invokeDirectiveHook(vnode, prevVNode, instance, name) {\n  const bindings = vnode.dirs;\n  const oldBindings = prevVNode && prevVNode.dirs;\n  for (let i = 0; i < bindings.length; i++) {\n    const binding = bindings[i];\n    if (oldBindings) {\n      binding.oldValue = oldBindings[i].value;\n    }\n    let hook = binding.dir[name];\n    if (hook) {\n      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();\n      callWithAsyncErrorHandling(hook, instance, 8, [vnode.el, binding, vnode, prevVNode]);\n      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();\n    }\n  }\n}\nconst TeleportEndKey = Symbol(\"_vte\");\nconst isTeleport = type => type.__isTeleport;\nconst isTeleportDisabled = props => props && (props.disabled || props.disabled === \"\");\nconst isTeleportDeferred = props => props && (props.defer || props.defer === \"\");\nconst isTargetSVG = target => typeof SVGElement !== \"undefined\" && target instanceof SVGElement;\nconst isTargetMathML = target => typeof MathMLElement === \"function\" && target instanceof MathMLElement;\nconst resolveTarget = (props, select) => {\n  const targetSelector = props && props.to;\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(targetSelector)) {\n    if (!select) {\n       true && warn$1(`Current renderer does not support string target for Teleports. (missing querySelector renderer option)`);\n      return null;\n    } else {\n      const target = select(targetSelector);\n      if ( true && !target && !isTeleportDisabled(props)) {\n        warn$1(`Failed to locate Teleport target with selector \"${targetSelector}\". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`);\n      }\n      return target;\n    }\n  } else {\n    if ( true && !targetSelector && !isTeleportDisabled(props)) {\n      warn$1(`Invalid Teleport target: ${targetSelector}`);\n    }\n    return targetSelector;\n  }\n};\nconst TeleportImpl = {\n  name: \"Teleport\",\n  __isTeleport: true,\n  process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals) {\n    const {\n      mc: mountChildren,\n      pc: patchChildren,\n      pbc: patchBlockChildren,\n      o: {\n        insert,\n        querySelector,\n        createText,\n        createComment\n      }\n    } = internals;\n    const disabled = isTeleportDisabled(n2.props);\n    let {\n      shapeFlag,\n      children,\n      dynamicChildren\n    } = n2;\n    if ( true && isHmrUpdating) {\n      optimized = false;\n      dynamicChildren = null;\n    }\n    if (n1 == null) {\n      const placeholder = n2.el =  true ? createComment(\"teleport start\") : 0;\n      const mainAnchor = n2.anchor =  true ? createComment(\"teleport end\") : 0;\n      insert(placeholder, container, anchor);\n      insert(mainAnchor, container, anchor);\n      const mount = (container2, anchor2) => {\n        if (shapeFlag & 16) {\n          if (parentComponent && parentComponent.isCE) {\n            parentComponent.ce._teleportTarget = container2;\n          }\n          mountChildren(children, container2, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n        }\n      };\n      const mountToTarget = () => {\n        const target = n2.target = resolveTarget(n2.props, querySelector);\n        const targetAnchor = prepareAnchor(target, n2, createText, insert);\n        if (target) {\n          if (namespace !== \"svg\" && isTargetSVG(target)) {\n            namespace = \"svg\";\n          } else if (namespace !== \"mathml\" && isTargetMathML(target)) {\n            namespace = \"mathml\";\n          }\n          if (!disabled) {\n            mount(target, targetAnchor);\n            updateCssVars(n2);\n          }\n        } else if ( true && !disabled) {\n          warn$1(\"Invalid Teleport target on mount:\", target, `(${typeof target})`);\n        }\n      };\n      if (disabled) {\n        mount(container, mainAnchor);\n        updateCssVars(n2);\n      }\n      if (isTeleportDeferred(n2.props)) {\n        queuePostRenderEffect(mountToTarget, parentSuspense);\n      } else {\n        mountToTarget();\n      }\n    } else {\n      n2.el = n1.el;\n      n2.targetStart = n1.targetStart;\n      const mainAnchor = n2.anchor = n1.anchor;\n      const target = n2.target = n1.target;\n      const targetAnchor = n2.targetAnchor = n1.targetAnchor;\n      const wasDisabled = isTeleportDisabled(n1.props);\n      const currentContainer = wasDisabled ? container : target;\n      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;\n      if (namespace === \"svg\" || isTargetSVG(target)) {\n        namespace = \"svg\";\n      } else if (namespace === \"mathml\" || isTargetMathML(target)) {\n        namespace = \"mathml\";\n      }\n      if (dynamicChildren) {\n        patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, namespace, slotScopeIds);\n        traverseStaticChildren(n1, n2, true);\n      } else if (!optimized) {\n        patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, false);\n      }\n      if (disabled) {\n        if (!wasDisabled) {\n          moveTeleport(n2, container, mainAnchor, internals, 1);\n        } else {\n          if (n2.props && n1.props && n2.props.to !== n1.props.to) {\n            n2.props.to = n1.props.to;\n          }\n        }\n      } else {\n        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {\n          const nextTarget = n2.target = resolveTarget(n2.props, querySelector);\n          if (nextTarget) {\n            moveTeleport(n2, nextTarget, null, internals, 0);\n          } else if (true) {\n            warn$1(\"Invalid Teleport target on update:\", target, `(${typeof target})`);\n          }\n        } else if (wasDisabled) {\n          moveTeleport(n2, target, targetAnchor, internals, 1);\n        }\n      }\n      updateCssVars(n2);\n    }\n  },\n  remove(vnode, parentComponent, parentSuspense, {\n    um: unmount,\n    o: {\n      remove: hostRemove\n    }\n  }, doRemove) {\n    const {\n      shapeFlag,\n      children,\n      anchor,\n      targetStart,\n      targetAnchor,\n      target,\n      props\n    } = vnode;\n    if (target) {\n      hostRemove(targetStart);\n      hostRemove(targetAnchor);\n    }\n    doRemove && hostRemove(anchor);\n    if (shapeFlag & 16) {\n      const shouldRemove = doRemove || !isTeleportDisabled(props);\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        unmount(child, parentComponent, parentSuspense, shouldRemove, !!child.dynamicChildren);\n      }\n    }\n  },\n  move: moveTeleport,\n  hydrate: hydrateTeleport\n};\nfunction moveTeleport(vnode, container, parentAnchor, {\n  o: {\n    insert\n  },\n  m: move\n}, moveType = 2) {\n  if (moveType === 0) {\n    insert(vnode.targetAnchor, container, parentAnchor);\n  }\n  const {\n    el,\n    anchor,\n    shapeFlag,\n    children,\n    props\n  } = vnode;\n  const isReorder = moveType === 2;\n  if (isReorder) {\n    insert(el, container, parentAnchor);\n  }\n  if (!isReorder || isTeleportDisabled(props)) {\n    if (shapeFlag & 16) {\n      for (let i = 0; i < children.length; i++) {\n        move(children[i], container, parentAnchor, 2);\n      }\n    }\n  }\n  if (isReorder) {\n    insert(anchor, container, parentAnchor);\n  }\n}\nfunction hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, {\n  o: {\n    nextSibling,\n    parentNode,\n    querySelector,\n    insert,\n    createText\n  }\n}, hydrateChildren) {\n  const target = vnode.target = resolveTarget(vnode.props, querySelector);\n  if (target) {\n    const targetNode = target._lpa || target.firstChild;\n    if (vnode.shapeFlag & 16) {\n      if (isTeleportDisabled(vnode.props)) {\n        vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);\n        vnode.targetStart = targetNode;\n        vnode.targetAnchor = targetNode && nextSibling(targetNode);\n      } else {\n        vnode.anchor = nextSibling(node);\n        let targetAnchor = targetNode;\n        while (targetAnchor) {\n          if (targetAnchor && targetAnchor.nodeType === 8) {\n            if (targetAnchor.data === \"teleport start anchor\") {\n              vnode.targetStart = targetAnchor;\n            } else if (targetAnchor.data === \"teleport anchor\") {\n              vnode.targetAnchor = targetAnchor;\n              target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);\n              break;\n            }\n          }\n          targetAnchor = nextSibling(targetAnchor);\n        }\n        if (!vnode.targetAnchor) {\n          prepareAnchor(target, vnode, createText, insert);\n        }\n        hydrateChildren(targetNode && nextSibling(targetNode), vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);\n      }\n    }\n    updateCssVars(vnode);\n  }\n  return vnode.anchor && nextSibling(vnode.anchor);\n}\nconst Teleport = TeleportImpl;\nfunction updateCssVars(vnode) {\n  const ctx = vnode.ctx;\n  if (ctx && ctx.ut) {\n    let node = vnode.targetStart;\n    while (node && node !== vnode.targetAnchor) {\n      if (node.nodeType === 1) node.setAttribute(\"data-v-owner\", ctx.uid);\n      node = node.nextSibling;\n    }\n    ctx.ut();\n  }\n}\nfunction prepareAnchor(target, vnode, createText, insert) {\n  const targetStart = vnode.targetStart = createText(\"\");\n  const targetAnchor = vnode.targetAnchor = createText(\"\");\n  targetStart[TeleportEndKey] = targetAnchor;\n  if (target) {\n    insert(targetStart, target);\n    insert(targetAnchor, target);\n  }\n  return targetAnchor;\n}\nconst leaveCbKey = Symbol(\"_leaveCb\");\nconst enterCbKey = Symbol(\"_enterCb\");\nfunction useTransitionState() {\n  const state = {\n    isMounted: false,\n    isLeaving: false,\n    isUnmounting: false,\n    leavingVNodes: /* @__PURE__ */new Map()\n  };\n  onMounted(() => {\n    state.isMounted = true;\n  });\n  onBeforeUnmount(() => {\n    state.isUnmounting = true;\n  });\n  return state;\n}\nconst TransitionHookValidator = [Function, Array];\nconst BaseTransitionPropsValidators = {\n  mode: String,\n  appear: Boolean,\n  persisted: Boolean,\n  // enter\n  onBeforeEnter: TransitionHookValidator,\n  onEnter: TransitionHookValidator,\n  onAfterEnter: TransitionHookValidator,\n  onEnterCancelled: TransitionHookValidator,\n  // leave\n  onBeforeLeave: TransitionHookValidator,\n  onLeave: TransitionHookValidator,\n  onAfterLeave: TransitionHookValidator,\n  onLeaveCancelled: TransitionHookValidator,\n  // appear\n  onBeforeAppear: TransitionHookValidator,\n  onAppear: TransitionHookValidator,\n  onAfterAppear: TransitionHookValidator,\n  onAppearCancelled: TransitionHookValidator\n};\nconst recursiveGetSubtree = instance => {\n  const subTree = instance.subTree;\n  return subTree.component ? recursiveGetSubtree(subTree.component) : subTree;\n};\nconst BaseTransitionImpl = {\n  name: `BaseTransition`,\n  props: BaseTransitionPropsValidators,\n  setup(props, {\n    slots\n  }) {\n    const instance = getCurrentInstance();\n    const state = useTransitionState();\n    return () => {\n      const children = slots.default && getTransitionRawChildren(slots.default(), true);\n      if (!children || !children.length) {\n        return;\n      }\n      const child = findNonCommentChild(children);\n      const rawProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(props);\n      const {\n        mode\n      } = rawProps;\n      if ( true && mode && mode !== \"in-out\" && mode !== \"out-in\" && mode !== \"default\") {\n        warn$1(`invalid <transition> mode: ${mode}`);\n      }\n      if (state.isLeaving) {\n        return emptyPlaceholder(child);\n      }\n      const innerChild = getInnerChild$1(child);\n      if (!innerChild) {\n        return emptyPlaceholder(child);\n      }\n      let enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance,\n      // #11061, ensure enterHooks is fresh after clone\n      hooks => enterHooks = hooks);\n      if (innerChild.type !== Comment) {\n        setTransitionHooks(innerChild, enterHooks);\n      }\n      const oldChild = instance.subTree;\n      const oldInnerChild = oldChild && getInnerChild$1(oldChild);\n      if (oldInnerChild && oldInnerChild.type !== Comment && !isSameVNodeType(innerChild, oldInnerChild) && recursiveGetSubtree(instance).type !== Comment) {\n        const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);\n        setTransitionHooks(oldInnerChild, leavingHooks);\n        if (mode === \"out-in\" && innerChild.type !== Comment) {\n          state.isLeaving = true;\n          leavingHooks.afterLeave = () => {\n            state.isLeaving = false;\n            if (!(instance.job.flags & 8)) {\n              instance.update();\n            }\n            delete leavingHooks.afterLeave;\n          };\n          return emptyPlaceholder(child);\n        } else if (mode === \"in-out\" && innerChild.type !== Comment) {\n          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {\n            const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);\n            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;\n            el[leaveCbKey] = () => {\n              earlyRemove();\n              el[leaveCbKey] = void 0;\n              delete enterHooks.delayedLeave;\n            };\n            enterHooks.delayedLeave = delayedLeave;\n          };\n        }\n      }\n      return child;\n    };\n  }\n};\nfunction findNonCommentChild(children) {\n  let child = children[0];\n  if (children.length > 1) {\n    let hasFound = false;\n    for (const c of children) {\n      if (c.type !== Comment) {\n        if ( true && hasFound) {\n          warn$1(\"<transition> can only be used on a single element or component. Use <transition-group> for lists.\");\n          break;\n        }\n        child = c;\n        hasFound = true;\n        if (false) {}\n      }\n    }\n  }\n  return child;\n}\nconst BaseTransition = BaseTransitionImpl;\nfunction getLeavingNodesForType(state, vnode) {\n  const {\n    leavingVNodes\n  } = state;\n  let leavingVNodesCache = leavingVNodes.get(vnode.type);\n  if (!leavingVNodesCache) {\n    leavingVNodesCache = /* @__PURE__ */Object.create(null);\n    leavingVNodes.set(vnode.type, leavingVNodesCache);\n  }\n  return leavingVNodesCache;\n}\nfunction resolveTransitionHooks(vnode, props, state, instance, postClone) {\n  const {\n    appear,\n    mode,\n    persisted = false,\n    onBeforeEnter,\n    onEnter,\n    onAfterEnter,\n    onEnterCancelled,\n    onBeforeLeave,\n    onLeave,\n    onAfterLeave,\n    onLeaveCancelled,\n    onBeforeAppear,\n    onAppear,\n    onAfterAppear,\n    onAppearCancelled\n  } = props;\n  const key = String(vnode.key);\n  const leavingVNodesCache = getLeavingNodesForType(state, vnode);\n  const callHook = (hook, args) => {\n    hook && callWithAsyncErrorHandling(hook, instance, 9, args);\n  };\n  const callAsyncHook = (hook, args) => {\n    const done = args[1];\n    callHook(hook, args);\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(hook)) {\n      if (hook.every(hook2 => hook2.length <= 1)) done();\n    } else if (hook.length <= 1) {\n      done();\n    }\n  };\n  const hooks = {\n    mode,\n    persisted,\n    beforeEnter(el) {\n      let hook = onBeforeEnter;\n      if (!state.isMounted) {\n        if (appear) {\n          hook = onBeforeAppear || onBeforeEnter;\n        } else {\n          return;\n        }\n      }\n      if (el[leaveCbKey]) {\n        el[leaveCbKey](true\n        /* cancelled */);\n      }\n      const leavingVNode = leavingVNodesCache[key];\n      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el[leaveCbKey]) {\n        leavingVNode.el[leaveCbKey]();\n      }\n      callHook(hook, [el]);\n    },\n    enter(el) {\n      let hook = onEnter;\n      let afterHook = onAfterEnter;\n      let cancelHook = onEnterCancelled;\n      if (!state.isMounted) {\n        if (appear) {\n          hook = onAppear || onEnter;\n          afterHook = onAfterAppear || onAfterEnter;\n          cancelHook = onAppearCancelled || onEnterCancelled;\n        } else {\n          return;\n        }\n      }\n      let called = false;\n      const done = el[enterCbKey] = cancelled => {\n        if (called) return;\n        called = true;\n        if (cancelled) {\n          callHook(cancelHook, [el]);\n        } else {\n          callHook(afterHook, [el]);\n        }\n        if (hooks.delayedLeave) {\n          hooks.delayedLeave();\n        }\n        el[enterCbKey] = void 0;\n      };\n      if (hook) {\n        callAsyncHook(hook, [el, done]);\n      } else {\n        done();\n      }\n    },\n    leave(el, remove) {\n      const key2 = String(vnode.key);\n      if (el[enterCbKey]) {\n        el[enterCbKey](true\n        /* cancelled */);\n      }\n      if (state.isUnmounting) {\n        return remove();\n      }\n      callHook(onBeforeLeave, [el]);\n      let called = false;\n      const done = el[leaveCbKey] = cancelled => {\n        if (called) return;\n        called = true;\n        remove();\n        if (cancelled) {\n          callHook(onLeaveCancelled, [el]);\n        } else {\n          callHook(onAfterLeave, [el]);\n        }\n        el[leaveCbKey] = void 0;\n        if (leavingVNodesCache[key2] === vnode) {\n          delete leavingVNodesCache[key2];\n        }\n      };\n      leavingVNodesCache[key2] = vnode;\n      if (onLeave) {\n        callAsyncHook(onLeave, [el, done]);\n      } else {\n        done();\n      }\n    },\n    clone(vnode2) {\n      const hooks2 = resolveTransitionHooks(vnode2, props, state, instance, postClone);\n      if (postClone) postClone(hooks2);\n      return hooks2;\n    }\n  };\n  return hooks;\n}\nfunction emptyPlaceholder(vnode) {\n  if (isKeepAlive(vnode)) {\n    vnode = cloneVNode(vnode);\n    vnode.children = null;\n    return vnode;\n  }\n}\nfunction getInnerChild$1(vnode) {\n  if (!isKeepAlive(vnode)) {\n    if (isTeleport(vnode.type) && vnode.children) {\n      return findNonCommentChild(vnode.children);\n    }\n    return vnode;\n  }\n  if ( true && vnode.component) {\n    return vnode.component.subTree;\n  }\n  const {\n    shapeFlag,\n    children\n  } = vnode;\n  if (children) {\n    if (shapeFlag & 16) {\n      return children[0];\n    }\n    if (shapeFlag & 32 && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(children.default)) {\n      return children.default();\n    }\n  }\n}\nfunction setTransitionHooks(vnode, hooks) {\n  if (vnode.shapeFlag & 6 && vnode.component) {\n    vnode.transition = hooks;\n    setTransitionHooks(vnode.component.subTree, hooks);\n  } else if (vnode.shapeFlag & 128) {\n    vnode.ssContent.transition = hooks.clone(vnode.ssContent);\n    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);\n  } else {\n    vnode.transition = hooks;\n  }\n}\nfunction getTransitionRawChildren(children, keepComment = false, parentKey) {\n  let ret = [];\n  let keyedFragmentCount = 0;\n  for (let i = 0; i < children.length; i++) {\n    let child = children[i];\n    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i);\n    if (child.type === Fragment) {\n      if (child.patchFlag & 128) keyedFragmentCount++;\n      ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));\n    } else if (keepComment || child.type !== Comment) {\n      ret.push(key != null ? cloneVNode(child, {\n        key\n      }) : child);\n    }\n  }\n  if (keyedFragmentCount > 1) {\n    for (let i = 0; i < ret.length; i++) {\n      ret[i].patchFlag = -2;\n    }\n  }\n  return ret;\n}\n\n/*! #__NO_SIDE_EFFECTS__ */\n// @__NO_SIDE_EFFECTS__\nfunction defineComponent(options, extraOptions) {\n  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(options) ?\n  // #8236: extend call and options.name access are considered side-effects\n  // by Rollup, so we have to wrap it in a pure-annotated IIFE.\n  /* @__PURE__ */\n  (() => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({\n    name: options.name\n  }, extraOptions, {\n    setup: options\n  }))() : options;\n}\nfunction useId() {\n  const i = getCurrentInstance();\n  if (i) {\n    return (i.appContext.config.idPrefix || \"v\") + \"-\" + i.ids[0] + i.ids[1]++;\n  } else if (true) {\n    warn$1(`useId() is called when there is no active component instance to be associated with.`);\n  }\n}\nfunction markAsyncBoundary(instance) {\n  instance.ids = [instance.ids[0] + instance.ids[2]++ + \"-\", 0, 0];\n}\nconst knownTemplateRefs = /* @__PURE__ */new WeakSet();\nfunction useTemplateRef(key) {\n  const i = getCurrentInstance();\n  const r = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowRef)(null);\n  if (i) {\n    const refs = i.refs === _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ ? i.refs = {} : i.refs;\n    let desc;\n    if ( true && (desc = Object.getOwnPropertyDescriptor(refs, key)) && !desc.configurable) {\n      warn$1(`useTemplateRef('${key}') already exists.`);\n    } else {\n      Object.defineProperty(refs, key, {\n        enumerable: true,\n        get: () => r.value,\n        set: val => r.value = val\n      });\n    }\n  } else if (true) {\n    warn$1(`useTemplateRef() is called when there is no active component instance to be associated with.`);\n  }\n  const ret =  true ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.readonly)(r) : 0;\n  if (true) {\n    knownTemplateRefs.add(ret);\n  }\n  return ret;\n}\nfunction setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(rawRef)) {\n    rawRef.forEach((r, i) => setRef(r, oldRawRef && ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));\n    return;\n  }\n  if (isAsyncWrapper(vnode) && !isUnmount) {\n    return;\n  }\n  const refValue = vnode.shapeFlag & 4 ? getComponentPublicInstance(vnode.component) : vnode.el;\n  const value = isUnmount ? null : refValue;\n  const {\n    i: owner,\n    r: ref\n  } = rawRef;\n  if ( true && !owner) {\n    warn$1(`Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`);\n    return;\n  }\n  const oldRef = oldRawRef && oldRawRef.r;\n  const refs = owner.refs === _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ ? owner.refs = {} : owner.refs;\n  const setupState = owner.setupState;\n  const rawSetupState = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(setupState);\n  const canSetSetupRef = setupState === _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ ? () => false : key => {\n    if ( true && knownTemplateRefs.has(rawSetupState[key])) {\n      return false;\n    }\n    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(rawSetupState, key);\n  };\n  if (oldRef != null && oldRef !== ref) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(oldRef)) {\n      refs[oldRef] = null;\n      if (canSetSetupRef(oldRef)) {\n        setupState[oldRef] = null;\n      }\n    } else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(oldRef)) {\n      oldRef.value = null;\n    }\n  }\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(ref)) {\n    callWithErrorHandling(ref, owner, 12, [value, refs]);\n  } else {\n    const _isString = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(ref);\n    const _isRef = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(ref);\n    if (_isString || _isRef) {\n      const doSet = () => {\n        if (rawRef.f) {\n          const existing = _isString ? canSetSetupRef(ref) ? setupState[ref] : refs[ref] : ref.value;\n          if (isUnmount) {\n            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(existing) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.remove)(existing, refValue);\n          } else {\n            if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(existing)) {\n              if (_isString) {\n                refs[ref] = [refValue];\n                if (canSetSetupRef(ref)) {\n                  setupState[ref] = refs[ref];\n                }\n              } else {\n                ref.value = [refValue];\n                if (rawRef.k) refs[rawRef.k] = ref.value;\n              }\n            } else if (!existing.includes(refValue)) {\n              existing.push(refValue);\n            }\n          }\n        } else if (_isString) {\n          refs[ref] = value;\n          if (canSetSetupRef(ref)) {\n            setupState[ref] = value;\n          }\n        } else if (_isRef) {\n          ref.value = value;\n          if (rawRef.k) refs[rawRef.k] = value;\n        } else if (true) {\n          warn$1(\"Invalid template ref type:\", ref, `(${typeof ref})`);\n        }\n      };\n      if (value) {\n        doSet.id = -1;\n        queuePostRenderEffect(doSet, parentSuspense);\n      } else {\n        doSet();\n      }\n    } else if (true) {\n      warn$1(\"Invalid template ref type:\", ref, `(${typeof ref})`);\n    }\n  }\n}\nlet hasLoggedMismatchError = false;\nconst logMismatchError = () => {\n  if (hasLoggedMismatchError) {\n    return;\n  }\n  console.error(\"Hydration completed but contains mismatches.\");\n  hasLoggedMismatchError = true;\n};\nconst isSVGContainer = container => container.namespaceURI.includes(\"svg\") && container.tagName !== \"foreignObject\";\nconst isMathMLContainer = container => container.namespaceURI.includes(\"MathML\");\nconst getContainerType = container => {\n  if (container.nodeType !== 1) return void 0;\n  if (isSVGContainer(container)) return \"svg\";\n  if (isMathMLContainer(container)) return \"mathml\";\n  return void 0;\n};\nconst isComment = node => node.nodeType === 8;\nfunction createHydrationFunctions(rendererInternals) {\n  const {\n    mt: mountComponent,\n    p: patch,\n    o: {\n      patchProp,\n      createText,\n      nextSibling,\n      parentNode,\n      remove,\n      insert,\n      createComment\n    }\n  } = rendererInternals;\n  const hydrate = (vnode, container) => {\n    if (!container.hasChildNodes()) {\n      ( true) && warn$1(`Attempting to hydrate existing markup but container is empty. Performing full mount instead.`);\n      patch(null, vnode, container);\n      flushPostFlushCbs();\n      container._vnode = vnode;\n      return;\n    }\n    hydrateNode(container.firstChild, vnode, null, null, null);\n    flushPostFlushCbs();\n    container._vnode = vnode;\n  };\n  const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {\n    optimized = optimized || !!vnode.dynamicChildren;\n    const isFragmentStart = isComment(node) && node.data === \"[\";\n    const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);\n    const {\n      type,\n      ref,\n      shapeFlag,\n      patchFlag\n    } = vnode;\n    let domType = node.nodeType;\n    vnode.el = node;\n    if (true) {\n      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.def)(node, \"__vnode\", vnode, true);\n      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.def)(node, \"__vueParentComponent\", parentComponent, true);\n    }\n    if (patchFlag === -2) {\n      optimized = false;\n      vnode.dynamicChildren = null;\n    }\n    let nextNode = null;\n    switch (type) {\n      case Text:\n        if (domType !== 3) {\n          if (vnode.children === \"\") {\n            insert(vnode.el = createText(\"\"), parentNode(node), node);\n            nextNode = node;\n          } else {\n            nextNode = onMismatch();\n          }\n        } else {\n          if (node.data !== vnode.children) {\n            ( true) && warn$1(`Hydration text mismatch in`, node.parentNode, `\n  - rendered on server: ${JSON.stringify(node.data)}\n  - expected on client: ${JSON.stringify(vnode.children)}`);\n            logMismatchError();\n            node.data = vnode.children;\n          }\n          nextNode = nextSibling(node);\n        }\n        break;\n      case Comment:\n        if (isTemplateNode(node)) {\n          nextNode = nextSibling(node);\n          replaceNode(vnode.el = node.content.firstChild, node, parentComponent);\n        } else if (domType !== 8 || isFragmentStart) {\n          nextNode = onMismatch();\n        } else {\n          nextNode = nextSibling(node);\n        }\n        break;\n      case Static:\n        if (isFragmentStart) {\n          node = nextSibling(node);\n          domType = node.nodeType;\n        }\n        if (domType === 1 || domType === 3) {\n          nextNode = node;\n          const needToAdoptContent = !vnode.children.length;\n          for (let i = 0; i < vnode.staticCount; i++) {\n            if (needToAdoptContent) vnode.children += nextNode.nodeType === 1 ? nextNode.outerHTML : nextNode.data;\n            if (i === vnode.staticCount - 1) {\n              vnode.anchor = nextNode;\n            }\n            nextNode = nextSibling(nextNode);\n          }\n          return isFragmentStart ? nextSibling(nextNode) : nextNode;\n        } else {\n          onMismatch();\n        }\n        break;\n      case Fragment:\n        if (!isFragmentStart) {\n          nextNode = onMismatch();\n        } else {\n          nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\n        }\n        break;\n      default:\n        if (shapeFlag & 1) {\n          if ((domType !== 1 || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) && !isTemplateNode(node)) {\n            nextNode = onMismatch();\n          } else {\n            nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\n          }\n        } else if (shapeFlag & 6) {\n          vnode.slotScopeIds = slotScopeIds;\n          const container = parentNode(node);\n          if (isFragmentStart) {\n            nextNode = locateClosingAnchor(node);\n          } else if (isComment(node) && node.data === \"teleport start\") {\n            nextNode = locateClosingAnchor(node, node.data, \"teleport end\");\n          } else {\n            nextNode = nextSibling(node);\n          }\n          mountComponent(vnode, container, null, parentComponent, parentSuspense, getContainerType(container), optimized);\n          if (isAsyncWrapper(vnode)) {\n            let subTree;\n            if (isFragmentStart) {\n              subTree = createVNode(Fragment);\n              subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;\n            } else {\n              subTree = node.nodeType === 3 ? createTextVNode(\"\") : createVNode(\"div\");\n            }\n            subTree.el = node;\n            vnode.component.subTree = subTree;\n          }\n        } else if (shapeFlag & 64) {\n          if (domType !== 8) {\n            nextNode = onMismatch();\n          } else {\n            nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);\n          }\n        } else if (shapeFlag & 128) {\n          nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, getContainerType(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);\n        } else if (true) {\n          warn$1(\"Invalid HostVNode type:\", type, `(${typeof type})`);\n        }\n    }\n    if (ref != null) {\n      setRef(ref, null, parentSuspense, vnode);\n    }\n    return nextNode;\n  };\n  const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\n    optimized = optimized || !!vnode.dynamicChildren;\n    const {\n      type,\n      props,\n      patchFlag,\n      shapeFlag,\n      dirs,\n      transition\n    } = vnode;\n    const forcePatch = type === \"input\" || type === \"option\";\n    if (true) {\n      if (dirs) {\n        invokeDirectiveHook(vnode, null, parentComponent, \"created\");\n      }\n      let needCallTransitionHooks = false;\n      if (isTemplateNode(el)) {\n        needCallTransitionHooks = needTransition(parentSuspense, transition) && parentComponent && parentComponent.vnode.props && parentComponent.vnode.props.appear;\n        const content = el.content.firstChild;\n        if (needCallTransitionHooks) {\n          transition.beforeEnter(content);\n        }\n        replaceNode(content, el, parentComponent);\n        vnode.el = el = content;\n      }\n      if (shapeFlag & 16 &&\n      // skip if element has innerHTML / textContent\n      !(props && (props.innerHTML || props.textContent))) {\n        let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);\n        let hasWarned = false;\n        while (next) {\n          if (!isMismatchAllowed(el, 1 /* CHILDREN */)) {\n            if (( true) && !hasWarned) {\n              warn$1(`Hydration children mismatch on`, el, `\nServer rendered element contains more child nodes than client vdom.`);\n              hasWarned = true;\n            }\n            logMismatchError();\n          }\n          const cur = next;\n          next = next.nextSibling;\n          remove(cur);\n        }\n      } else if (shapeFlag & 8) {\n        let clientText = vnode.children;\n        if (clientText[0] === \"\\n\" && (el.tagName === \"PRE\" || el.tagName === \"TEXTAREA\")) {\n          clientText = clientText.slice(1);\n        }\n        if (el.textContent !== clientText) {\n          if (!isMismatchAllowed(el, 0 /* TEXT */)) {\n            ( true) && warn$1(`Hydration text content mismatch on`, el, `\n  - rendered on server: ${el.textContent}\n  - expected on client: ${vnode.children}`);\n            logMismatchError();\n          }\n          el.textContent = vnode.children;\n        }\n      }\n      if (props) {\n        if (true) {\n          const isCustomElement = el.tagName.includes(\"-\");\n          for (const key in props) {\n            if (( true) &&\n            // #11189 skip if this node has directives that have created hooks\n            // as it could have mutated the DOM in any possible way\n            !(dirs && dirs.some(d => d.dir.created)) && propHasMismatch(el, key, props[key], vnode, parentComponent)) {\n              logMismatchError();\n            }\n            if (forcePatch && (key.endsWith(\"value\") || key === \"indeterminate\") || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isReservedProp)(key) ||\n            // force hydrate v-bind with .prop modifiers\n            key[0] === \".\" || isCustomElement) {\n              patchProp(el, key, null, props[key], void 0, parentComponent);\n            }\n          }\n        } else {}\n      }\n      let vnodeHooks;\n      if (vnodeHooks = props && props.onVnodeBeforeMount) {\n        invokeVNodeHook(vnodeHooks, parentComponent, vnode);\n      }\n      if (dirs) {\n        invokeDirectiveHook(vnode, null, parentComponent, \"beforeMount\");\n      }\n      if ((vnodeHooks = props && props.onVnodeMounted) || dirs || needCallTransitionHooks) {\n        queueEffectWithSuspense(() => {\n          vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);\n          needCallTransitionHooks && transition.enter(el);\n          dirs && invokeDirectiveHook(vnode, null, parentComponent, \"mounted\");\n        }, parentSuspense);\n      }\n    }\n    return el.nextSibling;\n  };\n  const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {\n    optimized = optimized || !!parentVNode.dynamicChildren;\n    const children = parentVNode.children;\n    const l = children.length;\n    let hasWarned = false;\n    for (let i = 0; i < l; i++) {\n      const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);\n      const isText = vnode.type === Text;\n      if (node) {\n        if (isText && !optimized) {\n          if (i + 1 < l && normalizeVNode(children[i + 1]).type === Text) {\n            insert(createText(node.data.slice(vnode.children.length)), container, nextSibling(node));\n            node.data = vnode.children;\n          }\n        }\n        node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\n      } else if (isText && !vnode.children) {\n        insert(vnode.el = createText(\"\"), container);\n      } else {\n        if (!isMismatchAllowed(container, 1 /* CHILDREN */)) {\n          if (( true) && !hasWarned) {\n            warn$1(`Hydration children mismatch on`, container, `\nServer rendered element contains fewer child nodes than client vdom.`);\n            hasWarned = true;\n          }\n          logMismatchError();\n        }\n        patch(null, vnode, container, null, parentComponent, parentSuspense, getContainerType(container), slotScopeIds);\n      }\n    }\n    return node;\n  };\n  const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\n    const {\n      slotScopeIds: fragmentSlotScopeIds\n    } = vnode;\n    if (fragmentSlotScopeIds) {\n      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;\n    }\n    const container = parentNode(node);\n    const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);\n    if (next && isComment(next) && next.data === \"]\") {\n      return nextSibling(vnode.anchor = next);\n    } else {\n      logMismatchError();\n      insert(vnode.anchor = createComment(`]`), container, next);\n      return next;\n    }\n  };\n  const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {\n    if (!isMismatchAllowed(node.parentElement, 1 /* CHILDREN */)) {\n      ( true) && warn$1(`Hydration node mismatch:\n- rendered on server:`, node, node.nodeType === 3 ? `(text)` : isComment(node) && node.data === \"[\" ? `(start of fragment)` : ``, `\n- expected on client:`, vnode.type);\n      logMismatchError();\n    }\n    vnode.el = null;\n    if (isFragment) {\n      const end = locateClosingAnchor(node);\n      while (true) {\n        const next2 = nextSibling(node);\n        if (next2 && next2 !== end) {\n          remove(next2);\n        } else {\n          break;\n        }\n      }\n    }\n    const next = nextSibling(node);\n    const container = parentNode(node);\n    remove(node);\n    patch(null, vnode, container, next, parentComponent, parentSuspense, getContainerType(container), slotScopeIds);\n    return next;\n  };\n  const locateClosingAnchor = (node, open = \"[\", close = \"]\") => {\n    let match = 0;\n    while (node) {\n      node = nextSibling(node);\n      if (node && isComment(node)) {\n        if (node.data === open) match++;\n        if (node.data === close) {\n          if (match === 0) {\n            return nextSibling(node);\n          } else {\n            match--;\n          }\n        }\n      }\n    }\n    return node;\n  };\n  const replaceNode = (newNode, oldNode, parentComponent) => {\n    const parentNode2 = oldNode.parentNode;\n    if (parentNode2) {\n      parentNode2.replaceChild(newNode, oldNode);\n    }\n    let parent = parentComponent;\n    while (parent) {\n      if (parent.vnode.el === oldNode) {\n        parent.vnode.el = parent.subTree.el = newNode;\n      }\n      parent = parent.parent;\n    }\n  };\n  const isTemplateNode = node => {\n    return node.nodeType === 1 && node.tagName === \"TEMPLATE\";\n  };\n  return [hydrate, hydrateNode];\n}\nfunction propHasMismatch(el, key, clientValue, vnode, instance) {\n  let mismatchType;\n  let mismatchKey;\n  let actual;\n  let expected;\n  if (key === \"class\") {\n    actual = el.getAttribute(\"class\");\n    expected = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeClass)(clientValue);\n    if (!isSetEqual(toClassSet(actual || \"\"), toClassSet(expected))) {\n      mismatchType = 2 /* CLASS */;\n      mismatchKey = `class`;\n    }\n  } else if (key === \"style\") {\n    actual = el.getAttribute(\"style\") || \"\";\n    expected = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(clientValue) ? clientValue : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.stringifyStyle)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeStyle)(clientValue));\n    const actualMap = toStyleMap(actual);\n    const expectedMap = toStyleMap(expected);\n    if (vnode.dirs) {\n      for (const {\n        dir,\n        value\n      } of vnode.dirs) {\n        if (dir.name === \"show\" && !value) {\n          expectedMap.set(\"display\", \"none\");\n        }\n      }\n    }\n    if (instance) {\n      resolveCssVars(instance, vnode, expectedMap);\n    }\n    if (!isMapEqual(actualMap, expectedMap)) {\n      mismatchType = 3 /* STYLE */;\n      mismatchKey = \"style\";\n    }\n  } else if (el instanceof SVGElement && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isKnownSvgAttr)(key) || el instanceof HTMLElement && ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isBooleanAttr)(key) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isKnownHtmlAttr)(key))) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isBooleanAttr)(key)) {\n      actual = el.hasAttribute(key);\n      expected = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.includeBooleanAttr)(clientValue);\n    } else if (clientValue == null) {\n      actual = el.hasAttribute(key);\n      expected = false;\n    } else {\n      if (el.hasAttribute(key)) {\n        actual = el.getAttribute(key);\n      } else if (key === \"value\" && el.tagName === \"TEXTAREA\") {\n        actual = el.value;\n      } else {\n        actual = false;\n      }\n      expected = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isRenderableAttrValue)(clientValue) ? String(clientValue) : false;\n    }\n    if (actual !== expected) {\n      mismatchType = 4 /* ATTRIBUTE */;\n      mismatchKey = key;\n    }\n  }\n  if (mismatchType != null && !isMismatchAllowed(el, mismatchType)) {\n    const format = v => v === false ? `(not rendered)` : `${mismatchKey}=\"${v}\"`;\n    const preSegment = `Hydration ${MismatchTypeString[mismatchType]} mismatch on`;\n    const postSegment = `\n  - rendered on server: ${format(actual)}\n  - expected on client: ${format(expected)}\n  Note: this mismatch is check-only. The DOM will not be rectified in production due to performance overhead.\n  You should fix the source of the mismatch.`;\n    {\n      warn$1(preSegment, el, postSegment);\n    }\n    return true;\n  }\n  return false;\n}\nfunction toClassSet(str) {\n  return new Set(str.trim().split(/\\s+/));\n}\nfunction isSetEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const s of a) {\n    if (!b.has(s)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction toStyleMap(str) {\n  const styleMap = /* @__PURE__ */new Map();\n  for (const item of str.split(\";\")) {\n    let [key, value] = item.split(\":\");\n    key = key.trim();\n    value = value && value.trim();\n    if (key && value) {\n      styleMap.set(key, value);\n    }\n  }\n  return styleMap;\n}\nfunction isMapEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const [key, value] of a) {\n    if (value !== b.get(key)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction resolveCssVars(instance, vnode, expectedMap) {\n  const root = instance.subTree;\n  if (instance.getCssVars && (vnode === root || root && root.type === Fragment && root.children.includes(vnode))) {\n    const cssVars = instance.getCssVars();\n    for (const key in cssVars) {\n      expectedMap.set(`--${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.getEscapedCssVarName)(key, false)}`, String(cssVars[key]));\n    }\n  }\n  if (vnode === root && instance.parent) {\n    resolveCssVars(instance.parent, instance.vnode, expectedMap);\n  }\n}\nconst allowMismatchAttr = \"data-allow-mismatch\";\nconst MismatchTypeString = {\n  [0 /* TEXT */]: \"text\",\n  [1 /* CHILDREN */]: \"children\",\n  [2 /* CLASS */]: \"class\",\n  [3 /* STYLE */]: \"style\",\n  [4 /* ATTRIBUTE */]: \"attribute\"\n};\nfunction isMismatchAllowed(el, allowedType) {\n  if (allowedType === 0 /* TEXT */ || allowedType === 1 /* CHILDREN */) {\n    while (el && !el.hasAttribute(allowMismatchAttr)) {\n      el = el.parentElement;\n    }\n  }\n  const allowedAttr = el && el.getAttribute(allowMismatchAttr);\n  if (allowedAttr == null) {\n    return false;\n  } else if (allowedAttr === \"\") {\n    return true;\n  } else {\n    const list = allowedAttr.split(\",\");\n    if (allowedType === 0 /* TEXT */ && list.includes(\"children\")) {\n      return true;\n    }\n    return allowedAttr.split(\",\").includes(MismatchTypeString[allowedType]);\n  }\n}\nconst hydrateOnIdle = (timeout = 1e4) => hydrate => {\n  const id = requestIdleCallback(hydrate, {\n    timeout\n  });\n  return () => cancelIdleCallback(id);\n};\nfunction elementIsVisibleInViewport(el) {\n  const {\n    top,\n    left,\n    bottom,\n    right\n  } = el.getBoundingClientRect();\n  const {\n    innerHeight,\n    innerWidth\n  } = window;\n  return (top > 0 && top < innerHeight || bottom > 0 && bottom < innerHeight) && (left > 0 && left < innerWidth || right > 0 && right < innerWidth);\n}\nconst hydrateOnVisible = opts => (hydrate, forEach) => {\n  const ob = new IntersectionObserver(entries => {\n    for (const e of entries) {\n      if (!e.isIntersecting) continue;\n      ob.disconnect();\n      hydrate();\n      break;\n    }\n  }, opts);\n  forEach(el => {\n    if (!(el instanceof Element)) return;\n    if (elementIsVisibleInViewport(el)) {\n      hydrate();\n      ob.disconnect();\n      return false;\n    }\n    ob.observe(el);\n  });\n  return () => ob.disconnect();\n};\nconst hydrateOnMediaQuery = query => hydrate => {\n  if (query) {\n    const mql = matchMedia(query);\n    if (mql.matches) {\n      hydrate();\n    } else {\n      mql.addEventListener(\"change\", hydrate, {\n        once: true\n      });\n      return () => mql.removeEventListener(\"change\", hydrate);\n    }\n  }\n};\nconst hydrateOnInteraction = (interactions = []) => (hydrate, forEach) => {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(interactions)) interactions = [interactions];\n  let hasHydrated = false;\n  const doHydrate = e => {\n    if (!hasHydrated) {\n      hasHydrated = true;\n      teardown();\n      hydrate();\n      e.target.dispatchEvent(new e.constructor(e.type, e));\n    }\n  };\n  const teardown = () => {\n    forEach(el => {\n      for (const i of interactions) {\n        el.removeEventListener(i, doHydrate);\n      }\n    });\n  };\n  forEach(el => {\n    for (const i of interactions) {\n      el.addEventListener(i, doHydrate, {\n        once: true\n      });\n    }\n  });\n  return teardown;\n};\nfunction forEachElement(node, cb) {\n  if (isComment(node) && node.data === \"[\") {\n    let depth = 1;\n    let next = node.nextSibling;\n    while (next) {\n      if (next.nodeType === 1) {\n        const result = cb(next);\n        if (result === false) {\n          break;\n        }\n      } else if (isComment(next)) {\n        if (next.data === \"]\") {\n          if (--depth === 0) break;\n        } else if (next.data === \"[\") {\n          depth++;\n        }\n      }\n      next = next.nextSibling;\n    }\n  } else {\n    cb(node);\n  }\n}\nconst isAsyncWrapper = i => !!i.type.__asyncLoader;\n/*! #__NO_SIDE_EFFECTS__ */\n// @__NO_SIDE_EFFECTS__\nfunction defineAsyncComponent(source) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(source)) {\n    source = {\n      loader: source\n    };\n  }\n  const {\n    loader,\n    loadingComponent,\n    errorComponent,\n    delay = 200,\n    hydrate: hydrateStrategy,\n    timeout,\n    // undefined = never times out\n    suspensible = true,\n    onError: userOnError\n  } = source;\n  let pendingRequest = null;\n  let resolvedComp;\n  let retries = 0;\n  const retry = () => {\n    retries++;\n    pendingRequest = null;\n    return load();\n  };\n  const load = () => {\n    let thisRequest;\n    return pendingRequest || (thisRequest = pendingRequest = loader().catch(err => {\n      err = err instanceof Error ? err : new Error(String(err));\n      if (userOnError) {\n        return new Promise((resolve, reject) => {\n          const userRetry = () => resolve(retry());\n          const userFail = () => reject(err);\n          userOnError(err, userRetry, userFail, retries + 1);\n        });\n      } else {\n        throw err;\n      }\n    }).then(comp => {\n      if (thisRequest !== pendingRequest && pendingRequest) {\n        return pendingRequest;\n      }\n      if ( true && !comp) {\n        warn$1(`Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`);\n      }\n      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === \"Module\")) {\n        comp = comp.default;\n      }\n      if ( true && comp && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(comp) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(comp)) {\n        throw new Error(`Invalid async component load result: ${comp}`);\n      }\n      resolvedComp = comp;\n      return comp;\n    }));\n  };\n  return defineComponent({\n    name: \"AsyncComponentWrapper\",\n    __asyncLoader: load,\n    __asyncHydrate(el, instance, hydrate) {\n      const doHydrate = hydrateStrategy ? () => {\n        const teardown = hydrateStrategy(hydrate, cb => forEachElement(el, cb));\n        if (teardown) {\n          (instance.bum || (instance.bum = [])).push(teardown);\n        }\n      } : hydrate;\n      if (resolvedComp) {\n        doHydrate();\n      } else {\n        load().then(() => !instance.isUnmounted && doHydrate());\n      }\n    },\n    get __asyncResolved() {\n      return resolvedComp;\n    },\n    setup() {\n      const instance = currentInstance;\n      markAsyncBoundary(instance);\n      if (resolvedComp) {\n        return () => createInnerComp(resolvedComp, instance);\n      }\n      const onError = err => {\n        pendingRequest = null;\n        handleError(err, instance, 13, !errorComponent);\n      };\n      if (suspensible && instance.suspense || isInSSRComponentSetup) {\n        return load().then(comp => {\n          return () => createInnerComp(comp, instance);\n        }).catch(err => {\n          onError(err);\n          return () => errorComponent ? createVNode(errorComponent, {\n            error: err\n          }) : null;\n        });\n      }\n      const loaded = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ref)(false);\n      const error = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ref)();\n      const delayed = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ref)(!!delay);\n      if (delay) {\n        setTimeout(() => {\n          delayed.value = false;\n        }, delay);\n      }\n      if (timeout != null) {\n        setTimeout(() => {\n          if (!loaded.value && !error.value) {\n            const err = new Error(`Async component timed out after ${timeout}ms.`);\n            onError(err);\n            error.value = err;\n          }\n        }, timeout);\n      }\n      load().then(() => {\n        loaded.value = true;\n        if (instance.parent && isKeepAlive(instance.parent.vnode)) {\n          instance.parent.update();\n        }\n      }).catch(err => {\n        onError(err);\n        error.value = err;\n      });\n      return () => {\n        if (loaded.value && resolvedComp) {\n          return createInnerComp(resolvedComp, instance);\n        } else if (error.value && errorComponent) {\n          return createVNode(errorComponent, {\n            error: error.value\n          });\n        } else if (loadingComponent && !delayed.value) {\n          return createVNode(loadingComponent);\n        }\n      };\n    }\n  });\n}\nfunction createInnerComp(comp, parent) {\n  const {\n    ref: ref2,\n    props,\n    children,\n    ce\n  } = parent.vnode;\n  const vnode = createVNode(comp, props, children);\n  vnode.ref = ref2;\n  vnode.ce = ce;\n  delete parent.vnode.ce;\n  return vnode;\n}\nconst isKeepAlive = vnode => vnode.type.__isKeepAlive;\nconst KeepAliveImpl = {\n  name: `KeepAlive`,\n  // Marker for special handling inside the renderer. We are not using a ===\n  // check directly on KeepAlive in the renderer, because importing it directly\n  // would prevent it from being tree-shaken.\n  __isKeepAlive: true,\n  props: {\n    include: [String, RegExp, Array],\n    exclude: [String, RegExp, Array],\n    max: [String, Number]\n  },\n  setup(props, {\n    slots\n  }) {\n    const instance = getCurrentInstance();\n    const sharedContext = instance.ctx;\n    if (!sharedContext.renderer) {\n      return () => {\n        const children = slots.default && slots.default();\n        return children && children.length === 1 ? children[0] : children;\n      };\n    }\n    const cache = /* @__PURE__ */new Map();\n    const keys = /* @__PURE__ */new Set();\n    let current = null;\n    if (true) {\n      instance.__v_cache = cache;\n    }\n    const parentSuspense = instance.suspense;\n    const {\n      renderer: {\n        p: patch,\n        m: move,\n        um: _unmount,\n        o: {\n          createElement\n        }\n      }\n    } = sharedContext;\n    const storageContainer = createElement(\"div\");\n    sharedContext.activate = (vnode, container, anchor, namespace, optimized) => {\n      const instance2 = vnode.component;\n      move(vnode, container, anchor, 0, parentSuspense);\n      patch(instance2.vnode, vnode, container, anchor, instance2, parentSuspense, namespace, vnode.slotScopeIds, optimized);\n      queuePostRenderEffect(() => {\n        instance2.isDeactivated = false;\n        if (instance2.a) {\n          (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(instance2.a);\n        }\n        const vnodeHook = vnode.props && vnode.props.onVnodeMounted;\n        if (vnodeHook) {\n          invokeVNodeHook(vnodeHook, instance2.parent, vnode);\n        }\n      }, parentSuspense);\n      if (true) {\n        devtoolsComponentAdded(instance2);\n      }\n    };\n    sharedContext.deactivate = vnode => {\n      const instance2 = vnode.component;\n      invalidateMount(instance2.m);\n      invalidateMount(instance2.a);\n      move(vnode, storageContainer, null, 1, parentSuspense);\n      queuePostRenderEffect(() => {\n        if (instance2.da) {\n          (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(instance2.da);\n        }\n        const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;\n        if (vnodeHook) {\n          invokeVNodeHook(vnodeHook, instance2.parent, vnode);\n        }\n        instance2.isDeactivated = true;\n      }, parentSuspense);\n      if (true) {\n        devtoolsComponentAdded(instance2);\n      }\n    };\n    function unmount(vnode) {\n      resetShapeFlag(vnode);\n      _unmount(vnode, instance, parentSuspense, true);\n    }\n    function pruneCache(filter) {\n      cache.forEach((vnode, key) => {\n        const name = getComponentName(vnode.type);\n        if (name && !filter(name)) {\n          pruneCacheEntry(key);\n        }\n      });\n    }\n    function pruneCacheEntry(key) {\n      const cached = cache.get(key);\n      if (cached && (!current || !isSameVNodeType(cached, current))) {\n        unmount(cached);\n      } else if (current) {\n        resetShapeFlag(current);\n      }\n      cache.delete(key);\n      keys.delete(key);\n    }\n    watch(() => [props.include, props.exclude], ([include, exclude]) => {\n      include && pruneCache(name => matches(include, name));\n      exclude && pruneCache(name => !matches(exclude, name));\n    },\n    // prune post-render after `current` has been updated\n    {\n      flush: \"post\",\n      deep: true\n    });\n    let pendingCacheKey = null;\n    const cacheSubtree = () => {\n      if (pendingCacheKey != null) {\n        if (isSuspense(instance.subTree.type)) {\n          queuePostRenderEffect(() => {\n            cache.set(pendingCacheKey, getInnerChild(instance.subTree));\n          }, instance.subTree.suspense);\n        } else {\n          cache.set(pendingCacheKey, getInnerChild(instance.subTree));\n        }\n      }\n    };\n    onMounted(cacheSubtree);\n    onUpdated(cacheSubtree);\n    onBeforeUnmount(() => {\n      cache.forEach(cached => {\n        const {\n          subTree,\n          suspense\n        } = instance;\n        const vnode = getInnerChild(subTree);\n        if (cached.type === vnode.type && cached.key === vnode.key) {\n          resetShapeFlag(vnode);\n          const da = vnode.component.da;\n          da && queuePostRenderEffect(da, suspense);\n          return;\n        }\n        unmount(cached);\n      });\n    });\n    return () => {\n      pendingCacheKey = null;\n      if (!slots.default) {\n        return current = null;\n      }\n      const children = slots.default();\n      const rawVNode = children[0];\n      if (children.length > 1) {\n        if (true) {\n          warn$1(`KeepAlive should contain exactly one component child.`);\n        }\n        current = null;\n        return children;\n      } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {\n        current = null;\n        return rawVNode;\n      }\n      let vnode = getInnerChild(rawVNode);\n      if (vnode.type === Comment) {\n        current = null;\n        return vnode;\n      }\n      const comp = vnode.type;\n      const name = getComponentName(isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp);\n      const {\n        include,\n        exclude,\n        max\n      } = props;\n      if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {\n        vnode.shapeFlag &= ~256;\n        current = vnode;\n        return rawVNode;\n      }\n      const key = vnode.key == null ? comp : vnode.key;\n      const cachedVNode = cache.get(key);\n      if (vnode.el) {\n        vnode = cloneVNode(vnode);\n        if (rawVNode.shapeFlag & 128) {\n          rawVNode.ssContent = vnode;\n        }\n      }\n      pendingCacheKey = key;\n      if (cachedVNode) {\n        vnode.el = cachedVNode.el;\n        vnode.component = cachedVNode.component;\n        if (vnode.transition) {\n          setTransitionHooks(vnode, vnode.transition);\n        }\n        vnode.shapeFlag |= 512;\n        keys.delete(key);\n        keys.add(key);\n      } else {\n        keys.add(key);\n        if (max && keys.size > parseInt(max, 10)) {\n          pruneCacheEntry(keys.values().next().value);\n        }\n      }\n      vnode.shapeFlag |= 256;\n      current = vnode;\n      return isSuspense(rawVNode.type) ? rawVNode : vnode;\n    };\n  }\n};\nconst KeepAlive = KeepAliveImpl;\nfunction matches(pattern, name) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(pattern)) {\n    return pattern.some(p => matches(p, name));\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(pattern)) {\n    return pattern.split(\",\").includes(name);\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isRegExp)(pattern)) {\n    pattern.lastIndex = 0;\n    return pattern.test(name);\n  }\n  return false;\n}\nfunction onActivated(hook, target) {\n  registerKeepAliveHook(hook, \"a\", target);\n}\nfunction onDeactivated(hook, target) {\n  registerKeepAliveHook(hook, \"da\", target);\n}\nfunction registerKeepAliveHook(hook, type, target = currentInstance) {\n  const wrappedHook = hook.__wdc || (hook.__wdc = () => {\n    let current = target;\n    while (current) {\n      if (current.isDeactivated) {\n        return;\n      }\n      current = current.parent;\n    }\n    return hook();\n  });\n  injectHook(type, wrappedHook, target);\n  if (target) {\n    let current = target.parent;\n    while (current && current.parent) {\n      if (isKeepAlive(current.parent.vnode)) {\n        injectToKeepAliveRoot(wrappedHook, type, target, current);\n      }\n      current = current.parent;\n    }\n  }\n}\nfunction injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {\n  const injected = injectHook(type, hook, keepAliveRoot, true\n  /* prepend */);\n  onUnmounted(() => {\n    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.remove)(keepAliveRoot[type], injected);\n  }, target);\n}\nfunction resetShapeFlag(vnode) {\n  vnode.shapeFlag &= ~256;\n  vnode.shapeFlag &= ~512;\n}\nfunction getInnerChild(vnode) {\n  return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;\n}\nfunction injectHook(type, hook, target = currentInstance, prepend = false) {\n  if (target) {\n    const hooks = target[type] || (target[type] = []);\n    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {\n      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();\n      const reset = setCurrentInstance(target);\n      const res = callWithAsyncErrorHandling(hook, target, type, args);\n      reset();\n      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();\n      return res;\n    });\n    if (prepend) {\n      hooks.unshift(wrappedHook);\n    } else {\n      hooks.push(wrappedHook);\n    }\n    return wrappedHook;\n  } else if (true) {\n    const apiName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)(ErrorTypeStrings$1[type].replace(/ hook$/, \"\"));\n    warn$1(`${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup().` + ` If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`);\n  }\n}\nconst createHook = lifecycle => (hook, target = currentInstance) => {\n  if (!isInSSRComponentSetup || lifecycle === \"sp\") {\n    injectHook(lifecycle, (...args) => hook(...args), target);\n  }\n};\nconst onBeforeMount = createHook(\"bm\");\nconst onMounted = createHook(\"m\");\nconst onBeforeUpdate = createHook(\"bu\");\nconst onUpdated = createHook(\"u\");\nconst onBeforeUnmount = createHook(\"bum\");\nconst onUnmounted = createHook(\"um\");\nconst onServerPrefetch = createHook(\"sp\");\nconst onRenderTriggered = createHook(\"rtg\");\nconst onRenderTracked = createHook(\"rtc\");\nfunction onErrorCaptured(hook, target = currentInstance) {\n  injectHook(\"ec\", hook, target);\n}\nconst COMPONENTS = \"components\";\nconst DIRECTIVES = \"directives\";\nfunction resolveComponent(name, maybeSelfReference) {\n  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;\n}\nconst NULL_DYNAMIC_COMPONENT = Symbol.for(\"v-ndc\");\nfunction resolveDynamicComponent(component) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(component)) {\n    return resolveAsset(COMPONENTS, component, false) || component;\n  } else {\n    return component || NULL_DYNAMIC_COMPONENT;\n  }\n}\nfunction resolveDirective(name) {\n  return resolveAsset(DIRECTIVES, name);\n}\nfunction resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {\n  const instance = currentRenderingInstance || currentInstance;\n  if (instance) {\n    const Component = instance.type;\n    if (type === COMPONENTS) {\n      const selfName = getComponentName(Component, false);\n      if (selfName && (selfName === name || selfName === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(name) || selfName === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(name)))) {\n        return Component;\n      }\n    }\n    const res =\n    // local registration\n    // check instance[type] first which is resolved for options API\n    resolve(instance[type] || Component[type], name) ||\n    // global registration\n    resolve(instance.appContext[type], name);\n    if (!res && maybeSelfReference) {\n      return Component;\n    }\n    if ( true && warnMissing && !res) {\n      const extra = type === COMPONENTS ? `\nIf this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;\n      warn$1(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);\n    }\n    return res;\n  } else if (true) {\n    warn$1(`resolve${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize)(type.slice(0, -1))} can only be used in render() or setup().`);\n  }\n}\nfunction resolve(registry, name) {\n  return registry && (registry[name] || registry[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(name)] || registry[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(name))]);\n}\nfunction renderList(source, renderItem, cache, index) {\n  let ret;\n  const cached = cache && cache[index];\n  const sourceIsArray = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(source);\n  if (sourceIsArray || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(source)) {\n    const sourceIsReactiveArray = sourceIsArray && (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReactive)(source);\n    let needsWrap = false;\n    if (sourceIsReactiveArray) {\n      needsWrap = !(0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isShallow)(source);\n      source = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadArray)(source);\n    }\n    ret = new Array(source.length);\n    for (let i = 0, l = source.length; i < l; i++) {\n      ret[i] = renderItem(needsWrap ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toReactive)(source[i]) : source[i], i, void 0, cached && cached[i]);\n    }\n  } else if (typeof source === \"number\") {\n    if ( true && !Number.isInteger(source)) {\n      warn$1(`The v-for range expect an integer value but got ${source}.`);\n    }\n    ret = new Array(source);\n    for (let i = 0; i < source; i++) {\n      ret[i] = renderItem(i + 1, i, void 0, cached && cached[i]);\n    }\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(source)) {\n    if (source[Symbol.iterator]) {\n      ret = Array.from(source, (item, i) => renderItem(item, i, void 0, cached && cached[i]));\n    } else {\n      const keys = Object.keys(source);\n      ret = new Array(keys.length);\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const key = keys[i];\n        ret[i] = renderItem(source[key], key, i, cached && cached[i]);\n      }\n    }\n  } else {\n    ret = [];\n  }\n  if (cache) {\n    cache[index] = ret;\n  }\n  return ret;\n}\nfunction createSlots(slots, dynamicSlots) {\n  for (let i = 0; i < dynamicSlots.length; i++) {\n    const slot = dynamicSlots[i];\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(slot)) {\n      for (let j = 0; j < slot.length; j++) {\n        slots[slot[j].name] = slot[j].fn;\n      }\n    } else if (slot) {\n      slots[slot.name] = slot.key ? (...args) => {\n        const res = slot.fn(...args);\n        if (res) res.key = slot.key;\n        return res;\n      } : slot.fn;\n    }\n  }\n  return slots;\n}\nfunction renderSlot(slots, name, props = {}, fallback, noSlotted) {\n  if (currentRenderingInstance.ce || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.ce) {\n    if (name !== \"default\") props.name = name;\n    return openBlock(), createBlock(Fragment, null, [createVNode(\"slot\", props, fallback && fallback())], 64);\n  }\n  let slot = slots[name];\n  if ( true && slot && slot.length > 1) {\n    warn$1(`SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`);\n    slot = () => [];\n  }\n  if (slot && slot._c) {\n    slot._d = false;\n  }\n  openBlock();\n  const validSlotContent = slot && ensureValidVNode(slot(props));\n  const rendered = createBlock(Fragment, {\n    key: (props.key ||\n    // slot content array of a dynamic conditional slot may have a branch\n    // key attached in the `createSlots` helper, respect that\n    validSlotContent && validSlotContent.key || `_${name}`) + (\n    // #7256 force differentiate fallback content from actual content\n    !validSlotContent && fallback ? \"_fb\" : \"\")\n  }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 ? 64 : -2);\n  if (!noSlotted && rendered.scopeId) {\n    rendered.slotScopeIds = [rendered.scopeId + \"-s\"];\n  }\n  if (slot && slot._c) {\n    slot._d = true;\n  }\n  return rendered;\n}\nfunction ensureValidVNode(vnodes) {\n  return vnodes.some(child => {\n    if (!isVNode(child)) return true;\n    if (child.type === Comment) return false;\n    if (child.type === Fragment && !ensureValidVNode(child.children)) return false;\n    return true;\n  }) ? vnodes : null;\n}\nfunction toHandlers(obj, preserveCaseIfNecessary) {\n  const ret = {};\n  if ( true && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(obj)) {\n    warn$1(`v-on with no argument expects an object value.`);\n    return ret;\n  }\n  for (const key in obj) {\n    ret[preserveCaseIfNecessary && /[A-Z]/.test(key) ? `on:${key}` : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)(key)] = obj[key];\n  }\n  return ret;\n}\nconst getPublicInstance = i => {\n  if (!i) return null;\n  if (isStatefulComponent(i)) return getComponentPublicInstance(i);\n  return getPublicInstance(i.parent);\n};\nconst publicPropertiesMap =\n// Move PURE marker to new line to workaround compiler discarding it\n// due to type annotation\n/* @__PURE__ */\n(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(/* @__PURE__ */Object.create(null), {\n  $: i => i,\n  $el: i => i.vnode.el,\n  $data: i => i.data,\n  $props: i =>  true ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(i.props) : 0,\n  $attrs: i =>  true ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(i.attrs) : 0,\n  $slots: i =>  true ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(i.slots) : 0,\n  $refs: i =>  true ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(i.refs) : 0,\n  $parent: i => getPublicInstance(i.parent),\n  $root: i => getPublicInstance(i.root),\n  $host: i => i.ce,\n  $emit: i => i.emit,\n  $options: i => __VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type,\n  $forceUpdate: i => i.f || (i.f = () => {\n    queueJob(i.update);\n  }),\n  $nextTick: i => i.n || (i.n = nextTick.bind(i.proxy)),\n  $watch: i => __VUE_OPTIONS_API__ ? instanceWatch.bind(i) : _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP\n});\nconst isReservedPrefix = key => key === \"_\" || key === \"$\";\nconst hasSetupBinding = (state, key) => state !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && !state.__isScriptSetup && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(state, key);\nconst PublicInstanceProxyHandlers = {\n  get({\n    _: instance\n  }, key) {\n    if (key === \"__v_skip\") {\n      return true;\n    }\n    const {\n      ctx,\n      setupState,\n      data,\n      props,\n      accessCache,\n      type,\n      appContext\n    } = instance;\n    if ( true && key === \"__isVue\") {\n      return true;\n    }\n    let normalizedProps;\n    if (key[0] !== \"$\") {\n      const n = accessCache[key];\n      if (n !== void 0) {\n        switch (n) {\n          case 1 /* SETUP */:\n            return setupState[key];\n          case 2 /* DATA */:\n            return data[key];\n          case 4 /* CONTEXT */:\n            return ctx[key];\n          case 3 /* PROPS */:\n            return props[key];\n        }\n      } else if (hasSetupBinding(setupState, key)) {\n        accessCache[key] = 1 /* SETUP */;\n        return setupState[key];\n      } else if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(data, key)) {\n        accessCache[key] = 2 /* DATA */;\n        return data[key];\n      } else if (\n      // only cache other properties when instance has declared (thus stable)\n      // props\n      (normalizedProps = instance.propsOptions[0]) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(normalizedProps, key)) {\n        accessCache[key] = 3 /* PROPS */;\n        return props[key];\n      } else if (ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(ctx, key)) {\n        accessCache[key] = 4 /* CONTEXT */;\n        return ctx[key];\n      } else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) {\n        accessCache[key] = 0 /* OTHER */;\n      }\n    }\n    const publicGetter = publicPropertiesMap[key];\n    let cssModule, globalProperties;\n    if (publicGetter) {\n      if (key === \"$attrs\") {\n        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.track)(instance.attrs, \"get\", \"\");\n         true && markAttrsAccessed();\n      } else if ( true && key === \"$slots\") {\n        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.track)(instance, \"get\", key);\n      }\n      return publicGetter(instance);\n    } else if (\n    // css module (injected by vue-loader)\n    (cssModule = type.__cssModules) && (cssModule = cssModule[key])) {\n      return cssModule;\n    } else if (ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(ctx, key)) {\n      accessCache[key] = 4 /* CONTEXT */;\n      return ctx[key];\n    } else if (\n    // global properties\n    globalProperties = appContext.config.globalProperties, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(globalProperties, key)) {\n      {\n        return globalProperties[key];\n      }\n    } else if ( true && currentRenderingInstance && (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(key) ||\n    // #1091 avoid internal isRef/isVNode checks on component instance leading\n    // to infinite warning loop\n    key.indexOf(\"__v\") !== 0)) {\n      if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && isReservedPrefix(key[0]) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(data, key)) {\n        warn$1(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved character (\"$\" or \"_\") and is not proxied on the render context.`);\n      } else if (instance === currentRenderingInstance) {\n        warn$1(`Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`);\n      }\n    }\n  },\n  set({\n    _: instance\n  }, key, value) {\n    const {\n      data,\n      setupState,\n      ctx\n    } = instance;\n    if (hasSetupBinding(setupState, key)) {\n      setupState[key] = value;\n      return true;\n    } else if ( true && setupState.__isScriptSetup && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(setupState, key)) {\n      warn$1(`Cannot mutate <script setup> binding \"${key}\" from Options API.`);\n      return false;\n    } else if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(data, key)) {\n      data[key] = value;\n      return true;\n    } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(instance.props, key)) {\n       true && warn$1(`Attempting to mutate prop \"${key}\". Props are readonly.`);\n      return false;\n    }\n    if (key[0] === \"$\" && key.slice(1) in instance) {\n       true && warn$1(`Attempting to mutate public property \"${key}\". Properties starting with $ are reserved and readonly.`);\n      return false;\n    } else {\n      if ( true && key in instance.appContext.config.globalProperties) {\n        Object.defineProperty(ctx, key, {\n          enumerable: true,\n          configurable: true,\n          value\n        });\n      } else {\n        ctx[key] = value;\n      }\n    }\n    return true;\n  },\n  has({\n    _: {\n      data,\n      setupState,\n      accessCache,\n      ctx,\n      appContext,\n      propsOptions\n    }\n  }, key) {\n    let normalizedProps;\n    return !!accessCache[key] || data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(normalizedProps, key) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(ctx, key) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(publicPropertiesMap, key) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(appContext.config.globalProperties, key);\n  },\n  defineProperty(target, key, descriptor) {\n    if (descriptor.get != null) {\n      target._.accessCache[key] = 0;\n    } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(descriptor, \"value\")) {\n      this.set(target, key, descriptor.value, null);\n    }\n    return Reflect.defineProperty(target, key, descriptor);\n  }\n};\nif (true) {\n  PublicInstanceProxyHandlers.ownKeys = target => {\n    warn$1(`Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`);\n    return Reflect.ownKeys(target);\n  };\n}\nconst RuntimeCompiledPublicInstanceProxyHandlers = /* @__PURE__ */(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, PublicInstanceProxyHandlers, {\n  get(target, key) {\n    if (key === Symbol.unscopables) {\n      return;\n    }\n    return PublicInstanceProxyHandlers.get(target, key, target);\n  },\n  has(_, key) {\n    const has = key[0] !== \"_\" && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isGloballyAllowed)(key);\n    if ( true && !has && PublicInstanceProxyHandlers.has(_, key)) {\n      warn$1(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);\n    }\n    return has;\n  }\n});\nfunction createDevRenderContext(instance) {\n  const target = {};\n  Object.defineProperty(target, `_`, {\n    configurable: true,\n    enumerable: false,\n    get: () => instance\n  });\n  Object.keys(publicPropertiesMap).forEach(key => {\n    Object.defineProperty(target, key, {\n      configurable: true,\n      enumerable: false,\n      get: () => publicPropertiesMap[key](instance),\n      // intercepted by the proxy so no need for implementation,\n      // but needed to prevent set errors\n      set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP\n    });\n  });\n  return target;\n}\nfunction exposePropsOnRenderContext(instance) {\n  const {\n    ctx,\n    propsOptions: [propsOptions]\n  } = instance;\n  if (propsOptions) {\n    Object.keys(propsOptions).forEach(key => {\n      Object.defineProperty(ctx, key, {\n        enumerable: true,\n        configurable: true,\n        get: () => instance.props[key],\n        set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP\n      });\n    });\n  }\n}\nfunction exposeSetupStateOnRenderContext(instance) {\n  const {\n    ctx,\n    setupState\n  } = instance;\n  Object.keys((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(setupState)).forEach(key => {\n    if (!setupState.__isScriptSetup) {\n      if (isReservedPrefix(key[0])) {\n        warn$1(`setup() return property ${JSON.stringify(key)} should not start with \"$\" or \"_\" which are reserved prefixes for Vue internals.`);\n        return;\n      }\n      Object.defineProperty(ctx, key, {\n        enumerable: true,\n        configurable: true,\n        get: () => setupState[key],\n        set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP\n      });\n    }\n  });\n}\nconst warnRuntimeUsage = method => warn$1(`${method}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);\nfunction defineProps() {\n  if (true) {\n    warnRuntimeUsage(`defineProps`);\n  }\n  return null;\n}\nfunction defineEmits() {\n  if (true) {\n    warnRuntimeUsage(`defineEmits`);\n  }\n  return null;\n}\nfunction defineExpose(exposed) {\n  if (true) {\n    warnRuntimeUsage(`defineExpose`);\n  }\n}\nfunction defineOptions(options) {\n  if (true) {\n    warnRuntimeUsage(`defineOptions`);\n  }\n}\nfunction defineSlots() {\n  if (true) {\n    warnRuntimeUsage(`defineSlots`);\n  }\n  return null;\n}\nfunction defineModel() {\n  if (true) {\n    warnRuntimeUsage(\"defineModel\");\n  }\n}\nfunction withDefaults(props, defaults) {\n  if (true) {\n    warnRuntimeUsage(`withDefaults`);\n  }\n  return null;\n}\nfunction useSlots() {\n  return getContext().slots;\n}\nfunction useAttrs() {\n  return getContext().attrs;\n}\nfunction getContext() {\n  const i = getCurrentInstance();\n  if ( true && !i) {\n    warn$1(`useContext() called without active instance.`);\n  }\n  return i.setupContext || (i.setupContext = createSetupContext(i));\n}\nfunction normalizePropsOrEmits(props) {\n  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(props) ? props.reduce((normalized, p) => (normalized[p] = null, normalized), {}) : props;\n}\nfunction mergeDefaults(raw, defaults) {\n  const props = normalizePropsOrEmits(raw);\n  for (const key in defaults) {\n    if (key.startsWith(\"__skip\")) continue;\n    let opt = props[key];\n    if (opt) {\n      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(opt) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt)) {\n        opt = props[key] = {\n          type: opt,\n          default: defaults[key]\n        };\n      } else {\n        opt.default = defaults[key];\n      }\n    } else if (opt === null) {\n      opt = props[key] = {\n        default: defaults[key]\n      };\n    } else if (true) {\n      warn$1(`props default key \"${key}\" has no corresponding declaration.`);\n    }\n    if (opt && defaults[`__skip_${key}`]) {\n      opt.skipFactory = true;\n    }\n  }\n  return props;\n}\nfunction mergeModels(a, b) {\n  if (!a || !b) return a || b;\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(a) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(b)) return a.concat(b);\n  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, normalizePropsOrEmits(a), normalizePropsOrEmits(b));\n}\nfunction createPropsRestProxy(props, excludedKeys) {\n  const ret = {};\n  for (const key in props) {\n    if (!excludedKeys.includes(key)) {\n      Object.defineProperty(ret, key, {\n        enumerable: true,\n        get: () => props[key]\n      });\n    }\n  }\n  return ret;\n}\nfunction withAsyncContext(getAwaitable) {\n  const ctx = getCurrentInstance();\n  if ( true && !ctx) {\n    warn$1(`withAsyncContext called without active current instance. This is likely a bug.`);\n  }\n  let awaitable = getAwaitable();\n  unsetCurrentInstance();\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isPromise)(awaitable)) {\n    awaitable = awaitable.catch(e => {\n      setCurrentInstance(ctx);\n      throw e;\n    });\n  }\n  return [awaitable, () => setCurrentInstance(ctx)];\n}\nfunction createDuplicateChecker() {\n  const cache = /* @__PURE__ */Object.create(null);\n  return (type, key) => {\n    if (cache[key]) {\n      warn$1(`${type} property \"${key}\" is already defined in ${cache[key]}.`);\n    } else {\n      cache[key] = type;\n    }\n  };\n}\nlet shouldCacheAccess = true;\nfunction applyOptions(instance) {\n  const options = resolveMergedOptions(instance);\n  const publicThis = instance.proxy;\n  const ctx = instance.ctx;\n  shouldCacheAccess = false;\n  if (options.beforeCreate) {\n    callHook(options.beforeCreate, instance, \"bc\");\n  }\n  const {\n    // state\n    data: dataOptions,\n    computed: computedOptions,\n    methods,\n    watch: watchOptions,\n    provide: provideOptions,\n    inject: injectOptions,\n    // lifecycle\n    created,\n    beforeMount,\n    mounted,\n    beforeUpdate,\n    updated,\n    activated,\n    deactivated,\n    beforeDestroy,\n    beforeUnmount,\n    destroyed,\n    unmounted,\n    render,\n    renderTracked,\n    renderTriggered,\n    errorCaptured,\n    serverPrefetch,\n    // public API\n    expose,\n    inheritAttrs,\n    // assets\n    components,\n    directives,\n    filters\n  } = options;\n  const checkDuplicateProperties =  true ? createDuplicateChecker() : 0;\n  if (true) {\n    const [propsOptions] = instance.propsOptions;\n    if (propsOptions) {\n      for (const key in propsOptions) {\n        checkDuplicateProperties(\"Props\" /* PROPS */, key);\n      }\n    }\n  }\n  if (injectOptions) {\n    resolveInjections(injectOptions, ctx, checkDuplicateProperties);\n  }\n  if (methods) {\n    for (const key in methods) {\n      const methodHandler = methods[key];\n      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(methodHandler)) {\n        if (true) {\n          Object.defineProperty(ctx, key, {\n            value: methodHandler.bind(publicThis),\n            configurable: true,\n            enumerable: true,\n            writable: true\n          });\n        } else {}\n        if (true) {\n          checkDuplicateProperties(\"Methods\" /* METHODS */, key);\n        }\n      } else if (true) {\n        warn$1(`Method \"${key}\" has type \"${typeof methodHandler}\" in the component definition. Did you reference the function correctly?`);\n      }\n    }\n  }\n  if (dataOptions) {\n    if ( true && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(dataOptions)) {\n      warn$1(`The data option must be a function. Plain object usage is no longer supported.`);\n    }\n    const data = dataOptions.call(publicThis, publicThis);\n    if ( true && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isPromise)(data)) {\n      warn$1(`data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`);\n    }\n    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(data)) {\n       true && warn$1(`data() should return an object.`);\n    } else {\n      instance.data = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.reactive)(data);\n      if (true) {\n        for (const key in data) {\n          checkDuplicateProperties(\"Data\" /* DATA */, key);\n          if (!isReservedPrefix(key[0])) {\n            Object.defineProperty(ctx, key, {\n              configurable: true,\n              enumerable: true,\n              get: () => data[key],\n              set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP\n            });\n          }\n        }\n      }\n    }\n  }\n  shouldCacheAccess = true;\n  if (computedOptions) {\n    for (const key in computedOptions) {\n      const opt = computedOptions[key];\n      const get = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt) ? opt.bind(publicThis, publicThis) : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt.get) ? opt.get.bind(publicThis, publicThis) : _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP;\n      if ( true && get === _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP) {\n        warn$1(`Computed property \"${key}\" has no getter.`);\n      }\n      const set = !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt.set) ? opt.set.bind(publicThis) :  true ? () => {\n        warn$1(`Write operation failed: computed property \"${key}\" is readonly.`);\n      } : 0;\n      const c = computed({\n        get,\n        set\n      });\n      Object.defineProperty(ctx, key, {\n        enumerable: true,\n        configurable: true,\n        get: () => c.value,\n        set: v => c.value = v\n      });\n      if (true) {\n        checkDuplicateProperties(\"Computed\" /* COMPUTED */, key);\n      }\n    }\n  }\n  if (watchOptions) {\n    for (const key in watchOptions) {\n      createWatcher(watchOptions[key], ctx, publicThis, key);\n    }\n  }\n  if (provideOptions) {\n    const provides = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(provideOptions) ? provideOptions.call(publicThis) : provideOptions;\n    Reflect.ownKeys(provides).forEach(key => {\n      provide(key, provides[key]);\n    });\n  }\n  if (created) {\n    callHook(created, instance, \"c\");\n  }\n  function registerLifecycleHook(register, hook) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(hook)) {\n      hook.forEach(_hook => register(_hook.bind(publicThis)));\n    } else if (hook) {\n      register(hook.bind(publicThis));\n    }\n  }\n  registerLifecycleHook(onBeforeMount, beforeMount);\n  registerLifecycleHook(onMounted, mounted);\n  registerLifecycleHook(onBeforeUpdate, beforeUpdate);\n  registerLifecycleHook(onUpdated, updated);\n  registerLifecycleHook(onActivated, activated);\n  registerLifecycleHook(onDeactivated, deactivated);\n  registerLifecycleHook(onErrorCaptured, errorCaptured);\n  registerLifecycleHook(onRenderTracked, renderTracked);\n  registerLifecycleHook(onRenderTriggered, renderTriggered);\n  registerLifecycleHook(onBeforeUnmount, beforeUnmount);\n  registerLifecycleHook(onUnmounted, unmounted);\n  registerLifecycleHook(onServerPrefetch, serverPrefetch);\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(expose)) {\n    if (expose.length) {\n      const exposed = instance.exposed || (instance.exposed = {});\n      expose.forEach(key => {\n        Object.defineProperty(exposed, key, {\n          get: () => publicThis[key],\n          set: val => publicThis[key] = val\n        });\n      });\n    } else if (!instance.exposed) {\n      instance.exposed = {};\n    }\n  }\n  if (render && instance.render === _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP) {\n    instance.render = render;\n  }\n  if (inheritAttrs != null) {\n    instance.inheritAttrs = inheritAttrs;\n  }\n  if (components) instance.components = components;\n  if (directives) instance.directives = directives;\n  if (serverPrefetch) {\n    markAsyncBoundary(instance);\n  }\n}\nfunction resolveInjections(injectOptions, ctx, checkDuplicateProperties = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(injectOptions)) {\n    injectOptions = normalizeInject(injectOptions);\n  }\n  for (const key in injectOptions) {\n    const opt = injectOptions[key];\n    let injected;\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(opt)) {\n      if (\"default\" in opt) {\n        injected = inject(opt.from || key, opt.default, true);\n      } else {\n        injected = inject(opt.from || key);\n      }\n    } else {\n      injected = inject(opt);\n    }\n    if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(injected)) {\n      Object.defineProperty(ctx, key, {\n        enumerable: true,\n        configurable: true,\n        get: () => injected.value,\n        set: v => injected.value = v\n      });\n    } else {\n      ctx[key] = injected;\n    }\n    if (true) {\n      checkDuplicateProperties(\"Inject\" /* INJECT */, key);\n    }\n  }\n}\nfunction callHook(hook, instance, type) {\n  callWithAsyncErrorHandling((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(hook) ? hook.map(h => h.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);\n}\nfunction createWatcher(raw, ctx, publicThis, key) {\n  let getter = key.includes(\".\") ? createPathGetter(publicThis, key) : () => publicThis[key];\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(raw)) {\n    const handler = ctx[raw];\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(handler)) {\n      {\n        watch(getter, handler);\n      }\n    } else if (true) {\n      warn$1(`Invalid watch handler specified by key \"${raw}\"`, handler);\n    }\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(raw)) {\n    {\n      watch(getter, raw.bind(publicThis));\n    }\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(raw)) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(raw)) {\n      raw.forEach(r => createWatcher(r, ctx, publicThis, key));\n    } else {\n      const handler = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];\n      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(handler)) {\n        watch(getter, handler, raw);\n      } else if (true) {\n        warn$1(`Invalid watch handler specified by key \"${raw.handler}\"`, handler);\n      }\n    }\n  } else if (true) {\n    warn$1(`Invalid watch option: \"${key}\"`, raw);\n  }\n}\nfunction resolveMergedOptions(instance) {\n  const base = instance.type;\n  const {\n    mixins,\n    extends: extendsOptions\n  } = base;\n  const {\n    mixins: globalMixins,\n    optionsCache: cache,\n    config: {\n      optionMergeStrategies\n    }\n  } = instance.appContext;\n  const cached = cache.get(base);\n  let resolved;\n  if (cached) {\n    resolved = cached;\n  } else if (!globalMixins.length && !mixins && !extendsOptions) {\n    {\n      resolved = base;\n    }\n  } else {\n    resolved = {};\n    if (globalMixins.length) {\n      globalMixins.forEach(m => mergeOptions(resolved, m, optionMergeStrategies, true));\n    }\n    mergeOptions(resolved, base, optionMergeStrategies);\n  }\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(base)) {\n    cache.set(base, resolved);\n  }\n  return resolved;\n}\nfunction mergeOptions(to, from, strats, asMixin = false) {\n  const {\n    mixins,\n    extends: extendsOptions\n  } = from;\n  if (extendsOptions) {\n    mergeOptions(to, extendsOptions, strats, true);\n  }\n  if (mixins) {\n    mixins.forEach(m => mergeOptions(to, m, strats, true));\n  }\n  for (const key in from) {\n    if (asMixin && key === \"expose\") {\n       true && warn$1(`\"expose\" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`);\n    } else {\n      const strat = internalOptionMergeStrats[key] || strats && strats[key];\n      to[key] = strat ? strat(to[key], from[key]) : from[key];\n    }\n  }\n  return to;\n}\nconst internalOptionMergeStrats = {\n  data: mergeDataFn,\n  props: mergeEmitsOrPropsOptions,\n  emits: mergeEmitsOrPropsOptions,\n  // objects\n  methods: mergeObjectOptions,\n  computed: mergeObjectOptions,\n  // lifecycle\n  beforeCreate: mergeAsArray,\n  created: mergeAsArray,\n  beforeMount: mergeAsArray,\n  mounted: mergeAsArray,\n  beforeUpdate: mergeAsArray,\n  updated: mergeAsArray,\n  beforeDestroy: mergeAsArray,\n  beforeUnmount: mergeAsArray,\n  destroyed: mergeAsArray,\n  unmounted: mergeAsArray,\n  activated: mergeAsArray,\n  deactivated: mergeAsArray,\n  errorCaptured: mergeAsArray,\n  serverPrefetch: mergeAsArray,\n  // assets\n  components: mergeObjectOptions,\n  directives: mergeObjectOptions,\n  // watch\n  watch: mergeWatchOptions,\n  // provide / inject\n  provide: mergeDataFn,\n  inject: mergeInject\n};\nfunction mergeDataFn(to, from) {\n  if (!from) {\n    return to;\n  }\n  if (!to) {\n    return from;\n  }\n  return function mergedDataFn() {\n    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(to) ? to.call(this, this) : to, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(from) ? from.call(this, this) : from);\n  };\n}\nfunction mergeInject(to, from) {\n  return mergeObjectOptions(normalizeInject(to), normalizeInject(from));\n}\nfunction normalizeInject(raw) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(raw)) {\n    const res = {};\n    for (let i = 0; i < raw.length; i++) {\n      res[raw[i]] = raw[i];\n    }\n    return res;\n  }\n  return raw;\n}\nfunction mergeAsArray(to, from) {\n  return to ? [...new Set([].concat(to, from))] : from;\n}\nfunction mergeObjectOptions(to, from) {\n  return to ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(/* @__PURE__ */Object.create(null), to, from) : from;\n}\nfunction mergeEmitsOrPropsOptions(to, from) {\n  if (to) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(to) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(from)) {\n      return [... /* @__PURE__ */new Set([...to, ...from])];\n    }\n    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(/* @__PURE__ */Object.create(null), normalizePropsOrEmits(to), normalizePropsOrEmits(from != null ? from : {}));\n  } else {\n    return from;\n  }\n}\nfunction mergeWatchOptions(to, from) {\n  if (!to) return from;\n  if (!from) return to;\n  const merged = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(/* @__PURE__ */Object.create(null), to);\n  for (const key in from) {\n    merged[key] = mergeAsArray(to[key], from[key]);\n  }\n  return merged;\n}\nfunction createAppContext() {\n  return {\n    app: null,\n    config: {\n      isNativeTag: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NO,\n      performance: false,\n      globalProperties: {},\n      optionMergeStrategies: {},\n      errorHandler: void 0,\n      warnHandler: void 0,\n      compilerOptions: {}\n    },\n    mixins: [],\n    components: {},\n    directives: {},\n    provides: /* @__PURE__ */Object.create(null),\n    optionsCache: /* @__PURE__ */new WeakMap(),\n    propsCache: /* @__PURE__ */new WeakMap(),\n    emitsCache: /* @__PURE__ */new WeakMap()\n  };\n}\nlet uid$1 = 0;\nfunction createAppAPI(render, hydrate) {\n  return function createApp(rootComponent, rootProps = null) {\n    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(rootComponent)) {\n      rootComponent = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, rootComponent);\n    }\n    if (rootProps != null && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(rootProps)) {\n       true && warn$1(`root props passed to app.mount() must be an object.`);\n      rootProps = null;\n    }\n    const context = createAppContext();\n    const installedPlugins = /* @__PURE__ */new WeakSet();\n    const pluginCleanupFns = [];\n    let isMounted = false;\n    const app = context.app = {\n      _uid: uid$1++,\n      _component: rootComponent,\n      _props: rootProps,\n      _container: null,\n      _context: context,\n      _instance: null,\n      version,\n      get config() {\n        return context.config;\n      },\n      set config(v) {\n        if (true) {\n          warn$1(`app.config cannot be replaced. Modify individual options instead.`);\n        }\n      },\n      use(plugin, ...options) {\n        if (installedPlugins.has(plugin)) {\n           true && warn$1(`Plugin has already been applied to target app.`);\n        } else if (plugin && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(plugin.install)) {\n          installedPlugins.add(plugin);\n          plugin.install(app, ...options);\n        } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(plugin)) {\n          installedPlugins.add(plugin);\n          plugin(app, ...options);\n        } else if (true) {\n          warn$1(`A plugin must either be a function or an object with an \"install\" function.`);\n        }\n        return app;\n      },\n      mixin(mixin) {\n        if (__VUE_OPTIONS_API__) {\n          if (!context.mixins.includes(mixin)) {\n            context.mixins.push(mixin);\n          } else if (true) {\n            warn$1(\"Mixin has already been applied to target app\" + (mixin.name ? `: ${mixin.name}` : \"\"));\n          }\n        } else if (true) {\n          warn$1(\"Mixins are only available in builds supporting Options API\");\n        }\n        return app;\n      },\n      component(name, component) {\n        if (true) {\n          validateComponentName(name, context.config);\n        }\n        if (!component) {\n          return context.components[name];\n        }\n        if ( true && context.components[name]) {\n          warn$1(`Component \"${name}\" has already been registered in target app.`);\n        }\n        context.components[name] = component;\n        return app;\n      },\n      directive(name, directive) {\n        if (true) {\n          validateDirectiveName(name);\n        }\n        if (!directive) {\n          return context.directives[name];\n        }\n        if ( true && context.directives[name]) {\n          warn$1(`Directive \"${name}\" has already been registered in target app.`);\n        }\n        context.directives[name] = directive;\n        return app;\n      },\n      mount(rootContainer, isHydrate, namespace) {\n        if (!isMounted) {\n          if ( true && rootContainer.__vue_app__) {\n            warn$1(`There is already an app instance mounted on the host container.\n If you want to mount another app on the same host container, you need to unmount the previous app by calling \\`app.unmount()\\` first.`);\n          }\n          const vnode = app._ceVNode || createVNode(rootComponent, rootProps);\n          vnode.appContext = context;\n          if (namespace === true) {\n            namespace = \"svg\";\n          } else if (namespace === false) {\n            namespace = void 0;\n          }\n          if (true) {\n            context.reload = () => {\n              render(cloneVNode(vnode), rootContainer, namespace);\n            };\n          }\n          if (isHydrate && hydrate) {\n            hydrate(vnode, rootContainer);\n          } else {\n            render(vnode, rootContainer, namespace);\n          }\n          isMounted = true;\n          app._container = rootContainer;\n          rootContainer.__vue_app__ = app;\n          if (true) {\n            app._instance = vnode.component;\n            devtoolsInitApp(app, version);\n          }\n          return getComponentPublicInstance(vnode.component);\n        } else if (true) {\n          warn$1(`App has already been mounted.\nIf you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \\`const createMyApp = () => createApp(App)\\``);\n        }\n      },\n      onUnmount(cleanupFn) {\n        if ( true && typeof cleanupFn !== \"function\") {\n          warn$1(`Expected function as first argument to app.onUnmount(), but got ${typeof cleanupFn}`);\n        }\n        pluginCleanupFns.push(cleanupFn);\n      },\n      unmount() {\n        if (isMounted) {\n          callWithAsyncErrorHandling(pluginCleanupFns, app._instance, 16);\n          render(null, app._container);\n          if (true) {\n            app._instance = null;\n            devtoolsUnmountApp(app);\n          }\n          delete app._container.__vue_app__;\n        } else if (true) {\n          warn$1(`Cannot unmount an app that is not mounted.`);\n        }\n      },\n      provide(key, value) {\n        if ( true && key in context.provides) {\n          warn$1(`App already provides property with key \"${String(key)}\". It will be overwritten with the new value.`);\n        }\n        context.provides[key] = value;\n        return app;\n      },\n      runWithContext(fn) {\n        const lastApp = currentApp;\n        currentApp = app;\n        try {\n          return fn();\n        } finally {\n          currentApp = lastApp;\n        }\n      }\n    };\n    return app;\n  };\n}\nlet currentApp = null;\nfunction provide(key, value) {\n  if (!currentInstance) {\n    if (true) {\n      warn$1(`provide() can only be used inside setup().`);\n    }\n  } else {\n    let provides = currentInstance.provides;\n    const parentProvides = currentInstance.parent && currentInstance.parent.provides;\n    if (parentProvides === provides) {\n      provides = currentInstance.provides = Object.create(parentProvides);\n    }\n    provides[key] = value;\n  }\n}\nfunction inject(key, defaultValue, treatDefaultAsFactory = false) {\n  const instance = currentInstance || currentRenderingInstance;\n  if (instance || currentApp) {\n    const provides = currentApp ? currentApp._context.provides : instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : void 0;\n    if (provides && key in provides) {\n      return provides[key];\n    } else if (arguments.length > 1) {\n      return treatDefaultAsFactory && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;\n    } else if (true) {\n      warn$1(`injection \"${String(key)}\" not found.`);\n    }\n  } else if (true) {\n    warn$1(`inject() can only be used inside setup() or functional components.`);\n  }\n}\nfunction hasInjectionContext() {\n  return !!(currentInstance || currentRenderingInstance || currentApp);\n}\nconst internalObjectProto = {};\nconst createInternalObject = () => Object.create(internalObjectProto);\nconst isInternalObject = obj => Object.getPrototypeOf(obj) === internalObjectProto;\nfunction initProps(instance, rawProps, isStateful, isSSR = false) {\n  const props = {};\n  const attrs = createInternalObject();\n  instance.propsDefaults = /* @__PURE__ */Object.create(null);\n  setFullProps(instance, rawProps, props, attrs);\n  for (const key in instance.propsOptions[0]) {\n    if (!(key in props)) {\n      props[key] = void 0;\n    }\n  }\n  if (true) {\n    validateProps(rawProps || {}, props, instance);\n  }\n  if (isStateful) {\n    instance.props = isSSR ? props : (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReactive)(props);\n  } else {\n    if (!instance.type.props) {\n      instance.props = attrs;\n    } else {\n      instance.props = props;\n    }\n  }\n  instance.attrs = attrs;\n}\nfunction isInHmrContext(instance) {\n  while (instance) {\n    if (instance.type.__hmrId) return true;\n    instance = instance.parent;\n  }\n}\nfunction updateProps(instance, rawProps, rawPrevProps, optimized) {\n  const {\n    props,\n    attrs,\n    vnode: {\n      patchFlag\n    }\n  } = instance;\n  const rawCurrentProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(props);\n  const [options] = instance.propsOptions;\n  let hasAttrsChanged = false;\n  if (\n  // always force full diff in dev\n  // - #1942 if hmr is enabled with sfc component\n  // - vite#872 non-sfc component used by sfc component\n  !( true && isInHmrContext(instance)) && (optimized || patchFlag > 0) && !(patchFlag & 16)) {\n    if (patchFlag & 8) {\n      const propsToUpdate = instance.vnode.dynamicProps;\n      for (let i = 0; i < propsToUpdate.length; i++) {\n        let key = propsToUpdate[i];\n        if (isEmitListener(instance.emitsOptions, key)) {\n          continue;\n        }\n        const value = rawProps[key];\n        if (options) {\n          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(attrs, key)) {\n            if (value !== attrs[key]) {\n              attrs[key] = value;\n              hasAttrsChanged = true;\n            }\n          } else {\n            const camelizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(key);\n            props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);\n          }\n        } else {\n          if (value !== attrs[key]) {\n            attrs[key] = value;\n            hasAttrsChanged = true;\n          }\n        }\n      }\n    }\n  } else {\n    if (setFullProps(instance, rawProps, props, attrs)) {\n      hasAttrsChanged = true;\n    }\n    let kebabKey;\n    for (const key in rawCurrentProps) {\n      if (!rawProps ||\n      // for camelCase\n      !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(rawProps, key) && (\n      // it's possible the original props was passed in as kebab-case\n      // and converted to camelCase (#955)\n      (kebabKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key)) === key || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(rawProps, kebabKey))) {\n        if (options) {\n          if (rawPrevProps && (\n          // for camelCase\n          rawPrevProps[key] !== void 0 ||\n          // for kebab-case\n          rawPrevProps[kebabKey] !== void 0)) {\n            props[key] = resolvePropValue(options, rawCurrentProps, key, void 0, instance, true);\n          }\n        } else {\n          delete props[key];\n        }\n      }\n    }\n    if (attrs !== rawCurrentProps) {\n      for (const key in attrs) {\n        if (!rawProps || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(rawProps, key) && true) {\n          delete attrs[key];\n          hasAttrsChanged = true;\n        }\n      }\n    }\n  }\n  if (hasAttrsChanged) {\n    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.trigger)(instance.attrs, \"set\", \"\");\n  }\n  if (true) {\n    validateProps(rawProps || {}, props, instance);\n  }\n}\nfunction setFullProps(instance, rawProps, props, attrs) {\n  const [options, needCastKeys] = instance.propsOptions;\n  let hasAttrsChanged = false;\n  let rawCastValues;\n  if (rawProps) {\n    for (let key in rawProps) {\n      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isReservedProp)(key)) {\n        continue;\n      }\n      const value = rawProps[key];\n      let camelKey;\n      if (options && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(options, camelKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(key))) {\n        if (!needCastKeys || !needCastKeys.includes(camelKey)) {\n          props[camelKey] = value;\n        } else {\n          (rawCastValues || (rawCastValues = {}))[camelKey] = value;\n        }\n      } else if (!isEmitListener(instance.emitsOptions, key)) {\n        if (!(key in attrs) || value !== attrs[key]) {\n          attrs[key] = value;\n          hasAttrsChanged = true;\n        }\n      }\n    }\n  }\n  if (needCastKeys) {\n    const rawCurrentProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(props);\n    const castValues = rawCastValues || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;\n    for (let i = 0; i < needCastKeys.length; i++) {\n      const key = needCastKeys[i];\n      props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(castValues, key));\n    }\n  }\n  return hasAttrsChanged;\n}\nfunction resolvePropValue(options, props, key, value, instance, isAbsent) {\n  const opt = options[key];\n  if (opt != null) {\n    const hasDefault = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(opt, \"default\");\n    if (hasDefault && value === void 0) {\n      const defaultValue = opt.default;\n      if (opt.type !== Function && !opt.skipFactory && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(defaultValue)) {\n        const {\n          propsDefaults\n        } = instance;\n        if (key in propsDefaults) {\n          value = propsDefaults[key];\n        } else {\n          const reset = setCurrentInstance(instance);\n          value = propsDefaults[key] = defaultValue.call(null, props);\n          reset();\n        }\n      } else {\n        value = defaultValue;\n      }\n      if (instance.ce) {\n        instance.ce._setProp(key, value);\n      }\n    }\n    if (opt[0 /* shouldCast */]) {\n      if (isAbsent && !hasDefault) {\n        value = false;\n      } else if (opt[1 /* shouldCastTrue */] && (value === \"\" || value === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key))) {\n        value = true;\n      }\n    }\n  }\n  return value;\n}\nconst mixinPropsCache = /* @__PURE__ */new WeakMap();\nfunction normalizePropsOptions(comp, appContext, asMixin = false) {\n  const cache = __VUE_OPTIONS_API__ && asMixin ? mixinPropsCache : appContext.propsCache;\n  const cached = cache.get(comp);\n  if (cached) {\n    return cached;\n  }\n  const raw = comp.props;\n  const normalized = {};\n  const needCastKeys = [];\n  let hasExtends = false;\n  if (__VUE_OPTIONS_API__ && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(comp)) {\n    const extendProps = raw2 => {\n      hasExtends = true;\n      const [props, keys] = normalizePropsOptions(raw2, appContext, true);\n      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(normalized, props);\n      if (keys) needCastKeys.push(...keys);\n    };\n    if (!asMixin && appContext.mixins.length) {\n      appContext.mixins.forEach(extendProps);\n    }\n    if (comp.extends) {\n      extendProps(comp.extends);\n    }\n    if (comp.mixins) {\n      comp.mixins.forEach(extendProps);\n    }\n  }\n  if (!raw && !hasExtends) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(comp)) {\n      cache.set(comp, _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR);\n    }\n    return _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR;\n  }\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(raw)) {\n    for (let i = 0; i < raw.length; i++) {\n      if ( true && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(raw[i])) {\n        warn$1(`props must be strings when using array syntax.`, raw[i]);\n      }\n      const normalizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(raw[i]);\n      if (validatePropName(normalizedKey)) {\n        normalized[normalizedKey] = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;\n      }\n    }\n  } else if (raw) {\n    if ( true && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(raw)) {\n      warn$1(`invalid props options`, raw);\n    }\n    for (const key in raw) {\n      const normalizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(key);\n      if (validatePropName(normalizedKey)) {\n        const opt = raw[key];\n        const prop = normalized[normalizedKey] = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(opt) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt) ? {\n          type: opt\n        } : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, opt);\n        const propType = prop.type;\n        let shouldCast = false;\n        let shouldCastTrue = true;\n        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(propType)) {\n          for (let index = 0; index < propType.length; ++index) {\n            const type = propType[index];\n            const typeName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(type) && type.name;\n            if (typeName === \"Boolean\") {\n              shouldCast = true;\n              break;\n            } else if (typeName === \"String\") {\n              shouldCastTrue = false;\n            }\n          }\n        } else {\n          shouldCast = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(propType) && propType.name === \"Boolean\";\n        }\n        prop[0 /* shouldCast */] = shouldCast;\n        prop[1 /* shouldCastTrue */] = shouldCastTrue;\n        if (shouldCast || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(prop, \"default\")) {\n          needCastKeys.push(normalizedKey);\n        }\n      }\n    }\n  }\n  const res = [normalized, needCastKeys];\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(comp)) {\n    cache.set(comp, res);\n  }\n  return res;\n}\nfunction validatePropName(key) {\n  if (key[0] !== \"$\" && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isReservedProp)(key)) {\n    return true;\n  } else if (true) {\n    warn$1(`Invalid prop name: \"${key}\" is a reserved property.`);\n  }\n  return false;\n}\nfunction getType(ctor) {\n  if (ctor === null) {\n    return \"null\";\n  }\n  if (typeof ctor === \"function\") {\n    return ctor.name || \"\";\n  } else if (typeof ctor === \"object\") {\n    const name = ctor.constructor && ctor.constructor.name;\n    return name || \"\";\n  }\n  return \"\";\n}\nfunction validateProps(rawProps, props, instance) {\n  const resolvedValues = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(props);\n  const options = instance.propsOptions[0];\n  for (const key in options) {\n    let opt = options[key];\n    if (opt == null) continue;\n    validateProp(key, resolvedValues[key], opt,  true ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(resolvedValues) : 0, !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(rawProps, key) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(rawProps, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key)));\n  }\n}\nfunction validateProp(name, value, prop, props, isAbsent) {\n  const {\n    type,\n    required,\n    validator,\n    skipCheck\n  } = prop;\n  if (required && isAbsent) {\n    warn$1('Missing required prop: \"' + name + '\"');\n    return;\n  }\n  if (value == null && !required) {\n    return;\n  }\n  if (type != null && type !== true && !skipCheck) {\n    let isValid = false;\n    const types = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(type) ? type : [type];\n    const expectedTypes = [];\n    for (let i = 0; i < types.length && !isValid; i++) {\n      const {\n        valid,\n        expectedType\n      } = assertType(value, types[i]);\n      expectedTypes.push(expectedType || \"\");\n      isValid = valid;\n    }\n    if (!isValid) {\n      warn$1(getInvalidTypeMessage(name, value, expectedTypes));\n      return;\n    }\n  }\n  if (validator && !validator(value, props)) {\n    warn$1('Invalid prop: custom validator check failed for prop \"' + name + '\".');\n  }\n}\nconst isSimpleType = /* @__PURE__ */(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.makeMap)(\"String,Number,Boolean,Function,Symbol,BigInt\");\nfunction assertType(value, type) {\n  let valid;\n  const expectedType = getType(type);\n  if (expectedType === \"null\") {\n    valid = value === null;\n  } else if (isSimpleType(expectedType)) {\n    const t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    if (!valid && t === \"object\") {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === \"Object\") {\n    valid = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(value);\n  } else if (expectedType === \"Array\") {\n    valid = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid,\n    expectedType\n  };\n}\nfunction getInvalidTypeMessage(name, value, expectedTypes) {\n  if (expectedTypes.length === 0) {\n    return `Prop type [] for prop \"${name}\" won't match anything. Did you mean to use type Array instead?`;\n  }\n  let message = `Invalid prop: type check failed for prop \"${name}\". Expected ${expectedTypes.map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize).join(\" | \")}`;\n  const expectedType = expectedTypes[0];\n  const receivedType = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toRawType)(value);\n  const expectedValue = styleValue(value, expectedType);\n  const receivedValue = styleValue(value, receivedType);\n  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {\n    message += ` with value ${expectedValue}`;\n  }\n  message += `, got ${receivedType} `;\n  if (isExplicable(receivedType)) {\n    message += `with value ${receivedValue}.`;\n  }\n  return message;\n}\nfunction styleValue(value, type) {\n  if (type === \"String\") {\n    return `\"${value}\"`;\n  } else if (type === \"Number\") {\n    return `${Number(value)}`;\n  } else {\n    return `${value}`;\n  }\n}\nfunction isExplicable(type) {\n  const explicitTypes = [\"string\", \"number\", \"boolean\"];\n  return explicitTypes.some(elem => type.toLowerCase() === elem);\n}\nfunction isBoolean(...args) {\n  return args.some(elem => elem.toLowerCase() === \"boolean\");\n}\nconst isInternalKey = key => key[0] === \"_\" || key === \"$stable\";\nconst normalizeSlotValue = value => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];\nconst normalizeSlot = (key, rawSlot, ctx) => {\n  if (rawSlot._n) {\n    return rawSlot;\n  }\n  const normalized = withCtx((...args) => {\n    if ( true && currentInstance && (!ctx || ctx.root === currentInstance.root)) {\n      warn$1(`Slot \"${key}\" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`);\n    }\n    return normalizeSlotValue(rawSlot(...args));\n  }, ctx);\n  normalized._c = false;\n  return normalized;\n};\nconst normalizeObjectSlots = (rawSlots, slots, instance) => {\n  const ctx = rawSlots._ctx;\n  for (const key in rawSlots) {\n    if (isInternalKey(key)) continue;\n    const value = rawSlots[key];\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value)) {\n      slots[key] = normalizeSlot(key, value, ctx);\n    } else if (value != null) {\n      if (true) {\n        warn$1(`Non-function value encountered for slot \"${key}\". Prefer function slots for better performance.`);\n      }\n      const normalized = normalizeSlotValue(value);\n      slots[key] = () => normalized;\n    }\n  }\n};\nconst normalizeVNodeSlots = (instance, children) => {\n  if ( true && !isKeepAlive(instance.vnode) && true) {\n    warn$1(`Non-function value encountered for default slot. Prefer function slots for better performance.`);\n  }\n  const normalized = normalizeSlotValue(children);\n  instance.slots.default = () => normalized;\n};\nconst assignSlots = (slots, children, optimized) => {\n  for (const key in children) {\n    if (optimized || key !== \"_\") {\n      slots[key] = children[key];\n    }\n  }\n};\nconst initSlots = (instance, children, optimized) => {\n  const slots = instance.slots = createInternalObject();\n  if (instance.vnode.shapeFlag & 32) {\n    const type = children._;\n    if (type) {\n      assignSlots(slots, children, optimized);\n      if (optimized) {\n        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.def)(slots, \"_\", type, true);\n      }\n    } else {\n      normalizeObjectSlots(children, slots);\n    }\n  } else if (children) {\n    normalizeVNodeSlots(instance, children);\n  }\n};\nconst updateSlots = (instance, children, optimized) => {\n  const {\n    vnode,\n    slots\n  } = instance;\n  let needDeletionCheck = true;\n  let deletionComparisonTarget = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;\n  if (vnode.shapeFlag & 32) {\n    const type = children._;\n    if (type) {\n      if ( true && isHmrUpdating) {\n        assignSlots(slots, children, optimized);\n        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.trigger)(instance, \"set\", \"$slots\");\n      } else if (optimized && type === 1) {\n        needDeletionCheck = false;\n      } else {\n        assignSlots(slots, children, optimized);\n      }\n    } else {\n      needDeletionCheck = !children.$stable;\n      normalizeObjectSlots(children, slots);\n    }\n    deletionComparisonTarget = children;\n  } else if (children) {\n    normalizeVNodeSlots(instance, children);\n    deletionComparisonTarget = {\n      default: 1\n    };\n  }\n  if (needDeletionCheck) {\n    for (const key in slots) {\n      if (!isInternalKey(key) && deletionComparisonTarget[key] == null) {\n        delete slots[key];\n      }\n    }\n  }\n};\nlet supported;\nlet perf;\nfunction startMeasure(instance, type) {\n  if (instance.appContext.config.performance && isSupported()) {\n    perf.mark(`vue-${type}-${instance.uid}`);\n  }\n  if (true) {\n    devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());\n  }\n}\nfunction endMeasure(instance, type) {\n  if (instance.appContext.config.performance && isSupported()) {\n    const startTag = `vue-${type}-${instance.uid}`;\n    const endTag = startTag + `:end`;\n    perf.mark(endTag);\n    perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);\n    perf.clearMarks(startTag);\n    perf.clearMarks(endTag);\n  }\n  if (true) {\n    devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());\n  }\n}\nfunction isSupported() {\n  if (supported !== void 0) {\n    return supported;\n  }\n  if (typeof window !== \"undefined\" && window.performance) {\n    supported = true;\n    perf = window.performance;\n  } else {\n    supported = false;\n  }\n  return supported;\n}\nfunction initFeatureFlags() {\n  const needWarn = [];\n  if (typeof __VUE_OPTIONS_API__ !== \"boolean\") {\n     true && needWarn.push(`__VUE_OPTIONS_API__`);\n    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.getGlobalThis)().__VUE_OPTIONS_API__ = true;\n  }\n  if (typeof __VUE_PROD_DEVTOOLS__ !== \"boolean\") {\n     true && needWarn.push(`__VUE_PROD_DEVTOOLS__`);\n    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.getGlobalThis)().__VUE_PROD_DEVTOOLS__ = false;\n  }\n  if (typeof __VUE_PROD_HYDRATION_MISMATCH_DETAILS__ !== \"boolean\") {\n     true && needWarn.push(`__VUE_PROD_HYDRATION_MISMATCH_DETAILS__`);\n    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.getGlobalThis)().__VUE_PROD_HYDRATION_MISMATCH_DETAILS__ = false;\n  }\n  if ( true && needWarn.length) {\n    const multi = needWarn.length > 1;\n    console.warn(`Feature flag${multi ? `s` : ``} ${needWarn.join(\", \")} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.\n\nFor more details, see https://link.vuejs.org/feature-flags.`);\n  }\n}\nconst queuePostRenderEffect = queueEffectWithSuspense;\nfunction createRenderer(options) {\n  return baseCreateRenderer(options);\n}\nfunction createHydrationRenderer(options) {\n  return baseCreateRenderer(options, createHydrationFunctions);\n}\nfunction baseCreateRenderer(options, createHydrationFns) {\n  {\n    initFeatureFlags();\n  }\n  const target = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.getGlobalThis)();\n  target.__VUE__ = true;\n  if (true) {\n    setDevtoolsHook$1(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);\n  }\n  const {\n    insert: hostInsert,\n    remove: hostRemove,\n    patchProp: hostPatchProp,\n    createElement: hostCreateElement,\n    createText: hostCreateText,\n    createComment: hostCreateComment,\n    setText: hostSetText,\n    setElementText: hostSetElementText,\n    parentNode: hostParentNode,\n    nextSibling: hostNextSibling,\n    setScopeId: hostSetScopeId = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP,\n    insertStaticContent: hostInsertStaticContent\n  } = options;\n  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, namespace = void 0, slotScopeIds = null, optimized =  true && isHmrUpdating ? false : !!n2.dynamicChildren) => {\n    if (n1 === n2) {\n      return;\n    }\n    if (n1 && !isSameVNodeType(n1, n2)) {\n      anchor = getNextHostNode(n1);\n      unmount(n1, parentComponent, parentSuspense, true);\n      n1 = null;\n    }\n    if (n2.patchFlag === -2) {\n      optimized = false;\n      n2.dynamicChildren = null;\n    }\n    const {\n      type,\n      ref,\n      shapeFlag\n    } = n2;\n    switch (type) {\n      case Text:\n        processText(n1, n2, container, anchor);\n        break;\n      case Comment:\n        processCommentNode(n1, n2, container, anchor);\n        break;\n      case Static:\n        if (n1 == null) {\n          mountStaticNode(n2, container, anchor, namespace);\n        } else if (true) {\n          patchStaticNode(n1, n2, container, namespace);\n        }\n        break;\n      case Fragment:\n        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n        break;\n      default:\n        if (shapeFlag & 1) {\n          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n        } else if (shapeFlag & 6) {\n          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n        } else if (shapeFlag & 64) {\n          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals);\n        } else if (shapeFlag & 128) {\n          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals);\n        } else if (true) {\n          warn$1(\"Invalid VNode type:\", type, `(${typeof type})`);\n        }\n    }\n    if (ref != null && parentComponent) {\n      setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);\n    }\n  };\n  const processText = (n1, n2, container, anchor) => {\n    if (n1 == null) {\n      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);\n    } else {\n      const el = n2.el = n1.el;\n      if (n2.children !== n1.children) {\n        hostSetText(el, n2.children);\n      }\n    }\n  };\n  const processCommentNode = (n1, n2, container, anchor) => {\n    if (n1 == null) {\n      hostInsert(n2.el = hostCreateComment(n2.children || \"\"), container, anchor);\n    } else {\n      n2.el = n1.el;\n    }\n  };\n  const mountStaticNode = (n2, container, anchor, namespace) => {\n    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, namespace, n2.el, n2.anchor);\n  };\n  const patchStaticNode = (n1, n2, container, namespace) => {\n    if (n2.children !== n1.children) {\n      const anchor = hostNextSibling(n1.anchor);\n      removeStaticNode(n1);\n      [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, namespace);\n    } else {\n      n2.el = n1.el;\n      n2.anchor = n1.anchor;\n    }\n  };\n  const moveStaticNode = ({\n    el,\n    anchor\n  }, container, nextSibling) => {\n    let next;\n    while (el && el !== anchor) {\n      next = hostNextSibling(el);\n      hostInsert(el, container, nextSibling);\n      el = next;\n    }\n    hostInsert(anchor, container, nextSibling);\n  };\n  const removeStaticNode = ({\n    el,\n    anchor\n  }) => {\n    let next;\n    while (el && el !== anchor) {\n      next = hostNextSibling(el);\n      hostRemove(el);\n      el = next;\n    }\n    hostRemove(anchor);\n  };\n  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {\n    if (n2.type === \"svg\") {\n      namespace = \"svg\";\n    } else if (n2.type === \"math\") {\n      namespace = \"mathml\";\n    }\n    if (n1 == null) {\n      mountElement(n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n    } else {\n      patchElement(n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n    }\n  };\n  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {\n    let el;\n    let vnodeHook;\n    const {\n      props,\n      shapeFlag,\n      transition,\n      dirs\n    } = vnode;\n    el = vnode.el = hostCreateElement(vnode.type, namespace, props && props.is, props);\n    if (shapeFlag & 8) {\n      hostSetElementText(el, vnode.children);\n    } else if (shapeFlag & 16) {\n      mountChildren(vnode.children, el, null, parentComponent, parentSuspense, resolveChildrenNamespace(vnode, namespace), slotScopeIds, optimized);\n    }\n    if (dirs) {\n      invokeDirectiveHook(vnode, null, parentComponent, \"created\");\n    }\n    setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);\n    if (props) {\n      for (const key in props) {\n        if (key !== \"value\" && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isReservedProp)(key)) {\n          hostPatchProp(el, key, null, props[key], namespace, parentComponent);\n        }\n      }\n      if (\"value\" in props) {\n        hostPatchProp(el, \"value\", null, props.value, namespace);\n      }\n      if (vnodeHook = props.onVnodeBeforeMount) {\n        invokeVNodeHook(vnodeHook, parentComponent, vnode);\n      }\n    }\n    if (true) {\n      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.def)(el, \"__vnode\", vnode, true);\n      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.def)(el, \"__vueParentComponent\", parentComponent, true);\n    }\n    if (dirs) {\n      invokeDirectiveHook(vnode, null, parentComponent, \"beforeMount\");\n    }\n    const needCallTransitionHooks = needTransition(parentSuspense, transition);\n    if (needCallTransitionHooks) {\n      transition.beforeEnter(el);\n    }\n    hostInsert(el, container, anchor);\n    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {\n      queuePostRenderEffect(() => {\n        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\n        needCallTransitionHooks && transition.enter(el);\n        dirs && invokeDirectiveHook(vnode, null, parentComponent, \"mounted\");\n      }, parentSuspense);\n    }\n  };\n  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {\n    if (scopeId) {\n      hostSetScopeId(el, scopeId);\n    }\n    if (slotScopeIds) {\n      for (let i = 0; i < slotScopeIds.length; i++) {\n        hostSetScopeId(el, slotScopeIds[i]);\n      }\n    }\n    if (parentComponent) {\n      let subTree = parentComponent.subTree;\n      if ( true && subTree.patchFlag > 0 && subTree.patchFlag & 2048) {\n        subTree = filterSingleRoot(subTree.children) || subTree;\n      }\n      if (vnode === subTree || isSuspense(subTree.type) && (subTree.ssContent === vnode || subTree.ssFallback === vnode)) {\n        const parentVNode = parentComponent.vnode;\n        setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);\n      }\n    }\n  };\n  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, start = 0) => {\n    for (let i = start; i < children.length; i++) {\n      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);\n      patch(null, child, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n    }\n  };\n  const patchElement = (n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {\n    const el = n2.el = n1.el;\n    if (true) {\n      el.__vnode = n2;\n    }\n    let {\n      patchFlag,\n      dynamicChildren,\n      dirs\n    } = n2;\n    patchFlag |= n1.patchFlag & 16;\n    const oldProps = n1.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;\n    const newProps = n2.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;\n    let vnodeHook;\n    parentComponent && toggleRecurse(parentComponent, false);\n    if (vnodeHook = newProps.onVnodeBeforeUpdate) {\n      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\n    }\n    if (dirs) {\n      invokeDirectiveHook(n2, n1, parentComponent, \"beforeUpdate\");\n    }\n    parentComponent && toggleRecurse(parentComponent, true);\n    if ( true && isHmrUpdating) {\n      patchFlag = 0;\n      optimized = false;\n      dynamicChildren = null;\n    }\n    if (oldProps.innerHTML && newProps.innerHTML == null || oldProps.textContent && newProps.textContent == null) {\n      hostSetElementText(el, \"\");\n    }\n    if (dynamicChildren) {\n      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, resolveChildrenNamespace(n2, namespace), slotScopeIds);\n      if (true) {\n        traverseStaticChildren(n1, n2);\n      }\n    } else if (!optimized) {\n      patchChildren(n1, n2, el, null, parentComponent, parentSuspense, resolveChildrenNamespace(n2, namespace), slotScopeIds, false);\n    }\n    if (patchFlag > 0) {\n      if (patchFlag & 16) {\n        patchProps(el, oldProps, newProps, parentComponent, namespace);\n      } else {\n        if (patchFlag & 2) {\n          if (oldProps.class !== newProps.class) {\n            hostPatchProp(el, \"class\", null, newProps.class, namespace);\n          }\n        }\n        if (patchFlag & 4) {\n          hostPatchProp(el, \"style\", oldProps.style, newProps.style, namespace);\n        }\n        if (patchFlag & 8) {\n          const propsToUpdate = n2.dynamicProps;\n          for (let i = 0; i < propsToUpdate.length; i++) {\n            const key = propsToUpdate[i];\n            const prev = oldProps[key];\n            const next = newProps[key];\n            if (next !== prev || key === \"value\") {\n              hostPatchProp(el, key, prev, next, namespace, parentComponent);\n            }\n          }\n        }\n      }\n      if (patchFlag & 1) {\n        if (n1.children !== n2.children) {\n          hostSetElementText(el, n2.children);\n        }\n      }\n    } else if (!optimized && dynamicChildren == null) {\n      patchProps(el, oldProps, newProps, parentComponent, namespace);\n    }\n    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {\n      queuePostRenderEffect(() => {\n        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\n        dirs && invokeDirectiveHook(n2, n1, parentComponent, \"updated\");\n      }, parentSuspense);\n    }\n  };\n  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, namespace, slotScopeIds) => {\n    for (let i = 0; i < newChildren.length; i++) {\n      const oldVNode = oldChildren[i];\n      const newVNode = newChildren[i];\n      const container =\n      // oldVNode may be an errored async setup() component inside Suspense\n      // which will not have a mounted element\n      oldVNode.el && (\n      // - In the case of a Fragment, we need to provide the actual parent\n      // of the Fragment itself so it can move its children.\n      oldVNode.type === Fragment ||\n      // - In the case of different nodes, there is going to be a replacement\n      // which also requires the correct parent container\n      !isSameVNodeType(oldVNode, newVNode) ||\n      // - In the case of a component, it could contain anything.\n      oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) :\n      // In other cases, the parent container is not actually used so we\n      // just pass the block element here to avoid a DOM parentNode call.\n      fallbackContainer;\n      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, namespace, slotScopeIds, true);\n    }\n  };\n  const patchProps = (el, oldProps, newProps, parentComponent, namespace) => {\n    if (oldProps !== newProps) {\n      if (oldProps !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ) {\n        for (const key in oldProps) {\n          if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isReservedProp)(key) && !(key in newProps)) {\n            hostPatchProp(el, key, oldProps[key], null, namespace, parentComponent);\n          }\n        }\n      }\n      for (const key in newProps) {\n        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isReservedProp)(key)) continue;\n        const next = newProps[key];\n        const prev = oldProps[key];\n        if (next !== prev && key !== \"value\") {\n          hostPatchProp(el, key, prev, next, namespace, parentComponent);\n        }\n      }\n      if (\"value\" in newProps) {\n        hostPatchProp(el, \"value\", oldProps.value, newProps.value, namespace);\n      }\n    }\n  };\n  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {\n    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText(\"\");\n    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText(\"\");\n    let {\n      patchFlag,\n      dynamicChildren,\n      slotScopeIds: fragmentSlotScopeIds\n    } = n2;\n    if ( true && (\n    // #5523 dev root fragment may inherit directives\n    isHmrUpdating || patchFlag & 2048)) {\n      patchFlag = 0;\n      optimized = false;\n      dynamicChildren = null;\n    }\n    if (fragmentSlotScopeIds) {\n      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;\n    }\n    if (n1 == null) {\n      hostInsert(fragmentStartAnchor, container, anchor);\n      hostInsert(fragmentEndAnchor, container, anchor);\n      mountChildren(\n      // #10007\n      // such fragment like `<></>` will be compiled into\n      // a fragment which doesn't have a children.\n      // In this case fallback to an empty array\n      n2.children || [], container, fragmentEndAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n    } else {\n      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren &&\n      // #2715 the previous fragment could've been a BAILed one as a result\n      // of renderSlot() with no valid children\n      n1.dynamicChildren) {\n        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, namespace, slotScopeIds);\n        if (true) {\n          traverseStaticChildren(n1, n2);\n        } else {}\n      } else {\n        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n      }\n    }\n  };\n  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {\n    n2.slotScopeIds = slotScopeIds;\n    if (n1 == null) {\n      if (n2.shapeFlag & 512) {\n        parentComponent.ctx.activate(n2, container, anchor, namespace, optimized);\n      } else {\n        mountComponent(n2, container, anchor, parentComponent, parentSuspense, namespace, optimized);\n      }\n    } else {\n      updateComponent(n1, n2, optimized);\n    }\n  };\n  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, namespace, optimized) => {\n    const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);\n    if ( true && instance.type.__hmrId) {\n      registerHMR(instance);\n    }\n    if (true) {\n      pushWarningContext(initialVNode);\n      startMeasure(instance, `mount`);\n    }\n    if (isKeepAlive(initialVNode)) {\n      instance.ctx.renderer = internals;\n    }\n    {\n      if (true) {\n        startMeasure(instance, `init`);\n      }\n      setupComponent(instance, false, optimized);\n      if (true) {\n        endMeasure(instance, `init`);\n      }\n    }\n    if (instance.asyncDep) {\n      if ( true && isHmrUpdating) initialVNode.el = null;\n      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect, optimized);\n      if (!initialVNode.el) {\n        const placeholder = instance.subTree = createVNode(Comment);\n        processCommentNode(null, placeholder, container, anchor);\n      }\n    } else {\n      setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, namespace, optimized);\n    }\n    if (true) {\n      popWarningContext();\n      endMeasure(instance, `mount`);\n    }\n  };\n  const updateComponent = (n1, n2, optimized) => {\n    const instance = n2.component = n1.component;\n    if (shouldUpdateComponent(n1, n2, optimized)) {\n      if (instance.asyncDep && !instance.asyncResolved) {\n        if (true) {\n          pushWarningContext(n2);\n        }\n        updateComponentPreRender(instance, n2, optimized);\n        if (true) {\n          popWarningContext();\n        }\n        return;\n      } else {\n        instance.next = n2;\n        instance.update();\n      }\n    } else {\n      n2.el = n1.el;\n      instance.vnode = n2;\n    }\n  };\n  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, namespace, optimized) => {\n    const componentUpdateFn = () => {\n      if (!instance.isMounted) {\n        let vnodeHook;\n        const {\n          el,\n          props\n        } = initialVNode;\n        const {\n          bm,\n          m,\n          parent,\n          root,\n          type\n        } = instance;\n        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);\n        toggleRecurse(instance, false);\n        if (bm) {\n          (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(bm);\n        }\n        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {\n          invokeVNodeHook(vnodeHook, parent, initialVNode);\n        }\n        toggleRecurse(instance, true);\n        if (el && hydrateNode) {\n          const hydrateSubTree = () => {\n            if (true) {\n              startMeasure(instance, `render`);\n            }\n            instance.subTree = renderComponentRoot(instance);\n            if (true) {\n              endMeasure(instance, `render`);\n            }\n            if (true) {\n              startMeasure(instance, `hydrate`);\n            }\n            hydrateNode(el, instance.subTree, instance, parentSuspense, null);\n            if (true) {\n              endMeasure(instance, `hydrate`);\n            }\n          };\n          if (isAsyncWrapperVNode && type.__asyncHydrate) {\n            type.__asyncHydrate(el, instance, hydrateSubTree);\n          } else {\n            hydrateSubTree();\n          }\n        } else {\n          if (root.ce) {\n            root.ce._injectChildStyle(type);\n          }\n          if (true) {\n            startMeasure(instance, `render`);\n          }\n          const subTree = instance.subTree = renderComponentRoot(instance);\n          if (true) {\n            endMeasure(instance, `render`);\n          }\n          if (true) {\n            startMeasure(instance, `patch`);\n          }\n          patch(null, subTree, container, anchor, instance, parentSuspense, namespace);\n          if (true) {\n            endMeasure(instance, `patch`);\n          }\n          initialVNode.el = subTree.el;\n        }\n        if (m) {\n          queuePostRenderEffect(m, parentSuspense);\n        }\n        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {\n          const scopedInitialVNode = initialVNode;\n          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);\n        }\n        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {\n          instance.a && queuePostRenderEffect(instance.a, parentSuspense);\n        }\n        instance.isMounted = true;\n        if (true) {\n          devtoolsComponentAdded(instance);\n        }\n        initialVNode = container = anchor = null;\n      } else {\n        let {\n          next,\n          bu,\n          u,\n          parent,\n          vnode\n        } = instance;\n        {\n          const nonHydratedAsyncRoot = locateNonHydratedAsyncRoot(instance);\n          if (nonHydratedAsyncRoot) {\n            if (next) {\n              next.el = vnode.el;\n              updateComponentPreRender(instance, next, optimized);\n            }\n            nonHydratedAsyncRoot.asyncDep.then(() => {\n              if (!instance.isUnmounted) {\n                componentUpdateFn();\n              }\n            });\n            return;\n          }\n        }\n        let originNext = next;\n        let vnodeHook;\n        if (true) {\n          pushWarningContext(next || instance.vnode);\n        }\n        toggleRecurse(instance, false);\n        if (next) {\n          next.el = vnode.el;\n          updateComponentPreRender(instance, next, optimized);\n        } else {\n          next = vnode;\n        }\n        if (bu) {\n          (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(bu);\n        }\n        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {\n          invokeVNodeHook(vnodeHook, parent, next, vnode);\n        }\n        toggleRecurse(instance, true);\n        if (true) {\n          startMeasure(instance, `render`);\n        }\n        const nextTree = renderComponentRoot(instance);\n        if (true) {\n          endMeasure(instance, `render`);\n        }\n        const prevTree = instance.subTree;\n        instance.subTree = nextTree;\n        if (true) {\n          startMeasure(instance, `patch`);\n        }\n        patch(prevTree, nextTree,\n        // parent may have changed if it's in a teleport\n        hostParentNode(prevTree.el),\n        // anchor may have changed if it's in a fragment\n        getNextHostNode(prevTree), instance, parentSuspense, namespace);\n        if (true) {\n          endMeasure(instance, `patch`);\n        }\n        next.el = nextTree.el;\n        if (originNext === null) {\n          updateHOCHostEl(instance, nextTree.el);\n        }\n        if (u) {\n          queuePostRenderEffect(u, parentSuspense);\n        }\n        if (vnodeHook = next.props && next.props.onVnodeUpdated) {\n          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);\n        }\n        if (true) {\n          devtoolsComponentUpdated(instance);\n        }\n        if (true) {\n          popWarningContext();\n        }\n      }\n    };\n    instance.scope.on();\n    const effect = instance.effect = new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ReactiveEffect(componentUpdateFn);\n    instance.scope.off();\n    const update = instance.update = effect.run.bind(effect);\n    const job = instance.job = effect.runIfDirty.bind(effect);\n    job.i = instance;\n    job.id = instance.uid;\n    effect.scheduler = () => queueJob(job);\n    toggleRecurse(instance, true);\n    if (true) {\n      effect.onTrack = instance.rtc ? e => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(instance.rtc, e) : void 0;\n      effect.onTrigger = instance.rtg ? e => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(instance.rtg, e) : void 0;\n    }\n    update();\n  };\n  const updateComponentPreRender = (instance, nextVNode, optimized) => {\n    nextVNode.component = instance;\n    const prevProps = instance.vnode.props;\n    instance.vnode = nextVNode;\n    instance.next = null;\n    updateProps(instance, nextVNode.props, prevProps, optimized);\n    updateSlots(instance, nextVNode.children, optimized);\n    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();\n    flushPreFlushCbs(instance);\n    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();\n  };\n  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized = false) => {\n    const c1 = n1 && n1.children;\n    const prevShapeFlag = n1 ? n1.shapeFlag : 0;\n    const c2 = n2.children;\n    const {\n      patchFlag,\n      shapeFlag\n    } = n2;\n    if (patchFlag > 0) {\n      if (patchFlag & 128) {\n        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n        return;\n      } else if (patchFlag & 256) {\n        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n        return;\n      }\n    }\n    if (shapeFlag & 8) {\n      if (prevShapeFlag & 16) {\n        unmountChildren(c1, parentComponent, parentSuspense);\n      }\n      if (c2 !== c1) {\n        hostSetElementText(container, c2);\n      }\n    } else {\n      if (prevShapeFlag & 16) {\n        if (shapeFlag & 16) {\n          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n        } else {\n          unmountChildren(c1, parentComponent, parentSuspense, true);\n        }\n      } else {\n        if (prevShapeFlag & 8) {\n          hostSetElementText(container, \"\");\n        }\n        if (shapeFlag & 16) {\n          mountChildren(c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n        }\n      }\n    }\n  };\n  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {\n    c1 = c1 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR;\n    c2 = c2 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR;\n    const oldLength = c1.length;\n    const newLength = c2.length;\n    const commonLength = Math.min(oldLength, newLength);\n    let i;\n    for (i = 0; i < commonLength; i++) {\n      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);\n      patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n    }\n    if (oldLength > newLength) {\n      unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);\n    } else {\n      mountChildren(c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, commonLength);\n    }\n  };\n  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {\n    let i = 0;\n    const l2 = c2.length;\n    let e1 = c1.length - 1;\n    let e2 = l2 - 1;\n    while (i <= e1 && i <= e2) {\n      const n1 = c1[i];\n      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);\n      if (isSameVNodeType(n1, n2)) {\n        patch(n1, n2, container, null, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n      } else {\n        break;\n      }\n      i++;\n    }\n    while (i <= e1 && i <= e2) {\n      const n1 = c1[e1];\n      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);\n      if (isSameVNodeType(n1, n2)) {\n        patch(n1, n2, container, null, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n      } else {\n        break;\n      }\n      e1--;\n      e2--;\n    }\n    if (i > e1) {\n      if (i <= e2) {\n        const nextPos = e2 + 1;\n        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;\n        while (i <= e2) {\n          patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n          i++;\n        }\n      }\n    } else if (i > e2) {\n      while (i <= e1) {\n        unmount(c1[i], parentComponent, parentSuspense, true);\n        i++;\n      }\n    } else {\n      const s1 = i;\n      const s2 = i;\n      const keyToNewIndexMap = /* @__PURE__ */new Map();\n      for (i = s2; i <= e2; i++) {\n        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);\n        if (nextChild.key != null) {\n          if ( true && keyToNewIndexMap.has(nextChild.key)) {\n            warn$1(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);\n          }\n          keyToNewIndexMap.set(nextChild.key, i);\n        }\n      }\n      let j;\n      let patched = 0;\n      const toBePatched = e2 - s2 + 1;\n      let moved = false;\n      let maxNewIndexSoFar = 0;\n      const newIndexToOldIndexMap = new Array(toBePatched);\n      for (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0;\n      for (i = s1; i <= e1; i++) {\n        const prevChild = c1[i];\n        if (patched >= toBePatched) {\n          unmount(prevChild, parentComponent, parentSuspense, true);\n          continue;\n        }\n        let newIndex;\n        if (prevChild.key != null) {\n          newIndex = keyToNewIndexMap.get(prevChild.key);\n        } else {\n          for (j = s2; j <= e2; j++) {\n            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {\n              newIndex = j;\n              break;\n            }\n          }\n        }\n        if (newIndex === void 0) {\n          unmount(prevChild, parentComponent, parentSuspense, true);\n        } else {\n          newIndexToOldIndexMap[newIndex - s2] = i + 1;\n          if (newIndex >= maxNewIndexSoFar) {\n            maxNewIndexSoFar = newIndex;\n          } else {\n            moved = true;\n          }\n          patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n          patched++;\n        }\n      }\n      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR;\n      j = increasingNewIndexSequence.length - 1;\n      for (i = toBePatched - 1; i >= 0; i--) {\n        const nextIndex = s2 + i;\n        const nextChild = c2[nextIndex];\n        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;\n        if (newIndexToOldIndexMap[i] === 0) {\n          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);\n        } else if (moved) {\n          if (j < 0 || i !== increasingNewIndexSequence[j]) {\n            move(nextChild, container, anchor, 2);\n          } else {\n            j--;\n          }\n        }\n      }\n    }\n  };\n  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {\n    const {\n      el,\n      type,\n      transition,\n      children,\n      shapeFlag\n    } = vnode;\n    if (shapeFlag & 6) {\n      move(vnode.component.subTree, container, anchor, moveType);\n      return;\n    }\n    if (shapeFlag & 128) {\n      vnode.suspense.move(container, anchor, moveType);\n      return;\n    }\n    if (shapeFlag & 64) {\n      type.move(vnode, container, anchor, internals);\n      return;\n    }\n    if (type === Fragment) {\n      hostInsert(el, container, anchor);\n      for (let i = 0; i < children.length; i++) {\n        move(children[i], container, anchor, moveType);\n      }\n      hostInsert(vnode.anchor, container, anchor);\n      return;\n    }\n    if (type === Static) {\n      moveStaticNode(vnode, container, anchor);\n      return;\n    }\n    const needTransition2 = moveType !== 2 && shapeFlag & 1 && transition;\n    if (needTransition2) {\n      if (moveType === 0) {\n        transition.beforeEnter(el);\n        hostInsert(el, container, anchor);\n        queuePostRenderEffect(() => transition.enter(el), parentSuspense);\n      } else {\n        const {\n          leave,\n          delayLeave,\n          afterLeave\n        } = transition;\n        const remove2 = () => hostInsert(el, container, anchor);\n        const performLeave = () => {\n          leave(el, () => {\n            remove2();\n            afterLeave && afterLeave();\n          });\n        };\n        if (delayLeave) {\n          delayLeave(el, remove2, performLeave);\n        } else {\n          performLeave();\n        }\n      }\n    } else {\n      hostInsert(el, container, anchor);\n    }\n  };\n  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {\n    const {\n      type,\n      props,\n      ref,\n      children,\n      dynamicChildren,\n      shapeFlag,\n      patchFlag,\n      dirs,\n      cacheIndex\n    } = vnode;\n    if (patchFlag === -2) {\n      optimized = false;\n    }\n    if (ref != null) {\n      setRef(ref, null, parentSuspense, vnode, true);\n    }\n    if (cacheIndex != null) {\n      parentComponent.renderCache[cacheIndex] = void 0;\n    }\n    if (shapeFlag & 256) {\n      parentComponent.ctx.deactivate(vnode);\n      return;\n    }\n    const shouldInvokeDirs = shapeFlag & 1 && dirs;\n    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);\n    let vnodeHook;\n    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {\n      invokeVNodeHook(vnodeHook, parentComponent, vnode);\n    }\n    if (shapeFlag & 6) {\n      unmountComponent(vnode.component, parentSuspense, doRemove);\n    } else {\n      if (shapeFlag & 128) {\n        vnode.suspense.unmount(parentSuspense, doRemove);\n        return;\n      }\n      if (shouldInvokeDirs) {\n        invokeDirectiveHook(vnode, null, parentComponent, \"beforeUnmount\");\n      }\n      if (shapeFlag & 64) {\n        vnode.type.remove(vnode, parentComponent, parentSuspense, internals, doRemove);\n      } else if (dynamicChildren &&\n      // #5154\n      // when v-once is used inside a block, setBlockTracking(-1) marks the\n      // parent block with hasOnce: true\n      // so that it doesn't take the fast path during unmount - otherwise\n      // components nested in v-once are never unmounted.\n      !dynamicChildren.hasOnce && (\n      // #1153: fast path should not be taken for non-stable (v-for) fragments\n      type !== Fragment || patchFlag > 0 && patchFlag & 64)) {\n        unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);\n      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {\n        unmountChildren(children, parentComponent, parentSuspense);\n      }\n      if (doRemove) {\n        remove(vnode);\n      }\n    }\n    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {\n      queuePostRenderEffect(() => {\n        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\n        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, \"unmounted\");\n      }, parentSuspense);\n    }\n  };\n  const remove = vnode => {\n    const {\n      type,\n      el,\n      anchor,\n      transition\n    } = vnode;\n    if (type === Fragment) {\n      if ( true && vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {\n        vnode.children.forEach(child => {\n          if (child.type === Comment) {\n            hostRemove(child.el);\n          } else {\n            remove(child);\n          }\n        });\n      } else {\n        removeFragment(el, anchor);\n      }\n      return;\n    }\n    if (type === Static) {\n      removeStaticNode(vnode);\n      return;\n    }\n    const performRemove = () => {\n      hostRemove(el);\n      if (transition && !transition.persisted && transition.afterLeave) {\n        transition.afterLeave();\n      }\n    };\n    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {\n      const {\n        leave,\n        delayLeave\n      } = transition;\n      const performLeave = () => leave(el, performRemove);\n      if (delayLeave) {\n        delayLeave(vnode.el, performRemove, performLeave);\n      } else {\n        performLeave();\n      }\n    } else {\n      performRemove();\n    }\n  };\n  const removeFragment = (cur, end) => {\n    let next;\n    while (cur !== end) {\n      next = hostNextSibling(cur);\n      hostRemove(cur);\n      cur = next;\n    }\n    hostRemove(end);\n  };\n  const unmountComponent = (instance, parentSuspense, doRemove) => {\n    if ( true && instance.type.__hmrId) {\n      unregisterHMR(instance);\n    }\n    const {\n      bum,\n      scope,\n      job,\n      subTree,\n      um,\n      m,\n      a\n    } = instance;\n    invalidateMount(m);\n    invalidateMount(a);\n    if (bum) {\n      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(bum);\n    }\n    scope.stop();\n    if (job) {\n      job.flags |= 8;\n      unmount(subTree, instance, parentSuspense, doRemove);\n    }\n    if (um) {\n      queuePostRenderEffect(um, parentSuspense);\n    }\n    queuePostRenderEffect(() => {\n      instance.isUnmounted = true;\n    }, parentSuspense);\n    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {\n      parentSuspense.deps--;\n      if (parentSuspense.deps === 0) {\n        parentSuspense.resolve();\n      }\n    }\n    if (true) {\n      devtoolsComponentRemoved(instance);\n    }\n  };\n  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {\n    for (let i = start; i < children.length; i++) {\n      unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);\n    }\n  };\n  const getNextHostNode = vnode => {\n    if (vnode.shapeFlag & 6) {\n      return getNextHostNode(vnode.component.subTree);\n    }\n    if (vnode.shapeFlag & 128) {\n      return vnode.suspense.next();\n    }\n    const el = hostNextSibling(vnode.anchor || vnode.el);\n    const teleportEnd = el && el[TeleportEndKey];\n    return teleportEnd ? hostNextSibling(teleportEnd) : el;\n  };\n  let isFlushing = false;\n  const render = (vnode, container, namespace) => {\n    if (vnode == null) {\n      if (container._vnode) {\n        unmount(container._vnode, null, null, true);\n      }\n    } else {\n      patch(container._vnode || null, vnode, container, null, null, null, namespace);\n    }\n    container._vnode = vnode;\n    if (!isFlushing) {\n      isFlushing = true;\n      flushPreFlushCbs();\n      flushPostFlushCbs();\n      isFlushing = false;\n    }\n  };\n  const internals = {\n    p: patch,\n    um: unmount,\n    m: move,\n    r: remove,\n    mt: mountComponent,\n    mc: mountChildren,\n    pc: patchChildren,\n    pbc: patchBlockChildren,\n    n: getNextHostNode,\n    o: options\n  };\n  let hydrate;\n  let hydrateNode;\n  if (createHydrationFns) {\n    [hydrate, hydrateNode] = createHydrationFns(internals);\n  }\n  return {\n    render,\n    hydrate,\n    createApp: createAppAPI(render, hydrate)\n  };\n}\nfunction resolveChildrenNamespace({\n  type,\n  props\n}, currentNamespace) {\n  return currentNamespace === \"svg\" && type === \"foreignObject\" || currentNamespace === \"mathml\" && type === \"annotation-xml\" && props && props.encoding && props.encoding.includes(\"html\") ? void 0 : currentNamespace;\n}\nfunction toggleRecurse({\n  effect,\n  job\n}, allowed) {\n  if (allowed) {\n    effect.flags |= 32;\n    job.flags |= 4;\n  } else {\n    effect.flags &= ~32;\n    job.flags &= ~4;\n  }\n}\nfunction needTransition(parentSuspense, transition) {\n  return (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;\n}\nfunction traverseStaticChildren(n1, n2, shallow = false) {\n  const ch1 = n1.children;\n  const ch2 = n2.children;\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(ch1) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(ch2)) {\n    for (let i = 0; i < ch1.length; i++) {\n      const c1 = ch1[i];\n      let c2 = ch2[i];\n      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {\n        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {\n          c2 = ch2[i] = cloneIfMounted(ch2[i]);\n          c2.el = c1.el;\n        }\n        if (!shallow && c2.patchFlag !== -2) traverseStaticChildren(c1, c2);\n      }\n      if (c2.type === Text) {\n        c2.el = c1.el;\n      }\n      if ( true && c2.type === Comment && !c2.el) {\n        c2.el = c1.el;\n      }\n    }\n  }\n}\nfunction getSequence(arr) {\n  const p = arr.slice();\n  const result = [0];\n  let i, j, u, v, c;\n  const len = arr.length;\n  for (i = 0; i < len; i++) {\n    const arrI = arr[i];\n    if (arrI !== 0) {\n      j = result[result.length - 1];\n      if (arr[j] < arrI) {\n        p[i] = j;\n        result.push(i);\n        continue;\n      }\n      u = 0;\n      v = result.length - 1;\n      while (u < v) {\n        c = u + v >> 1;\n        if (arr[result[c]] < arrI) {\n          u = c + 1;\n        } else {\n          v = c;\n        }\n      }\n      if (arrI < arr[result[u]]) {\n        if (u > 0) {\n          p[i] = result[u - 1];\n        }\n        result[u] = i;\n      }\n    }\n  }\n  u = result.length;\n  v = result[u - 1];\n  while (u-- > 0) {\n    result[u] = v;\n    v = p[v];\n  }\n  return result;\n}\nfunction locateNonHydratedAsyncRoot(instance) {\n  const subComponent = instance.subTree.component;\n  if (subComponent) {\n    if (subComponent.asyncDep && !subComponent.asyncResolved) {\n      return subComponent;\n    } else {\n      return locateNonHydratedAsyncRoot(subComponent);\n    }\n  }\n}\nfunction invalidateMount(hooks) {\n  if (hooks) {\n    for (let i = 0; i < hooks.length; i++) hooks[i].flags |= 8;\n  }\n}\nconst ssrContextKey = Symbol.for(\"v-scx\");\nconst useSSRContext = () => {\n  {\n    const ctx = inject(ssrContextKey);\n    if (!ctx) {\n       true && warn$1(`Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`);\n    }\n    return ctx;\n  }\n};\nfunction watchEffect(effect, options) {\n  return doWatch(effect, null, options);\n}\nfunction watchPostEffect(effect, options) {\n  return doWatch(effect, null,  true ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, options, {\n    flush: \"post\"\n  }) : 0);\n}\nfunction watchSyncEffect(effect, options) {\n  return doWatch(effect, null,  true ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, options, {\n    flush: \"sync\"\n  }) : 0);\n}\nfunction watch(source, cb, options) {\n  if ( true && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(cb)) {\n    warn$1(`\\`watch(fn, options?)\\` signature has been moved to a separate API. Use \\`watchEffect(fn, options?)\\` instead. \\`watch\\` now only supports \\`watch(source, cb, options?) signature.`);\n  }\n  return doWatch(source, cb, options);\n}\nfunction doWatch(source, cb, options = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ) {\n  const {\n    immediate,\n    deep,\n    flush,\n    once\n  } = options;\n  if ( true && !cb) {\n    if (immediate !== void 0) {\n      warn$1(`watch() \"immediate\" option is only respected when using the watch(source, callback, options?) signature.`);\n    }\n    if (deep !== void 0) {\n      warn$1(`watch() \"deep\" option is only respected when using the watch(source, callback, options?) signature.`);\n    }\n    if (once !== void 0) {\n      warn$1(`watch() \"once\" option is only respected when using the watch(source, callback, options?) signature.`);\n    }\n  }\n  const baseWatchOptions = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, options);\n  if (true) baseWatchOptions.onWarn = warn$1;\n  let ssrCleanup;\n  if (isInSSRComponentSetup) {\n    if (flush === \"sync\") {\n      const ctx = useSSRContext();\n      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);\n    } else if (!cb || immediate) {\n      baseWatchOptions.once = true;\n    } else {\n      const watchStopHandle = () => {};\n      watchStopHandle.stop = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP;\n      watchStopHandle.resume = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP;\n      watchStopHandle.pause = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP;\n      return watchStopHandle;\n    }\n  }\n  const instance = currentInstance;\n  baseWatchOptions.call = (fn, type, args) => callWithAsyncErrorHandling(fn, instance, type, args);\n  let isPre = false;\n  if (flush === \"post\") {\n    baseWatchOptions.scheduler = job => {\n      queuePostRenderEffect(job, instance && instance.suspense);\n    };\n  } else if (flush !== \"sync\") {\n    isPre = true;\n    baseWatchOptions.scheduler = (job, isFirstRun) => {\n      if (isFirstRun) {\n        job();\n      } else {\n        queueJob(job);\n      }\n    };\n  }\n  baseWatchOptions.augmentJob = job => {\n    if (cb) {\n      job.flags |= 4;\n    }\n    if (isPre) {\n      job.flags |= 2;\n      if (instance) {\n        job.id = instance.uid;\n        job.i = instance;\n      }\n    }\n  };\n  const watchHandle = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.watch)(source, cb, baseWatchOptions);\n  if (ssrCleanup) ssrCleanup.push(watchHandle);\n  return watchHandle;\n}\nfunction instanceWatch(source, value, options) {\n  const publicThis = this.proxy;\n  const getter = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(source) ? source.includes(\".\") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);\n  let cb;\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value)) {\n    cb = value;\n  } else {\n    cb = value.handler;\n    options = value;\n  }\n  const reset = setCurrentInstance(this);\n  const res = doWatch(getter, cb.bind(publicThis), options);\n  reset();\n  return res;\n}\nfunction createPathGetter(ctx, path) {\n  const segments = path.split(\".\");\n  return () => {\n    let cur = ctx;\n    for (let i = 0; i < segments.length && cur; i++) {\n      cur = cur[segments[i]];\n    }\n    return cur;\n  };\n}\nfunction useModel(props, name, options = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ) {\n  const i = getCurrentInstance();\n  if ( true && !i) {\n    warn$1(`useModel() called without active instance.`);\n    return (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ref)();\n  }\n  if ( true && !i.propsOptions[0][name]) {\n    warn$1(`useModel() called with prop \"${name}\" which is not declared.`);\n    return (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ref)();\n  }\n  const camelizedName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(name);\n  const hyphenatedName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(name);\n  const modifiers = getModelModifiers(props, name);\n  const res = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.customRef)((track, trigger) => {\n    let localValue;\n    let prevSetValue = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;\n    let prevEmittedValue;\n    watchSyncEffect(() => {\n      const propValue = props[name];\n      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasChanged)(localValue, propValue)) {\n        localValue = propValue;\n        trigger();\n      }\n    });\n    return {\n      get() {\n        track();\n        return options.get ? options.get(localValue) : localValue;\n      },\n      set(value) {\n        const emittedValue = options.set ? options.set(value) : value;\n        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasChanged)(emittedValue, localValue) && !(prevSetValue !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasChanged)(value, prevSetValue))) {\n          return;\n        }\n        const rawProps = i.vnode.props;\n        if (!(rawProps && (\n        // check if parent has passed v-model\n        name in rawProps || camelizedName in rawProps || hyphenatedName in rawProps) && (`onUpdate:${name}` in rawProps || `onUpdate:${camelizedName}` in rawProps || `onUpdate:${hyphenatedName}` in rawProps))) {\n          localValue = value;\n          trigger();\n        }\n        i.emit(`update:${name}`, emittedValue);\n        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasChanged)(value, emittedValue) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasChanged)(value, prevSetValue) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasChanged)(emittedValue, prevEmittedValue)) {\n          trigger();\n        }\n        prevSetValue = value;\n        prevEmittedValue = emittedValue;\n      }\n    };\n  });\n  res[Symbol.iterator] = () => {\n    let i2 = 0;\n    return {\n      next() {\n        if (i2 < 2) {\n          return {\n            value: i2++ ? modifiers || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ : res,\n            done: false\n          };\n        } else {\n          return {\n            done: true\n          };\n        }\n      }\n    };\n  };\n  return res;\n}\nconst getModelModifiers = (props, modelName) => {\n  return modelName === \"modelValue\" || modelName === \"model-value\" ? props.modelModifiers : props[`${modelName}Modifiers`] || props[`${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(modelName)}Modifiers`] || props[`${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(modelName)}Modifiers`];\n};\nfunction emit(instance, event, ...rawArgs) {\n  if (instance.isUnmounted) return;\n  const props = instance.vnode.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;\n  if (true) {\n    const {\n      emitsOptions,\n      propsOptions: [propsOptions]\n    } = instance;\n    if (emitsOptions) {\n      if (!(event in emitsOptions) && true) {\n        if (!propsOptions || !((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(event)) in propsOptions)) {\n          warn$1(`Component emitted event \"${event}\" but it is neither declared in the emits option nor as an \"${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(event))}\" prop.`);\n        }\n      } else {\n        const validator = emitsOptions[event];\n        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(validator)) {\n          const isValid = validator(...rawArgs);\n          if (!isValid) {\n            warn$1(`Invalid event arguments: event validation failed for event \"${event}\".`);\n          }\n        }\n      }\n    }\n  }\n  let args = rawArgs;\n  const isModelListener = event.startsWith(\"update:\");\n  const modifiers = isModelListener && getModelModifiers(props, event.slice(7));\n  if (modifiers) {\n    if (modifiers.trim) {\n      args = rawArgs.map(a => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(a) ? a.trim() : a);\n    }\n    if (modifiers.number) {\n      args = rawArgs.map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseToNumber);\n    }\n  }\n  if (true) {\n    devtoolsComponentEmit(instance, event, args);\n  }\n  if (true) {\n    const lowerCaseEvent = event.toLowerCase();\n    if (lowerCaseEvent !== event && props[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)(lowerCaseEvent)]) {\n      warn$1(`Event \"${lowerCaseEvent}\" is emitted in component ${formatComponentName(instance, instance.type)} but the handler is registered for \"${event}\". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use \"${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(event)}\" instead of \"${event}\".`);\n    }\n  }\n  let handlerName;\n  let handler = props[handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)(event)] ||\n  // also try camelCase event handler (#2249)\n  props[handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(event))];\n  if (!handler && isModelListener) {\n    handler = props[handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(event))];\n  }\n  if (handler) {\n    callWithAsyncErrorHandling(handler, instance, 6, args);\n  }\n  const onceHandler = props[handlerName + `Once`];\n  if (onceHandler) {\n    if (!instance.emitted) {\n      instance.emitted = {};\n    } else if (instance.emitted[handlerName]) {\n      return;\n    }\n    instance.emitted[handlerName] = true;\n    callWithAsyncErrorHandling(onceHandler, instance, 6, args);\n  }\n}\nfunction normalizeEmitsOptions(comp, appContext, asMixin = false) {\n  const cache = appContext.emitsCache;\n  const cached = cache.get(comp);\n  if (cached !== void 0) {\n    return cached;\n  }\n  const raw = comp.emits;\n  let normalized = {};\n  let hasExtends = false;\n  if (__VUE_OPTIONS_API__ && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(comp)) {\n    const extendEmits = raw2 => {\n      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);\n      if (normalizedFromExtend) {\n        hasExtends = true;\n        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(normalized, normalizedFromExtend);\n      }\n    };\n    if (!asMixin && appContext.mixins.length) {\n      appContext.mixins.forEach(extendEmits);\n    }\n    if (comp.extends) {\n      extendEmits(comp.extends);\n    }\n    if (comp.mixins) {\n      comp.mixins.forEach(extendEmits);\n    }\n  }\n  if (!raw && !hasExtends) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(comp)) {\n      cache.set(comp, null);\n    }\n    return null;\n  }\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(raw)) {\n    raw.forEach(key => normalized[key] = null);\n  } else {\n    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(normalized, raw);\n  }\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(comp)) {\n    cache.set(comp, normalized);\n  }\n  return normalized;\n}\nfunction isEmitListener(options, key) {\n  if (!options || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key)) {\n    return false;\n  }\n  key = key.slice(2).replace(/Once$/, \"\");\n  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(options, key[0].toLowerCase() + key.slice(1)) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(options, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key)) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(options, key);\n}\nlet accessedAttrs = false;\nfunction markAttrsAccessed() {\n  accessedAttrs = true;\n}\nfunction renderComponentRoot(instance) {\n  const {\n    type: Component,\n    vnode,\n    proxy,\n    withProxy,\n    propsOptions: [propsOptions],\n    slots,\n    attrs,\n    emit,\n    render,\n    renderCache,\n    props,\n    data,\n    setupState,\n    ctx,\n    inheritAttrs\n  } = instance;\n  const prev = setCurrentRenderingInstance(instance);\n  let result;\n  let fallthroughAttrs;\n  if (true) {\n    accessedAttrs = false;\n  }\n  try {\n    if (vnode.shapeFlag & 4) {\n      const proxyToUse = withProxy || proxy;\n      const thisProxy =  true && setupState.__isScriptSetup ? new Proxy(proxyToUse, {\n        get(target, key, receiver) {\n          warn$1(`Property '${String(key)}' was accessed via 'this'. Avoid using 'this' in templates.`);\n          return Reflect.get(target, key, receiver);\n        }\n      }) : proxyToUse;\n      result = normalizeVNode(render.call(thisProxy, proxyToUse, renderCache,  true ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(props) : 0, setupState, data, ctx));\n      fallthroughAttrs = attrs;\n    } else {\n      const render2 = Component;\n      if ( true && attrs === props) {\n        markAttrsAccessed();\n      }\n      result = normalizeVNode(render2.length > 1 ? render2( true ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(props) : 0,  true ? {\n        get attrs() {\n          markAttrsAccessed();\n          return (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(attrs);\n        },\n        slots,\n        emit\n      } : 0) : render2( true ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(props) : 0, null));\n      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);\n    }\n  } catch (err) {\n    blockStack.length = 0;\n    handleError(err, instance, 1);\n    result = createVNode(Comment);\n  }\n  let root = result;\n  let setRoot = void 0;\n  if ( true && result.patchFlag > 0 && result.patchFlag & 2048) {\n    [root, setRoot] = getChildRoot(result);\n  }\n  if (fallthroughAttrs && inheritAttrs !== false) {\n    const keys = Object.keys(fallthroughAttrs);\n    const {\n      shapeFlag\n    } = root;\n    if (keys.length) {\n      if (shapeFlag & (1 | 6)) {\n        if (propsOptions && keys.some(_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isModelListener)) {\n          fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);\n        }\n        root = cloneVNode(root, fallthroughAttrs, false, true);\n      } else if ( true && !accessedAttrs && root.type !== Comment) {\n        const allAttrs = Object.keys(attrs);\n        const eventAttrs = [];\n        const extraAttrs = [];\n        for (let i = 0, l = allAttrs.length; i < l; i++) {\n          const key = allAttrs[i];\n          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key)) {\n            if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isModelListener)(key)) {\n              eventAttrs.push(key[2].toLowerCase() + key.slice(3));\n            }\n          } else {\n            extraAttrs.push(key);\n          }\n        }\n        if (extraAttrs.length) {\n          warn$1(`Extraneous non-props attributes (${extraAttrs.join(\", \")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`);\n        }\n        if (eventAttrs.length) {\n          warn$1(`Extraneous non-emits event listeners (${eventAttrs.join(\", \")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the \"emits\" option.`);\n        }\n      }\n    }\n  }\n  if (vnode.dirs) {\n    if ( true && !isElementRoot(root)) {\n      warn$1(`Runtime directive used on component with non-element root node. The directives will not function as intended.`);\n    }\n    root = cloneVNode(root, null, false, true);\n    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;\n  }\n  if (vnode.transition) {\n    if ( true && !isElementRoot(root)) {\n      warn$1(`Component inside <Transition> renders non-element root node that cannot be animated.`);\n    }\n    setTransitionHooks(root, vnode.transition);\n  }\n  if ( true && setRoot) {\n    setRoot(root);\n  } else {\n    result = root;\n  }\n  setCurrentRenderingInstance(prev);\n  return result;\n}\nconst getChildRoot = vnode => {\n  const rawChildren = vnode.children;\n  const dynamicChildren = vnode.dynamicChildren;\n  const childRoot = filterSingleRoot(rawChildren, false);\n  if (!childRoot) {\n    return [vnode, void 0];\n  } else if ( true && childRoot.patchFlag > 0 && childRoot.patchFlag & 2048) {\n    return getChildRoot(childRoot);\n  }\n  const index = rawChildren.indexOf(childRoot);\n  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;\n  const setRoot = updatedRoot => {\n    rawChildren[index] = updatedRoot;\n    if (dynamicChildren) {\n      if (dynamicIndex > -1) {\n        dynamicChildren[dynamicIndex] = updatedRoot;\n      } else if (updatedRoot.patchFlag > 0) {\n        vnode.dynamicChildren = [...dynamicChildren, updatedRoot];\n      }\n    }\n  };\n  return [normalizeVNode(childRoot), setRoot];\n};\nfunction filterSingleRoot(children, recurse = true) {\n  let singleRoot;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (isVNode(child)) {\n      if (child.type !== Comment || child.children === \"v-if\") {\n        if (singleRoot) {\n          return;\n        } else {\n          singleRoot = child;\n          if ( true && recurse && singleRoot.patchFlag > 0 && singleRoot.patchFlag & 2048) {\n            return filterSingleRoot(singleRoot.children);\n          }\n        }\n      }\n    } else {\n      return;\n    }\n  }\n  return singleRoot;\n}\nconst getFunctionalFallthrough = attrs => {\n  let res;\n  for (const key in attrs) {\n    if (key === \"class\" || key === \"style\" || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key)) {\n      (res || (res = {}))[key] = attrs[key];\n    }\n  }\n  return res;\n};\nconst filterModelListeners = (attrs, props) => {\n  const res = {};\n  for (const key in attrs) {\n    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isModelListener)(key) || !(key.slice(9) in props)) {\n      res[key] = attrs[key];\n    }\n  }\n  return res;\n};\nconst isElementRoot = vnode => {\n  return vnode.shapeFlag & (6 | 1) || vnode.type === Comment;\n};\nfunction shouldUpdateComponent(prevVNode, nextVNode, optimized) {\n  const {\n    props: prevProps,\n    children: prevChildren,\n    component\n  } = prevVNode;\n  const {\n    props: nextProps,\n    children: nextChildren,\n    patchFlag\n  } = nextVNode;\n  const emits = component.emitsOptions;\n  if ( true && (prevChildren || nextChildren) && isHmrUpdating) {\n    return true;\n  }\n  if (nextVNode.dirs || nextVNode.transition) {\n    return true;\n  }\n  if (optimized && patchFlag >= 0) {\n    if (patchFlag & 1024) {\n      return true;\n    }\n    if (patchFlag & 16) {\n      if (!prevProps) {\n        return !!nextProps;\n      }\n      return hasPropsChanged(prevProps, nextProps, emits);\n    } else if (patchFlag & 8) {\n      const dynamicProps = nextVNode.dynamicProps;\n      for (let i = 0; i < dynamicProps.length; i++) {\n        const key = dynamicProps[i];\n        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {\n          return true;\n        }\n      }\n    }\n  } else {\n    if (prevChildren || nextChildren) {\n      if (!nextChildren || !nextChildren.$stable) {\n        return true;\n      }\n    }\n    if (prevProps === nextProps) {\n      return false;\n    }\n    if (!prevProps) {\n      return !!nextProps;\n    }\n    if (!nextProps) {\n      return true;\n    }\n    return hasPropsChanged(prevProps, nextProps, emits);\n  }\n  return false;\n}\nfunction hasPropsChanged(prevProps, nextProps, emitsOptions) {\n  const nextKeys = Object.keys(nextProps);\n  if (nextKeys.length !== Object.keys(prevProps).length) {\n    return true;\n  }\n  for (let i = 0; i < nextKeys.length; i++) {\n    const key = nextKeys[i];\n    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction updateHOCHostEl({\n  vnode,\n  parent\n}, el) {\n  while (parent) {\n    const root = parent.subTree;\n    if (root.suspense && root.suspense.activeBranch === vnode) {\n      root.el = vnode.el;\n    }\n    if (root === vnode) {\n      (vnode = parent.vnode).el = el;\n      parent = parent.parent;\n    } else {\n      break;\n    }\n  }\n}\nconst isSuspense = type => type.__isSuspense;\nlet suspenseId = 0;\nconst SuspenseImpl = {\n  name: \"Suspense\",\n  // In order to make Suspense tree-shakable, we need to avoid importing it\n  // directly in the renderer. The renderer checks for the __isSuspense flag\n  // on a vnode's type and calls the `process` method, passing in renderer\n  // internals.\n  __isSuspense: true,\n  process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {\n    if (n1 == null) {\n      mountSuspense(n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals);\n    } else {\n      if (parentSuspense && parentSuspense.deps > 0 && !n1.suspense.isInFallback) {\n        n2.suspense = n1.suspense;\n        n2.suspense.vnode = n2;\n        n2.el = n1.el;\n        return;\n      }\n      patchSuspense(n1, n2, container, anchor, parentComponent, namespace, slotScopeIds, optimized, rendererInternals);\n    }\n  },\n  hydrate: hydrateSuspense,\n  normalize: normalizeSuspenseChildren\n};\nconst Suspense = SuspenseImpl;\nfunction triggerEvent(vnode, name) {\n  const eventListener = vnode.props && vnode.props[name];\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(eventListener)) {\n    eventListener();\n  }\n}\nfunction mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {\n  const {\n    p: patch,\n    o: {\n      createElement\n    }\n  } = rendererInternals;\n  const hiddenContainer = createElement(\"div\");\n  const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, namespace, slotScopeIds, optimized, rendererInternals);\n  patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, namespace, slotScopeIds);\n  if (suspense.deps > 0) {\n    triggerEvent(vnode, \"onPending\");\n    triggerEvent(vnode, \"onFallback\");\n    patch(null, vnode.ssFallback, container, anchor, parentComponent, null,\n    // fallback tree will not have suspense context\n    namespace, slotScopeIds);\n    setActiveBranch(suspense, vnode.ssFallback);\n  } else {\n    suspense.resolve(false, true);\n  }\n}\nfunction patchSuspense(n1, n2, container, anchor, parentComponent, namespace, slotScopeIds, optimized, {\n  p: patch,\n  um: unmount,\n  o: {\n    createElement\n  }\n}) {\n  const suspense = n2.suspense = n1.suspense;\n  suspense.vnode = n2;\n  n2.el = n1.el;\n  const newBranch = n2.ssContent;\n  const newFallback = n2.ssFallback;\n  const {\n    activeBranch,\n    pendingBranch,\n    isInFallback,\n    isHydrating\n  } = suspense;\n  if (pendingBranch) {\n    suspense.pendingBranch = newBranch;\n    if (isSameVNodeType(newBranch, pendingBranch)) {\n      patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, namespace, slotScopeIds, optimized);\n      if (suspense.deps <= 0) {\n        suspense.resolve();\n      } else if (isInFallback) {\n        if (!isHydrating) {\n          patch(activeBranch, newFallback, container, anchor, parentComponent, null,\n          // fallback tree will not have suspense context\n          namespace, slotScopeIds, optimized);\n          setActiveBranch(suspense, newFallback);\n        }\n      }\n    } else {\n      suspense.pendingId = suspenseId++;\n      if (isHydrating) {\n        suspense.isHydrating = false;\n        suspense.activeBranch = pendingBranch;\n      } else {\n        unmount(pendingBranch, parentComponent, suspense);\n      }\n      suspense.deps = 0;\n      suspense.effects.length = 0;\n      suspense.hiddenContainer = createElement(\"div\");\n      if (isInFallback) {\n        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, namespace, slotScopeIds, optimized);\n        if (suspense.deps <= 0) {\n          suspense.resolve();\n        } else {\n          patch(activeBranch, newFallback, container, anchor, parentComponent, null,\n          // fallback tree will not have suspense context\n          namespace, slotScopeIds, optimized);\n          setActiveBranch(suspense, newFallback);\n        }\n      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\n        patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, namespace, slotScopeIds, optimized);\n        suspense.resolve(true);\n      } else {\n        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, namespace, slotScopeIds, optimized);\n        if (suspense.deps <= 0) {\n          suspense.resolve();\n        }\n      }\n    }\n  } else {\n    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\n      patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, namespace, slotScopeIds, optimized);\n      setActiveBranch(suspense, newBranch);\n    } else {\n      triggerEvent(n2, \"onPending\");\n      suspense.pendingBranch = newBranch;\n      if (newBranch.shapeFlag & 512) {\n        suspense.pendingId = newBranch.component.suspenseId;\n      } else {\n        suspense.pendingId = suspenseId++;\n      }\n      patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, namespace, slotScopeIds, optimized);\n      if (suspense.deps <= 0) {\n        suspense.resolve();\n      } else {\n        const {\n          timeout,\n          pendingId\n        } = suspense;\n        if (timeout > 0) {\n          setTimeout(() => {\n            if (suspense.pendingId === pendingId) {\n              suspense.fallback(newFallback);\n            }\n          }, timeout);\n        } else if (timeout === 0) {\n          suspense.fallback(newFallback);\n        }\n      }\n    }\n  }\n}\nlet hasWarned = false;\nfunction createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, namespace, slotScopeIds, optimized, rendererInternals, isHydrating = false) {\n  if ( true && !hasWarned) {\n    hasWarned = true;\n    console[console.info ? \"info\" : \"log\"](`<Suspense> is an experimental feature and its API will likely change.`);\n  }\n  const {\n    p: patch,\n    m: move,\n    um: unmount,\n    n: next,\n    o: {\n      parentNode,\n      remove\n    }\n  } = rendererInternals;\n  let parentSuspenseId;\n  const isSuspensible = isVNodeSuspensible(vnode);\n  if (isSuspensible) {\n    if (parentSuspense && parentSuspense.pendingBranch) {\n      parentSuspenseId = parentSuspense.pendingId;\n      parentSuspense.deps++;\n    }\n  }\n  const timeout = vnode.props ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber)(vnode.props.timeout) : void 0;\n  if (true) {\n    assertNumber(timeout, `Suspense timeout`);\n  }\n  const initialAnchor = anchor;\n  const suspense = {\n    vnode,\n    parent: parentSuspense,\n    parentComponent,\n    namespace,\n    container,\n    hiddenContainer,\n    deps: 0,\n    pendingId: suspenseId++,\n    timeout: typeof timeout === \"number\" ? timeout : -1,\n    activeBranch: null,\n    pendingBranch: null,\n    isInFallback: !isHydrating,\n    isHydrating,\n    isUnmounted: false,\n    effects: [],\n    resolve(resume = false, sync = false) {\n      if (true) {\n        if (!resume && !suspense.pendingBranch) {\n          throw new Error(`suspense.resolve() is called without a pending branch.`);\n        }\n        if (suspense.isUnmounted) {\n          throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);\n        }\n      }\n      const {\n        vnode: vnode2,\n        activeBranch,\n        pendingBranch,\n        pendingId,\n        effects,\n        parentComponent: parentComponent2,\n        container: container2\n      } = suspense;\n      let delayEnter = false;\n      if (suspense.isHydrating) {\n        suspense.isHydrating = false;\n      } else if (!resume) {\n        delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === \"out-in\";\n        if (delayEnter) {\n          activeBranch.transition.afterLeave = () => {\n            if (pendingId === suspense.pendingId) {\n              move(pendingBranch, container2, anchor === initialAnchor ? next(activeBranch) : anchor, 0);\n              queuePostFlushCb(effects);\n            }\n          };\n        }\n        if (activeBranch) {\n          if (parentNode(activeBranch.el) === container2) {\n            anchor = next(activeBranch);\n          }\n          unmount(activeBranch, parentComponent2, suspense, true);\n        }\n        if (!delayEnter) {\n          move(pendingBranch, container2, anchor, 0);\n        }\n      }\n      setActiveBranch(suspense, pendingBranch);\n      suspense.pendingBranch = null;\n      suspense.isInFallback = false;\n      let parent = suspense.parent;\n      let hasUnresolvedAncestor = false;\n      while (parent) {\n        if (parent.pendingBranch) {\n          parent.effects.push(...effects);\n          hasUnresolvedAncestor = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n      if (!hasUnresolvedAncestor && !delayEnter) {\n        queuePostFlushCb(effects);\n      }\n      suspense.effects = [];\n      if (isSuspensible) {\n        if (parentSuspense && parentSuspense.pendingBranch && parentSuspenseId === parentSuspense.pendingId) {\n          parentSuspense.deps--;\n          if (parentSuspense.deps === 0 && !sync) {\n            parentSuspense.resolve();\n          }\n        }\n      }\n      triggerEvent(vnode2, \"onResolve\");\n    },\n    fallback(fallbackVNode) {\n      if (!suspense.pendingBranch) {\n        return;\n      }\n      const {\n        vnode: vnode2,\n        activeBranch,\n        parentComponent: parentComponent2,\n        container: container2,\n        namespace: namespace2\n      } = suspense;\n      triggerEvent(vnode2, \"onFallback\");\n      const anchor2 = next(activeBranch);\n      const mountFallback = () => {\n        if (!suspense.isInFallback) {\n          return;\n        }\n        patch(null, fallbackVNode, container2, anchor2, parentComponent2, null,\n        // fallback tree will not have suspense context\n        namespace2, slotScopeIds, optimized);\n        setActiveBranch(suspense, fallbackVNode);\n      };\n      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === \"out-in\";\n      if (delayEnter) {\n        activeBranch.transition.afterLeave = mountFallback;\n      }\n      suspense.isInFallback = true;\n      unmount(activeBranch, parentComponent2, null,\n      // no suspense so unmount hooks fire now\n      true\n      // shouldRemove\n      );\n      if (!delayEnter) {\n        mountFallback();\n      }\n    },\n    move(container2, anchor2, type) {\n      suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);\n      suspense.container = container2;\n    },\n    next() {\n      return suspense.activeBranch && next(suspense.activeBranch);\n    },\n    registerDep(instance, setupRenderEffect, optimized2) {\n      const isInPendingSuspense = !!suspense.pendingBranch;\n      if (isInPendingSuspense) {\n        suspense.deps++;\n      }\n      const hydratedEl = instance.vnode.el;\n      instance.asyncDep.catch(err => {\n        handleError(err, instance, 0);\n      }).then(asyncSetupResult => {\n        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {\n          return;\n        }\n        instance.asyncResolved = true;\n        const {\n          vnode: vnode2\n        } = instance;\n        if (true) {\n          pushWarningContext(vnode2);\n        }\n        handleSetupResult(instance, asyncSetupResult, false);\n        if (hydratedEl) {\n          vnode2.el = hydratedEl;\n        }\n        const placeholder = !hydratedEl && instance.subTree.el;\n        setupRenderEffect(instance, vnode2,\n        // component may have been moved before resolve.\n        // if this is not a hydration, instance.subTree will be the comment\n        // placeholder.\n        parentNode(hydratedEl || instance.subTree.el),\n        // anchor will not be used if this is hydration, so only need to\n        // consider the comment placeholder case.\n        hydratedEl ? null : next(instance.subTree), suspense, namespace, optimized2);\n        if (placeholder) {\n          remove(placeholder);\n        }\n        updateHOCHostEl(instance, vnode2.el);\n        if (true) {\n          popWarningContext();\n        }\n        if (isInPendingSuspense && --suspense.deps === 0) {\n          suspense.resolve();\n        }\n      });\n    },\n    unmount(parentSuspense2, doRemove) {\n      suspense.isUnmounted = true;\n      if (suspense.activeBranch) {\n        unmount(suspense.activeBranch, parentComponent, parentSuspense2, doRemove);\n      }\n      if (suspense.pendingBranch) {\n        unmount(suspense.pendingBranch, parentComponent, parentSuspense2, doRemove);\n      }\n    }\n  };\n  return suspense;\n}\nfunction hydrateSuspense(node, vnode, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals, hydrateNode) {\n  const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode,\n  // eslint-disable-next-line no-restricted-globals\n  document.createElement(\"div\"), null, namespace, slotScopeIds, optimized, rendererInternals, true);\n  const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, slotScopeIds, optimized);\n  if (suspense.deps === 0) {\n    suspense.resolve(false, true);\n  }\n  return result;\n}\nfunction normalizeSuspenseChildren(vnode) {\n  const {\n    shapeFlag,\n    children\n  } = vnode;\n  const isSlotChildren = shapeFlag & 32;\n  vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);\n  vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);\n}\nfunction normalizeSuspenseSlot(s) {\n  let block;\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(s)) {\n    const trackBlock = isBlockTreeEnabled && s._c;\n    if (trackBlock) {\n      s._d = false;\n      openBlock();\n    }\n    s = s();\n    if (trackBlock) {\n      s._d = true;\n      block = currentBlock;\n      closeBlock();\n    }\n  }\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(s)) {\n    const singleChild = filterSingleRoot(s);\n    if ( true && !singleChild && s.filter(child => child !== NULL_DYNAMIC_COMPONENT).length > 0) {\n      warn$1(`<Suspense> slots expect a single root node.`);\n    }\n    s = singleChild;\n  }\n  s = normalizeVNode(s);\n  if (block && !s.dynamicChildren) {\n    s.dynamicChildren = block.filter(c => c !== s);\n  }\n  return s;\n}\nfunction queueEffectWithSuspense(fn, suspense) {\n  if (suspense && suspense.pendingBranch) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(fn)) {\n      suspense.effects.push(...fn);\n    } else {\n      suspense.effects.push(fn);\n    }\n  } else {\n    queuePostFlushCb(fn);\n  }\n}\nfunction setActiveBranch(suspense, branch) {\n  suspense.activeBranch = branch;\n  const {\n    vnode,\n    parentComponent\n  } = suspense;\n  let el = branch.el;\n  while (!el && branch.component) {\n    branch = branch.component.subTree;\n    el = branch.el;\n  }\n  vnode.el = el;\n  if (parentComponent && parentComponent.subTree === vnode) {\n    parentComponent.vnode.el = el;\n    updateHOCHostEl(parentComponent, el);\n  }\n}\nfunction isVNodeSuspensible(vnode) {\n  const suspensible = vnode.props && vnode.props.suspensible;\n  return suspensible != null && suspensible !== false;\n}\nconst Fragment = Symbol.for(\"v-fgt\");\nconst Text = Symbol.for(\"v-txt\");\nconst Comment = Symbol.for(\"v-cmt\");\nconst Static = Symbol.for(\"v-stc\");\nconst blockStack = [];\nlet currentBlock = null;\nfunction openBlock(disableTracking = false) {\n  blockStack.push(currentBlock = disableTracking ? null : []);\n}\nfunction closeBlock() {\n  blockStack.pop();\n  currentBlock = blockStack[blockStack.length - 1] || null;\n}\nlet isBlockTreeEnabled = 1;\nfunction setBlockTracking(value) {\n  isBlockTreeEnabled += value;\n  if (value < 0 && currentBlock) {\n    currentBlock.hasOnce = true;\n  }\n}\nfunction setupBlock(vnode) {\n  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR : null;\n  closeBlock();\n  if (isBlockTreeEnabled > 0 && currentBlock) {\n    currentBlock.push(vnode);\n  }\n  return vnode;\n}\nfunction createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {\n  return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true));\n}\nfunction createBlock(type, props, children, patchFlag, dynamicProps) {\n  return setupBlock(createVNode(type, props, children, patchFlag, dynamicProps, true));\n}\nfunction isVNode(value) {\n  return value ? value.__v_isVNode === true : false;\n}\nfunction isSameVNodeType(n1, n2) {\n  if ( true && n2.shapeFlag & 6 && n1.component) {\n    const dirtyInstances = hmrDirtyComponents.get(n2.type);\n    if (dirtyInstances && dirtyInstances.has(n1.component)) {\n      n1.shapeFlag &= ~256;\n      n2.shapeFlag &= ~512;\n      return false;\n    }\n  }\n  return n1.type === n2.type && n1.key === n2.key;\n}\nlet vnodeArgsTransformer;\nfunction transformVNodeArgs(transformer) {\n  vnodeArgsTransformer = transformer;\n}\nconst createVNodeWithArgsTransform = (...args) => {\n  return _createVNode(...(vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args));\n};\nconst normalizeKey = ({\n  key\n}) => key != null ? key : null;\nconst normalizeRef = ({\n  ref,\n  ref_key,\n  ref_for\n}) => {\n  if (typeof ref === \"number\") {\n    ref = \"\" + ref;\n  }\n  return ref != null ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(ref) || (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(ref) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(ref) ? {\n    i: currentRenderingInstance,\n    r: ref,\n    k: ref_key,\n    f: !!ref_for\n  } : ref : null;\n};\nfunction createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {\n  const vnode = {\n    __v_isVNode: true,\n    __v_skip: true,\n    type,\n    props,\n    key: props && normalizeKey(props),\n    ref: props && normalizeRef(props),\n    scopeId: currentScopeId,\n    slotScopeIds: null,\n    children,\n    component: null,\n    suspense: null,\n    ssContent: null,\n    ssFallback: null,\n    dirs: null,\n    transition: null,\n    el: null,\n    anchor: null,\n    target: null,\n    targetStart: null,\n    targetAnchor: null,\n    staticCount: 0,\n    shapeFlag,\n    patchFlag,\n    dynamicProps,\n    dynamicChildren: null,\n    appContext: null,\n    ctx: currentRenderingInstance\n  };\n  if (needFullChildrenNormalization) {\n    normalizeChildren(vnode, children);\n    if (shapeFlag & 128) {\n      type.normalize(vnode);\n    }\n  } else if (children) {\n    vnode.shapeFlag |= (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(children) ? 8 : 16;\n  }\n  if ( true && vnode.key !== vnode.key) {\n    warn$1(`VNode created with invalid key (NaN). VNode type:`, vnode.type);\n  }\n  if (isBlockTreeEnabled > 0 &&\n  // avoid a block node from tracking itself\n  !isBlockNode &&\n  // has current parent block\n  currentBlock && (\n  // presence of a patch flag indicates this node needs patching on updates.\n  // component nodes also should always be patched, because even if the\n  // component doesn't need to update, it needs to persist the instance on to\n  // the next vnode so that it can be properly unmounted later.\n  vnode.patchFlag > 0 || shapeFlag & 6) &&\n  // the EVENTS flag is only for hydration and if it is the only flag, the\n  // vnode should not be considered dynamic due to handler caching.\n  vnode.patchFlag !== 32) {\n    currentBlock.push(vnode);\n  }\n  return vnode;\n}\nconst createVNode =  true ? createVNodeWithArgsTransform : 0;\nfunction _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {\n  if (!type || type === NULL_DYNAMIC_COMPONENT) {\n    if ( true && !type) {\n      warn$1(`Invalid vnode type when creating vnode: ${type}.`);\n    }\n    type = Comment;\n  }\n  if (isVNode(type)) {\n    const cloned = cloneVNode(type, props, true\n    /* mergeRef: true */);\n    if (children) {\n      normalizeChildren(cloned, children);\n    }\n    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {\n      if (cloned.shapeFlag & 6) {\n        currentBlock[currentBlock.indexOf(type)] = cloned;\n      } else {\n        currentBlock.push(cloned);\n      }\n    }\n    cloned.patchFlag = -2;\n    return cloned;\n  }\n  if (isClassComponent(type)) {\n    type = type.__vccOpts;\n  }\n  if (props) {\n    props = guardReactiveProps(props);\n    let {\n      class: klass,\n      style\n    } = props;\n    if (klass && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(klass)) {\n      props.class = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeClass)(klass);\n    }\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(style)) {\n      if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isProxy)(style) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(style)) {\n        style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, style);\n      }\n      props.style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeStyle)(style);\n    }\n  }\n  const shapeFlag = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(type) ? 4 : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(type) ? 2 : 0;\n  if ( true && shapeFlag & 4 && (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isProxy)(type)) {\n    type = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(type);\n    warn$1(`Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with \\`markRaw\\` or using \\`shallowRef\\` instead of \\`ref\\`.`, `\nComponent that was made reactive: `, type);\n  }\n  return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);\n}\nfunction guardReactiveProps(props) {\n  if (!props) return null;\n  return (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isProxy)(props) || isInternalObject(props) ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, props) : props;\n}\nfunction cloneVNode(vnode, extraProps, mergeRef = false, cloneTransition = false) {\n  const {\n    props,\n    ref,\n    patchFlag,\n    children,\n    transition\n  } = vnode;\n  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;\n  const cloned = {\n    __v_isVNode: true,\n    __v_skip: true,\n    type: vnode.type,\n    props: mergedProps,\n    key: mergedProps && normalizeKey(mergedProps),\n    ref: extraProps && extraProps.ref ?\n    // #2078 in the case of <component :is=\"vnode\" ref=\"extra\"/>\n    // if the vnode itself already has a ref, cloneVNode will need to merge\n    // the refs so the single vnode can be set on multiple refs\n    mergeRef && ref ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(ref) ? ref.concat(normalizeRef(extraProps)) : [ref, normalizeRef(extraProps)] : normalizeRef(extraProps) : ref,\n    scopeId: vnode.scopeId,\n    slotScopeIds: vnode.slotScopeIds,\n    children:  true && patchFlag === -1 && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(children) ? children.map(deepCloneVNode) : children,\n    target: vnode.target,\n    targetStart: vnode.targetStart,\n    targetAnchor: vnode.targetAnchor,\n    staticCount: vnode.staticCount,\n    shapeFlag: vnode.shapeFlag,\n    // if the vnode is cloned with extra props, we can no longer assume its\n    // existing patch flag to be reliable and need to add the FULL_PROPS flag.\n    // note: preserve flag for fragments since they use the flag for children\n    // fast paths only.\n    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,\n    dynamicProps: vnode.dynamicProps,\n    dynamicChildren: vnode.dynamicChildren,\n    appContext: vnode.appContext,\n    dirs: vnode.dirs,\n    transition,\n    // These should technically only be non-null on mounted VNodes. However,\n    // they *should* be copied for kept-alive vnodes. So we just always copy\n    // them since them being non-null during a mount doesn't affect the logic as\n    // they will simply be overwritten.\n    component: vnode.component,\n    suspense: vnode.suspense,\n    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),\n    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),\n    el: vnode.el,\n    anchor: vnode.anchor,\n    ctx: vnode.ctx,\n    ce: vnode.ce\n  };\n  if (transition && cloneTransition) {\n    setTransitionHooks(cloned, transition.clone(cloned));\n  }\n  return cloned;\n}\nfunction deepCloneVNode(vnode) {\n  const cloned = cloneVNode(vnode);\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(vnode.children)) {\n    cloned.children = vnode.children.map(deepCloneVNode);\n  }\n  return cloned;\n}\nfunction createTextVNode(text = \" \", flag = 0) {\n  return createVNode(Text, null, text, flag);\n}\nfunction createStaticVNode(content, numberOfNodes) {\n  const vnode = createVNode(Static, null, content);\n  vnode.staticCount = numberOfNodes;\n  return vnode;\n}\nfunction createCommentVNode(text = \"\", asBlock = false) {\n  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);\n}\nfunction normalizeVNode(child) {\n  if (child == null || typeof child === \"boolean\") {\n    return createVNode(Comment);\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(child)) {\n    return createVNode(Fragment, null,\n    // #3666, avoid reference pollution when reusing vnode\n    child.slice());\n  } else if (typeof child === \"object\") {\n    return cloneIfMounted(child);\n  } else {\n    return createVNode(Text, null, String(child));\n  }\n}\nfunction cloneIfMounted(child) {\n  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);\n}\nfunction normalizeChildren(vnode, children) {\n  let type = 0;\n  const {\n    shapeFlag\n  } = vnode;\n  if (children == null) {\n    children = null;\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(children)) {\n    type = 16;\n  } else if (typeof children === \"object\") {\n    if (shapeFlag & (1 | 64)) {\n      const slot = children.default;\n      if (slot) {\n        slot._c && (slot._d = false);\n        normalizeChildren(vnode, slot());\n        slot._c && (slot._d = true);\n      }\n      return;\n    } else {\n      type = 32;\n      const slotFlag = children._;\n      if (!slotFlag && !isInternalObject(children)) {\n        children._ctx = currentRenderingInstance;\n      } else if (slotFlag === 3 && currentRenderingInstance) {\n        if (currentRenderingInstance.slots._ === 1) {\n          children._ = 1;\n        } else {\n          children._ = 2;\n          vnode.patchFlag |= 1024;\n        }\n      }\n    }\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(children)) {\n    children = {\n      default: children,\n      _ctx: currentRenderingInstance\n    };\n    type = 32;\n  } else {\n    children = String(children);\n    if (shapeFlag & 64) {\n      type = 16;\n      children = [createTextVNode(children)];\n    } else {\n      type = 8;\n    }\n  }\n  vnode.children = children;\n  vnode.shapeFlag |= type;\n}\nfunction mergeProps(...args) {\n  const ret = {};\n  for (let i = 0; i < args.length; i++) {\n    const toMerge = args[i];\n    for (const key in toMerge) {\n      if (key === \"class\") {\n        if (ret.class !== toMerge.class) {\n          ret.class = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeClass)([ret.class, toMerge.class]);\n        }\n      } else if (key === \"style\") {\n        ret.style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeStyle)([ret.style, toMerge.style]);\n      } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key)) {\n        const existing = ret[key];\n        const incoming = toMerge[key];\n        if (incoming && existing !== incoming && !((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(existing) && existing.includes(incoming))) {\n          ret[key] = existing ? [].concat(existing, incoming) : incoming;\n        }\n      } else if (key !== \"\") {\n        ret[key] = toMerge[key];\n      }\n    }\n  }\n  return ret;\n}\nfunction invokeVNodeHook(hook, instance, vnode, prevVNode = null) {\n  callWithAsyncErrorHandling(hook, instance, 7, [vnode, prevVNode]);\n}\nconst emptyAppContext = createAppContext();\nlet uid = 0;\nfunction createComponentInstance(vnode, parent, suspense) {\n  const type = vnode.type;\n  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;\n  const instance = {\n    uid: uid++,\n    vnode,\n    type,\n    parent,\n    appContext,\n    root: null,\n    // to be immediately set\n    next: null,\n    subTree: null,\n    // will be set synchronously right after creation\n    effect: null,\n    update: null,\n    // will be set synchronously right after creation\n    job: null,\n    scope: new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.EffectScope(true\n    /* detached */),\n    render: null,\n    proxy: null,\n    exposed: null,\n    exposeProxy: null,\n    withProxy: null,\n    provides: parent ? parent.provides : Object.create(appContext.provides),\n    ids: parent ? parent.ids : [\"\", 0, 0],\n    accessCache: null,\n    renderCache: [],\n    // local resolved assets\n    components: null,\n    directives: null,\n    // resolved props and emits options\n    propsOptions: normalizePropsOptions(type, appContext),\n    emitsOptions: normalizeEmitsOptions(type, appContext),\n    // emit\n    emit: null,\n    // to be set immediately\n    emitted: null,\n    // props default value\n    propsDefaults: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,\n    // inheritAttrs\n    inheritAttrs: type.inheritAttrs,\n    // state\n    ctx: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,\n    data: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,\n    props: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,\n    attrs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,\n    slots: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,\n    refs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,\n    setupState: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,\n    setupContext: null,\n    // suspense related\n    suspense,\n    suspenseId: suspense ? suspense.pendingId : 0,\n    asyncDep: null,\n    asyncResolved: false,\n    // lifecycle hooks\n    // not using enums here because it results in computed properties\n    isMounted: false,\n    isUnmounted: false,\n    isDeactivated: false,\n    bc: null,\n    c: null,\n    bm: null,\n    m: null,\n    bu: null,\n    u: null,\n    um: null,\n    bum: null,\n    da: null,\n    a: null,\n    rtg: null,\n    rtc: null,\n    ec: null,\n    sp: null\n  };\n  if (true) {\n    instance.ctx = createDevRenderContext(instance);\n  } else {}\n  instance.root = parent ? parent.root : instance;\n  instance.emit = emit.bind(null, instance);\n  if (vnode.ce) {\n    vnode.ce(instance);\n  }\n  return instance;\n}\nlet currentInstance = null;\nconst getCurrentInstance = () => currentInstance || currentRenderingInstance;\nlet internalSetCurrentInstance;\nlet setInSSRSetupState;\n{\n  const g = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.getGlobalThis)();\n  const registerGlobalSetter = (key, setter) => {\n    let setters;\n    if (!(setters = g[key])) setters = g[key] = [];\n    setters.push(setter);\n    return v => {\n      if (setters.length > 1) setters.forEach(set => set(v));else setters[0](v);\n    };\n  };\n  internalSetCurrentInstance = registerGlobalSetter(`__VUE_INSTANCE_SETTERS__`, v => currentInstance = v);\n  setInSSRSetupState = registerGlobalSetter(`__VUE_SSR_SETTERS__`, v => isInSSRComponentSetup = v);\n}\nconst setCurrentInstance = instance => {\n  const prev = currentInstance;\n  internalSetCurrentInstance(instance);\n  instance.scope.on();\n  return () => {\n    instance.scope.off();\n    internalSetCurrentInstance(prev);\n  };\n};\nconst unsetCurrentInstance = () => {\n  currentInstance && currentInstance.scope.off();\n  internalSetCurrentInstance(null);\n};\nconst isBuiltInTag = /* @__PURE__ */(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.makeMap)(\"slot,component\");\nfunction validateComponentName(name, {\n  isNativeTag\n}) {\n  if (isBuiltInTag(name) || isNativeTag(name)) {\n    warn$1(\"Do not use built-in or reserved HTML elements as component id: \" + name);\n  }\n}\nfunction isStatefulComponent(instance) {\n  return instance.vnode.shapeFlag & 4;\n}\nlet isInSSRComponentSetup = false;\nfunction setupComponent(instance, isSSR = false, optimized = false) {\n  isSSR && setInSSRSetupState(isSSR);\n  const {\n    props,\n    children\n  } = instance.vnode;\n  const isStateful = isStatefulComponent(instance);\n  initProps(instance, props, isStateful, isSSR);\n  initSlots(instance, children, optimized);\n  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;\n  isSSR && setInSSRSetupState(false);\n  return setupResult;\n}\nfunction setupStatefulComponent(instance, isSSR) {\n  var _a;\n  const Component = instance.type;\n  if (true) {\n    if (Component.name) {\n      validateComponentName(Component.name, instance.appContext.config);\n    }\n    if (Component.components) {\n      const names = Object.keys(Component.components);\n      for (let i = 0; i < names.length; i++) {\n        validateComponentName(names[i], instance.appContext.config);\n      }\n    }\n    if (Component.directives) {\n      const names = Object.keys(Component.directives);\n      for (let i = 0; i < names.length; i++) {\n        validateDirectiveName(names[i]);\n      }\n    }\n    if (Component.compilerOptions && isRuntimeOnly()) {\n      warn$1(`\"compilerOptions\" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`);\n    }\n  }\n  instance.accessCache = /* @__PURE__ */Object.create(null);\n  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);\n  if (true) {\n    exposePropsOnRenderContext(instance);\n  }\n  const {\n    setup\n  } = Component;\n  if (setup) {\n    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;\n    const reset = setCurrentInstance(instance);\n    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();\n    const setupResult = callWithErrorHandling(setup, instance, 0, [ true ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(instance.props) : 0, setupContext]);\n    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();\n    reset();\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isPromise)(setupResult)) {\n      if (!isAsyncWrapper(instance)) markAsyncBoundary(instance);\n      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);\n      if (isSSR) {\n        return setupResult.then(resolvedResult => {\n          handleSetupResult(instance, resolvedResult, isSSR);\n        }).catch(e => {\n          handleError(e, instance, 0);\n        });\n      } else {\n        instance.asyncDep = setupResult;\n        if ( true && !instance.suspense) {\n          const name = (_a = Component.name) != null ? _a : \"Anonymous\";\n          warn$1(`Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`);\n        }\n      }\n    } else {\n      handleSetupResult(instance, setupResult, isSSR);\n    }\n  } else {\n    finishComponentSetup(instance, isSSR);\n  }\n}\nfunction handleSetupResult(instance, setupResult, isSSR) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(setupResult)) {\n    if (instance.type.__ssrInlineRender) {\n      instance.ssrRender = setupResult;\n    } else {\n      instance.render = setupResult;\n    }\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(setupResult)) {\n    if ( true && isVNode(setupResult)) {\n      warn$1(`setup() should not return VNodes directly - return a render function instead.`);\n    }\n    if (true) {\n      instance.devtoolsRawSetupState = setupResult;\n    }\n    instance.setupState = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.proxyRefs)(setupResult);\n    if (true) {\n      exposeSetupStateOnRenderContext(instance);\n    }\n  } else if ( true && setupResult !== void 0) {\n    warn$1(`setup() should return an object. Received: ${setupResult === null ? \"null\" : typeof setupResult}`);\n  }\n  finishComponentSetup(instance, isSSR);\n}\nlet compile;\nlet installWithProxy;\nfunction registerRuntimeCompiler(_compile) {\n  compile = _compile;\n  installWithProxy = i => {\n    if (i.render._rc) {\n      i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);\n    }\n  };\n}\nconst isRuntimeOnly = () => !compile;\nfunction finishComponentSetup(instance, isSSR, skipOptions) {\n  const Component = instance.type;\n  if (!instance.render) {\n    if (!isSSR && compile && !Component.render) {\n      const template = Component.template || resolveMergedOptions(instance).template;\n      if (template) {\n        if (true) {\n          startMeasure(instance, `compile`);\n        }\n        const {\n          isCustomElement,\n          compilerOptions\n        } = instance.appContext.config;\n        const {\n          delimiters,\n          compilerOptions: componentCompilerOptions\n        } = Component;\n        const finalCompilerOptions = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({\n          isCustomElement,\n          delimiters\n        }, compilerOptions), componentCompilerOptions);\n        Component.render = compile(template, finalCompilerOptions);\n        if (true) {\n          endMeasure(instance, `compile`);\n        }\n      }\n    }\n    instance.render = Component.render || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP;\n    if (installWithProxy) {\n      installWithProxy(instance);\n    }\n  }\n  if (__VUE_OPTIONS_API__ && true) {\n    const reset = setCurrentInstance(instance);\n    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();\n    try {\n      applyOptions(instance);\n    } finally {\n      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();\n      reset();\n    }\n  }\n  if ( true && !Component.render && instance.render === _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP && !isSSR) {\n    if (!compile && Component.template) {\n      warn$1(`Component provided template option but runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias \"vue\" to \"vue/dist/vue.esm-bundler.js\".`);\n    } else {\n      warn$1(`Component is missing template or render function: `, Component);\n    }\n  }\n}\nconst attrsProxyHandlers =  true ? {\n  get(target, key) {\n    markAttrsAccessed();\n    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.track)(target, \"get\", \"\");\n    return target[key];\n  },\n  set() {\n    warn$1(`setupContext.attrs is readonly.`);\n    return false;\n  },\n  deleteProperty() {\n    warn$1(`setupContext.attrs is readonly.`);\n    return false;\n  }\n} : 0;\nfunction getSlotsProxy(instance) {\n  return new Proxy(instance.slots, {\n    get(target, key) {\n      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.track)(instance, \"get\", \"$slots\");\n      return target[key];\n    }\n  });\n}\nfunction createSetupContext(instance) {\n  const expose = exposed => {\n    if (true) {\n      if (instance.exposed) {\n        warn$1(`expose() should be called only once per setup().`);\n      }\n      if (exposed != null) {\n        let exposedType = typeof exposed;\n        if (exposedType === \"object\") {\n          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(exposed)) {\n            exposedType = \"array\";\n          } else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(exposed)) {\n            exposedType = \"ref\";\n          }\n        }\n        if (exposedType !== \"object\") {\n          warn$1(`expose() should be passed a plain object, received ${exposedType}.`);\n        }\n      }\n    }\n    instance.exposed = exposed || {};\n  };\n  if (true) {\n    let attrsProxy;\n    let slotsProxy;\n    return Object.freeze({\n      get attrs() {\n        return attrsProxy || (attrsProxy = new Proxy(instance.attrs, attrsProxyHandlers));\n      },\n      get slots() {\n        return slotsProxy || (slotsProxy = getSlotsProxy(instance));\n      },\n      get emit() {\n        return (event, ...args) => instance.emit(event, ...args);\n      },\n      expose\n    });\n  } else {}\n}\nfunction getComponentPublicInstance(instance) {\n  if (instance.exposed) {\n    return instance.exposeProxy || (instance.exposeProxy = new Proxy((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.proxyRefs)((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.markRaw)(instance.exposed)), {\n      get(target, key) {\n        if (key in target) {\n          return target[key];\n        } else if (key in publicPropertiesMap) {\n          return publicPropertiesMap[key](instance);\n        }\n      },\n      has(target, key) {\n        return key in target || key in publicPropertiesMap;\n      }\n    }));\n  } else {\n    return instance.proxy;\n  }\n}\nconst classifyRE = /(?:^|[-_])(\\w)/g;\nconst classify = str => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, \"\");\nfunction getComponentName(Component, includeInferred = true) {\n  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;\n}\nfunction formatComponentName(instance, Component, isRoot = false) {\n  let name = getComponentName(Component);\n  if (!name && Component.__file) {\n    const match = Component.__file.match(/([^/\\\\]+)\\.\\w+$/);\n    if (match) {\n      name = match[1];\n    }\n  }\n  if (!name && instance && instance.parent) {\n    const inferFromRegistry = registry => {\n      for (const key in registry) {\n        if (registry[key] === Component) {\n          return key;\n        }\n      }\n    };\n    name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);\n  }\n  return name ? classify(name) : isRoot ? `App` : `Anonymous`;\n}\nfunction isClassComponent(value) {\n  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value) && \"__vccOpts\" in value;\n}\nconst computed = (getterOrOptions, debugOptions) => {\n  const c = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.computed)(getterOrOptions, debugOptions, isInSSRComponentSetup);\n  if (true) {\n    const i = getCurrentInstance();\n    if (i && i.appContext.config.warnRecursiveComputed) {\n      c._warnRecursive = true;\n    }\n  }\n  return c;\n};\nfunction h(type, propsOrChildren, children) {\n  const l = arguments.length;\n  if (l === 2) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(propsOrChildren) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(propsOrChildren)) {\n      if (isVNode(propsOrChildren)) {\n        return createVNode(type, null, [propsOrChildren]);\n      }\n      return createVNode(type, propsOrChildren);\n    } else {\n      return createVNode(type, null, propsOrChildren);\n    }\n  } else {\n    if (l > 3) {\n      children = Array.prototype.slice.call(arguments, 2);\n    } else if (l === 3 && isVNode(children)) {\n      children = [children];\n    }\n    return createVNode(type, propsOrChildren, children);\n  }\n}\nfunction initCustomFormatter() {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  const vueStyle = {\n    style: \"color:#3ba776\"\n  };\n  const numberStyle = {\n    style: \"color:#1677ff\"\n  };\n  const stringStyle = {\n    style: \"color:#f5222d\"\n  };\n  const keywordStyle = {\n    style: \"color:#eb2f96\"\n  };\n  const formatter = {\n    __vue_custom_formatter: true,\n    header(obj) {\n      if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(obj)) {\n        return null;\n      }\n      if (obj.__isVue) {\n        return [\"div\", vueStyle, `VueInstance`];\n      } else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(obj)) {\n        return [\"div\", {}, [\"span\", vueStyle, genRefFlag(obj)], \"<\",\n        // avoid debugger accessing value affecting behavior\n        formatValue(\"_value\" in obj ? obj._value : obj), `>`];\n      } else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReactive)(obj)) {\n        return [\"div\", {}, [\"span\", vueStyle, (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isShallow)(obj) ? \"ShallowReactive\" : \"Reactive\"], \"<\", formatValue(obj), `>${(0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReadonly)(obj) ? ` (readonly)` : ``}`];\n      } else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReadonly)(obj)) {\n        return [\"div\", {}, [\"span\", vueStyle, (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isShallow)(obj) ? \"ShallowReadonly\" : \"Readonly\"], \"<\", formatValue(obj), \">\"];\n      }\n      return null;\n    },\n    hasBody(obj) {\n      return obj && obj.__isVue;\n    },\n    body(obj) {\n      if (obj && obj.__isVue) {\n        return [\"div\", {}, ...formatInstance(obj.$)];\n      }\n    }\n  };\n  function formatInstance(instance) {\n    const blocks = [];\n    if (instance.type.props && instance.props) {\n      blocks.push(createInstanceBlock(\"props\", (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(instance.props)));\n    }\n    if (instance.setupState !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ) {\n      blocks.push(createInstanceBlock(\"setup\", instance.setupState));\n    }\n    if (instance.data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ) {\n      blocks.push(createInstanceBlock(\"data\", (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(instance.data)));\n    }\n    const computed = extractKeys(instance, \"computed\");\n    if (computed) {\n      blocks.push(createInstanceBlock(\"computed\", computed));\n    }\n    const injected = extractKeys(instance, \"inject\");\n    if (injected) {\n      blocks.push(createInstanceBlock(\"injected\", injected));\n    }\n    blocks.push([\"div\", {}, [\"span\", {\n      style: keywordStyle.style + \";opacity:0.66\"\n    }, \"$ (internal): \"], [\"object\", {\n      object: instance\n    }]]);\n    return blocks;\n  }\n  function createInstanceBlock(type, target) {\n    target = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, target);\n    if (!Object.keys(target).length) {\n      return [\"span\", {}];\n    }\n    return [\"div\", {\n      style: \"line-height:1.25em;margin-bottom:0.6em\"\n    }, [\"div\", {\n      style: \"color:#476582\"\n    }, type], [\"div\", {\n      style: \"padding-left:1.25em\"\n    }, ...Object.keys(target).map(key => {\n      return [\"div\", {}, [\"span\", keywordStyle, key + \": \"], formatValue(target[key], false)];\n    })]];\n  }\n  function formatValue(v, asRaw = true) {\n    if (typeof v === \"number\") {\n      return [\"span\", numberStyle, v];\n    } else if (typeof v === \"string\") {\n      return [\"span\", stringStyle, JSON.stringify(v)];\n    } else if (typeof v === \"boolean\") {\n      return [\"span\", keywordStyle, v];\n    } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(v)) {\n      return [\"object\", {\n        object: asRaw ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(v) : v\n      }];\n    } else {\n      return [\"span\", stringStyle, String(v)];\n    }\n  }\n  function extractKeys(instance, type) {\n    const Comp = instance.type;\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(Comp)) {\n      return;\n    }\n    const extracted = {};\n    for (const key in instance.ctx) {\n      if (isKeyOfType(Comp, key, type)) {\n        extracted[key] = instance.ctx[key];\n      }\n    }\n    return extracted;\n  }\n  function isKeyOfType(Comp, key, type) {\n    const opts = Comp[type];\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(opts) && opts.includes(key) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(opts) && key in opts) {\n      return true;\n    }\n    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {\n      return true;\n    }\n    if (Comp.mixins && Comp.mixins.some(m => isKeyOfType(m, key, type))) {\n      return true;\n    }\n  }\n  function genRefFlag(v) {\n    if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isShallow)(v)) {\n      return `ShallowRef`;\n    }\n    if (v.effect) {\n      return `ComputedRef`;\n    }\n    return `Ref`;\n  }\n  if (window.devtoolsFormatters) {\n    window.devtoolsFormatters.push(formatter);\n  } else {\n    window.devtoolsFormatters = [formatter];\n  }\n}\nfunction withMemo(memo, render, cache, index) {\n  const cached = cache[index];\n  if (cached && isMemoSame(cached, memo)) {\n    return cached;\n  }\n  const ret = render();\n  ret.memo = memo.slice();\n  ret.cacheIndex = index;\n  return cache[index] = ret;\n}\nfunction isMemoSame(cached, memo) {\n  const prev = cached.memo;\n  if (prev.length != memo.length) {\n    return false;\n  }\n  for (let i = 0; i < prev.length; i++) {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasChanged)(prev[i], memo[i])) {\n      return false;\n    }\n  }\n  if (isBlockTreeEnabled > 0 && currentBlock) {\n    currentBlock.push(cached);\n  }\n  return true;\n}\nconst version = \"3.5.7\";\nconst warn =  true ? warn$1 : 0;\nconst ErrorTypeStrings = ErrorTypeStrings$1;\nconst devtools =  true ? devtools$1 : 0;\nconst setDevtoolsHook =  true ? setDevtoolsHook$1 : 0;\nconst _ssrUtils = {\n  createComponentInstance,\n  setupComponent,\n  renderComponentRoot,\n  setCurrentRenderingInstance,\n  isVNode: isVNode,\n  normalizeVNode,\n  getComponentPublicInstance,\n  ensureValidVNode,\n  pushWarningContext,\n  popWarningContext\n};\nconst ssrUtils = _ssrUtils;\nconst resolveFilter = null;\nconst compatUtils = null;\nconst DeprecationTypes = null;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWNvcmUvZGlzdC9ydW50aW1lLWNvcmUuZXNtLWJ1bmRsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDOFY7QUFDMEM7QUFDc0k7QUFDNVk7QUFFbEksTUFBTW1GLEtBQUssR0FBRyxFQUFFO0FBQ2hCLFNBQVNDLGtCQUFrQkEsQ0FBQ0MsS0FBSyxFQUFFO0VBQ2pDRixLQUFLLENBQUNHLElBQUksQ0FBQ0QsS0FBSyxDQUFDO0FBQ25CO0FBQ0EsU0FBU0UsaUJBQWlCQSxDQUFBLEVBQUc7RUFDM0JKLEtBQUssQ0FBQ0ssR0FBRyxDQUFDLENBQUM7QUFDYjtBQUNBLElBQUlDLFNBQVMsR0FBRyxLQUFLO0FBQ3JCLFNBQVNDLE1BQU1BLENBQUNDLEdBQUcsRUFBRSxHQUFHQyxJQUFJLEVBQUU7RUFDNUIsSUFBSUgsU0FBUyxFQUFFO0VBQ2ZBLFNBQVMsR0FBRyxJQUFJO0VBQ2hCekYsOERBQWEsQ0FBQyxDQUFDO0VBQ2YsTUFBTTZGLFFBQVEsR0FBR1YsS0FBSyxDQUFDVyxNQUFNLEdBQUdYLEtBQUssQ0FBQ0EsS0FBSyxDQUFDVyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUNDLFNBQVMsR0FBRyxJQUFJO0VBQ3hFLE1BQU1DLGNBQWMsR0FBR0gsUUFBUSxJQUFJQSxRQUFRLENBQUNJLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDQyxXQUFXO0VBQ3pFLE1BQU1DLEtBQUssR0FBR0MsaUJBQWlCLENBQUMsQ0FBQztFQUNqQyxJQUFJTCxjQUFjLEVBQUU7SUFDbEJNLHFCQUFxQixDQUNuQk4sY0FBYyxFQUNkSCxRQUFRLEVB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bGVzL0B2dWUvcnVudGltZS1jb3JlL2Rpc3QvcnVudGltZS1jb3JlLmVzbS1idW5kbGVyLmpzPzVjNDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIEB2dWUvcnVudGltZS1jb3JlIHYzLjUuN1xuKiAoYykgMjAxOC1wcmVzZW50IFl1eGkgKEV2YW4pIFlvdSBhbmQgVnVlIGNvbnRyaWJ1dG9yc1xuKiBAbGljZW5zZSBNSVRcbioqL1xuaW1wb3J0IHsgcGF1c2VUcmFja2luZywgcmVzZXRUcmFja2luZywgaXNSZWYsIHRvUmF3LCB0cmF2ZXJzZSwgc2hhbGxvd1JlZiwgcmVhZG9ubHksIGlzUmVhY3RpdmUsIHJlZiwgaXNTaGFsbG93LCBzaGFsbG93UmVhZEFycmF5LCB0b1JlYWN0aXZlLCBzaGFsbG93UmVhZG9ubHksIHRyYWNrLCByZWFjdGl2ZSwgc2hhbGxvd1JlYWN0aXZlLCB0cmlnZ2VyLCBSZWFjdGl2ZUVmZmVjdCwgd2F0Y2ggYXMgd2F0Y2gkMSwgY3VzdG9tUmVmLCBpc1Byb3h5LCBwcm94eVJlZnMsIG1hcmtSYXcsIEVmZmVjdFNjb3BlLCBjb21wdXRlZCBhcyBjb21wdXRlZCQxLCBpc1JlYWRvbmx5IH0gZnJvbSAnQHZ1ZS9yZWFjdGl2aXR5JztcbmV4cG9ydCB7IEVmZmVjdFNjb3BlLCBSZWFjdGl2ZUVmZmVjdCwgVHJhY2tPcFR5cGVzLCBUcmlnZ2VyT3BUeXBlcywgY3VzdG9tUmVmLCBlZmZlY3QsIGVmZmVjdFNjb3BlLCBnZXRDdXJyZW50U2NvcGUsIGdldEN1cnJlbnRXYXRjaGVyLCBpc1Byb3h5LCBpc1JlYWN0aXZlLCBpc1JlYWRvbmx5LCBpc1JlZiwgaXNTaGFsbG93LCBtYXJrUmF3LCBvblNjb3BlRGlzcG9zZSwgb25XYXRjaGVyQ2xlYW51cCwgcHJveHlSZWZzLCByZWFjdGl2ZSwgcmVhZG9ubHksIHJlZiwgc2hhbGxvd1JlYWN0aXZlLCBzaGFsbG93UmVhZG9ubHksIHNoYWxsb3dSZWYsIHN0b3AsIHRvUmF3LCB0b1JlZiwgdG9SZWZzLCB0b1ZhbHVlLCB0cmlnZ2VyUmVmLCB1bnJlZiB9IGZyb20gJ0B2dWUvcmVhY3Rpdml0eSc7XG5pbXBvcnQgeyBpc1N0cmluZywgaXNGdW5jdGlvbiwgaXNQcm9taXNlLCBpc0FycmF5LCBFTVBUWV9PQkosIE5PT1AsIGdldEdsb2JhbFRoaXMsIGV4dGVuZCwgaXNCdWlsdEluRGlyZWN0aXZlLCBoYXNPd24sIHJlbW92ZSwgZGVmLCBpc09uLCBpc1Jlc2VydmVkUHJvcCwgbm9ybWFsaXplQ2xhc3MsIHN0cmluZ2lmeVN0eWxlLCBub3JtYWxpemVTdHlsZSwgaXNLbm93blN2Z0F0dHIsIGlzQm9vbGVhbkF0dHIsIGlzS25vd25IdG1sQXR0ciwgaW5jbHVkZUJvb2xlYW5BdHRyLCBpc1JlbmRlcmFibGVBdHRyVmFsdWUsIGdldEVzY2FwZWRDc3NWYXJOYW1lLCBpc09iamVjdCwgaXNSZWdFeHAsIGludm9rZUFycmF5Rm5zLCB0b0hhbmRsZXJLZXksIGNhcGl0YWxpemUsIGNhbWVsaXplLCBpc0dsb2JhbGx5QWxsb3dlZCwgTk8sIGh5cGhlbmF0ZSwgRU1QVFlfQVJSLCB0b1Jhd1R5cGUsIG1ha2VNYXAsIGhhc0NoYW5nZWQsIGxvb3NlVG9OdW1iZXIsIGlzTW9kZWxMaXN0ZW5lciwgdG9OdW1iZXIgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5leHBvcnQgeyBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVByb3BzLCBub3JtYWxpemVTdHlsZSwgdG9EaXNwbGF5U3RyaW5nLCB0b0hhbmRsZXJLZXkgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN0YWNrID0gW107XG5mdW5jdGlvbiBwdXNoV2FybmluZ0NvbnRleHQodm5vZGUpIHtcbiAgc3RhY2sucHVzaCh2bm9kZSk7XG59XG5mdW5jdGlvbiBwb3BXYXJuaW5nQ29udGV4dCgpIHtcbiAgc3RhY2sucG9wKCk7XG59XG5sZXQgaXNXYXJuaW5nID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuJDEobXNnLCAuLi5hcmdzKSB7XG4gIGlmIChpc1dhcm5pbmcpIHJldHVybjtcbiAgaXNXYXJuaW5nID0gdHJ1ZTtcbiAgcGF1c2VUcmFja2luZygpO1xuICBjb25zdCBpbnN0YW5jZSA9IHN0YWNrLmxlbmd0aCA/IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLmNvbXBvbmVudCA6IG51bGw7XG4gIGNvbnN0IGFwcFdhcm5IYW5kbGVyID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcud2FybkhhbmRsZXI7XG4gIGNvbnN0IHRyYWNlID0gZ2V0Q29tcG9uZW50VHJhY2UoKTtcbiAgaWYgKGFwcFdhcm5IYW5kbGVyKSB7XG4gICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKFxuICAgICAgYXBwV2FybkhhbmRsZXIsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDExLFxuICAgICAgW1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgbXNnICsgYXJncy5tYXAoKGEpID0+IHtcbiAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSBhLnRvU3RyaW5nKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChhKSkgIT0gbnVsbCA/IF9iIDogSlNPTi5zdHJpbmdpZnkoYSk7XG4gICAgICAgIH0pLmpvaW4oXCJcIiksXG4gICAgICAgIGluc3RhbmNlICYmIGluc3RhbmNlLnByb3h5LFxuICAgICAgICB0cmFjZS5tYXAoXG4gICAgICAgICAgKHsgdm5vZGUgfSkgPT4gYGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIHZub2RlLnR5cGUpfT5gXG4gICAgICAgICkuam9pbihcIlxcblwiKSxcbiAgICAgICAgdHJhY2VcbiAgICAgIF1cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHdhcm5BcmdzID0gW2BbVnVlIHdhcm5dOiAke21zZ31gLCAuLi5hcmdzXTtcbiAgICBpZiAodHJhY2UubGVuZ3RoICYmIC8vIGF2b2lkIHNwYW1taW5nIGNvbnNvbGUgZHVyaW5nIHRlc3RzXG4gICAgdHJ1ZSkge1xuICAgICAgd2FybkFyZ3MucHVzaChgXG5gLCAuLi5mb3JtYXRUcmFjZSh0cmFjZSkpO1xuICAgIH1cbiAgICBjb25zb2xlLndhcm4oLi4ud2FybkFyZ3MpO1xuICB9XG4gIHJlc2V0VHJhY2tpbmcoKTtcbiAgaXNXYXJuaW5nID0gZmFsc2U7XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRUcmFjZSgpIHtcbiAgbGV0IGN1cnJlbnRWTm9kZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICBpZiAoIWN1cnJlbnRWTm9kZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkU3RhY2sgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnRWTm9kZSkge1xuICAgIGNvbnN0IGxhc3QgPSBub3JtYWxpemVkU3RhY2tbMF07XG4gICAgaWYgKGxhc3QgJiYgbGFzdC52bm9kZSA9PT0gY3VycmVudFZOb2RlKSB7XG4gICAgICBsYXN0LnJlY3Vyc2VDb3VudCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBub3JtYWxpemVkU3RhY2sucHVzaCh7XG4gICAgICAgIHZub2RlOiBjdXJyZW50Vk5vZGUsXG4gICAgICAgIHJlY3Vyc2VDb3VudDogMFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHBhcmVudEluc3RhbmNlID0gY3VycmVudFZOb2RlLmNvbXBvbmVudCAmJiBjdXJyZW50Vk5vZGUuY29tcG9uZW50LnBhcmVudDtcbiAgICBjdXJyZW50Vk5vZGUgPSBwYXJlbnRJbnN0YW5jZSAmJiBwYXJlbnRJbnN0YW5jZS52bm9kZTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZFN0YWNrO1xufVxuZnVuY3Rpb24gZm9ybWF0VHJhY2UodHJhY2UpIHtcbiAgY29uc3QgbG9ncyA9IFtdO1xuICB0cmFjZS5mb3JFYWNoKChlbnRyeSwgaSkgPT4ge1xuICAgIGxvZ3MucHVzaCguLi5pID09PSAwID8gW10gOiBbYFxuYF0sIC4uLmZvcm1hdFRyYWNlRW50cnkoZW50cnkpKTtcbiAgfSk7XG4gIHJldHVybiBsb2dzO1xufVxuZnVuY3Rpb24gZm9ybWF0VHJhY2VFbnRyeSh7IHZub2RlLCByZWN1cnNlQ291bnQgfSkge1xuICBjb25zdCBwb3N0Zml4ID0gcmVjdXJzZUNvdW50ID4gMCA/IGAuLi4gKCR7cmVjdXJzZUNvdW50fSByZWN1cnNpdmUgY2FsbHMpYCA6IGBgO1xuICBjb25zdCBpc1Jvb3QgPSB2bm9kZS5jb21wb25lbnQgPyB2bm9kZS5jb21wb25lbnQucGFyZW50ID09IG51bGwgOiBmYWxzZTtcbiAgY29uc3Qgb3BlbiA9IGAgYXQgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShcbiAgICB2bm9kZS5jb21wb25lbnQsXG4gICAgdm5vZGUudHlwZSxcbiAgICBpc1Jvb3RcbiAgKX1gO1xuICBjb25zdCBjbG9zZSA9IGA+YCArIHBvc3RmaXg7XG4gIHJldHVybiB2bm9kZS5wcm9wcyA/IFtvcGVuLCAuLi5mb3JtYXRQcm9wcyh2bm9kZS5wcm9wcyksIGNsb3NlXSA6IFtvcGVuICsgY2xvc2VdO1xufVxuZnVuY3Rpb24gZm9ybWF0UHJvcHMocHJvcHMpIHtcbiAgY29uc3QgcmVzID0gW107XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wcyk7XG4gIGtleXMuc2xpY2UoMCwgMykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgcmVzLnB1c2goLi4uZm9ybWF0UHJvcChrZXksIHByb3BzW2tleV0pKTtcbiAgfSk7XG4gIGlmIChrZXlzLmxlbmd0aCA+IDMpIHtcbiAgICByZXMucHVzaChgIC4uLmApO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBmb3JtYXRQcm9wKGtleSwgdmFsdWUsIHJhdykge1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09JHt2YWx1ZX1gXTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09JHt2YWx1ZX1gXTtcbiAgfSBlbHNlIGlmIChpc1JlZih2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IGZvcm1hdFByb3Aoa2V5LCB0b1Jhdyh2YWx1ZS52YWx1ZSksIHRydWUpO1xuICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PVJlZjxgLCB2YWx1ZSwgYD5gXTtcbiAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHJldHVybiBbYCR7a2V5fT1mbiR7dmFsdWUubmFtZSA/IGA8JHt2YWx1ZS5uYW1lfT5gIDogYGB9YF07XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XG4gICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09YCwgdmFsdWVdO1xuICB9XG59XG5mdW5jdGlvbiBhc3NlcnROdW1iZXIodmFsLCB0eXBlKSB7XG4gIGlmICghISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkgcmV0dXJuO1xuICBpZiAodmFsID09PSB2b2lkIDApIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCAhPT0gXCJudW1iZXJcIikge1xuICAgIHdhcm4kMShgJHt0eXBlfSBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBnb3QgJHtKU09OLnN0cmluZ2lmeSh2YWwpfS5gKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybiQxKGAke3R5cGV9IGlzIE5hTiAtIHRoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC5gKTtcbiAgfVxufVxuXG5jb25zdCBFcnJvckNvZGVzID0ge1xuICBcIlNFVFVQX0ZVTkNUSU9OXCI6IDAsXG4gIFwiMFwiOiBcIlNFVFVQX0ZVTkNUSU9OXCIsXG4gIFwiUkVOREVSX0ZVTkNUSU9OXCI6IDEsXG4gIFwiMVwiOiBcIlJFTkRFUl9GVU5DVElPTlwiLFxuICBcIk5BVElWRV9FVkVOVF9IQU5ETEVSXCI6IDUsXG4gIFwiNVwiOiBcIk5BVElWRV9FVkVOVF9IQU5ETEVSXCIsXG4gIFwiQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVJcIjogNixcbiAgXCI2XCI6IFwiQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVJcIixcbiAgXCJWTk9ERV9IT09LXCI6IDcsXG4gIFwiN1wiOiBcIlZOT0RFX0hPT0tcIixcbiAgXCJESVJFQ1RJVkVfSE9PS1wiOiA4LFxuICBcIjhcIjogXCJESVJFQ1RJVkVfSE9PS1wiLFxuICBcIlRSQU5TSVRJT05fSE9PS1wiOiA5LFxuICBcIjlcIjogXCJUUkFOU0lUSU9OX0hPT0tcIixcbiAgXCJBUFBfRVJST1JfSEFORExFUlwiOiAxMCxcbiAgXCIxMFwiOiBcIkFQUF9FUlJPUl9IQU5ETEVSXCIsXG4gIFwiQVBQX1dBUk5fSEFORExFUlwiOiAxMSxcbiAgXCIxMVwiOiBcIkFQUF9XQVJOX0hBTkRMRVJcIixcbiAgXCJGVU5DVElPTl9SRUZcIjogMTIsXG4gIFwiMTJcIjogXCJGVU5DVElPTl9SRUZcIixcbiAgXCJBU1lOQ19DT01QT05FTlRfTE9BREVSXCI6IDEzLFxuICBcIjEzXCI6IFwiQVNZTkNfQ09NUE9ORU5UX0xPQURFUlwiLFxuICBcIlNDSEVEVUxFUlwiOiAxNCxcbiAgXCIxNFwiOiBcIlNDSEVEVUxFUlwiLFxuICBcIkNPTVBPTkVOVF9VUERBVEVcIjogMTUsXG4gIFwiMTVcIjogXCJDT01QT05FTlRfVVBEQVRFXCIsXG4gIFwiQVBQX1VOTU9VTlRfQ0xFQU5VUFwiOiAxNixcbiAgXCIxNlwiOiBcIkFQUF9VTk1PVU5UX0NMRUFOVVBcIlxufTtcbmNvbnN0IEVycm9yVHlwZVN0cmluZ3MkMSA9IHtcbiAgW1wic3BcIl06IFwic2VydmVyUHJlZmV0Y2ggaG9va1wiLFxuICBbXCJiY1wiXTogXCJiZWZvcmVDcmVhdGUgaG9va1wiLFxuICBbXCJjXCJdOiBcImNyZWF0ZWQgaG9va1wiLFxuICBbXCJibVwiXTogXCJiZWZvcmVNb3VudCBob29rXCIsXG4gIFtcIm1cIl06IFwibW91bnRlZCBob29rXCIsXG4gIFtcImJ1XCJdOiBcImJlZm9yZVVwZGF0ZSBob29rXCIsXG4gIFtcInVcIl06IFwidXBkYXRlZFwiLFxuICBbXCJidW1cIl06IFwiYmVmb3JlVW5tb3VudCBob29rXCIsXG4gIFtcInVtXCJdOiBcInVubW91bnRlZCBob29rXCIsXG4gIFtcImFcIl06IFwiYWN0aXZhdGVkIGhvb2tcIixcbiAgW1wiZGFcIl06IFwiZGVhY3RpdmF0ZWQgaG9va1wiLFxuICBbXCJlY1wiXTogXCJlcnJvckNhcHR1cmVkIGhvb2tcIixcbiAgW1wicnRjXCJdOiBcInJlbmRlclRyYWNrZWQgaG9va1wiLFxuICBbXCJydGdcIl06IFwicmVuZGVyVHJpZ2dlcmVkIGhvb2tcIixcbiAgWzBdOiBcInNldHVwIGZ1bmN0aW9uXCIsXG4gIFsxXTogXCJyZW5kZXIgZnVuY3Rpb25cIixcbiAgWzJdOiBcIndhdGNoZXIgZ2V0dGVyXCIsXG4gIFszXTogXCJ3YXRjaGVyIGNhbGxiYWNrXCIsXG4gIFs0XTogXCJ3YXRjaGVyIGNsZWFudXAgZnVuY3Rpb25cIixcbiAgWzVdOiBcIm5hdGl2ZSBldmVudCBoYW5kbGVyXCIsXG4gIFs2XTogXCJjb21wb25lbnQgZXZlbnQgaGFuZGxlclwiLFxuICBbN106IFwidm5vZGUgaG9va1wiLFxuICBbOF06IFwiZGlyZWN0aXZlIGhvb2tcIixcbiAgWzldOiBcInRyYW5zaXRpb24gaG9va1wiLFxuICBbMTBdOiBcImFwcCBlcnJvckhhbmRsZXJcIixcbiAgWzExXTogXCJhcHAgd2FybkhhbmRsZXJcIixcbiAgWzEyXTogXCJyZWYgZnVuY3Rpb25cIixcbiAgWzEzXTogXCJhc3luYyBjb21wb25lbnQgbG9hZGVyXCIsXG4gIFsxNF06IFwic2NoZWR1bGVyIGZsdXNoXCIsXG4gIFsxNV06IFwiY29tcG9uZW50IHVwZGF0ZVwiLFxuICBbMTZdOiBcImFwcCB1bm1vdW50IGNsZWFudXAgZnVuY3Rpb25cIlxufTtcbmZ1bmN0aW9uIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXJncyA/IGZuKC4uLmFyZ3MpIDogZm4oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xuICBpZiAoaXNGdW5jdGlvbihmbikpIHtcbiAgICBjb25zdCByZXMgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKTtcbiAgICBpZiAocmVzICYmIGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGlmIChpc0FycmF5KGZuKSkge1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlcy5wdXNoKGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuW2ldLCBpbnN0YW5jZSwgdHlwZSwgYXJncykpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuJDEoXG4gICAgICBgSW52YWxpZCB2YWx1ZSB0eXBlIHBhc3NlZCB0byBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZygpOiAke3R5cGVvZiBmbn1gXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSwgdGhyb3dJbkRldiA9IHRydWUpIHtcbiAgY29uc3QgY29udGV4dFZOb2RlID0gaW5zdGFuY2UgPyBpbnN0YW5jZS52bm9kZSA6IG51bGw7XG4gIGNvbnN0IHsgZXJyb3JIYW5kbGVyLCB0aHJvd1VuaGFuZGxlZEVycm9ySW5Qcm9kdWN0aW9uIH0gPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZyB8fCBFTVBUWV9PQko7XG4gIGlmIChpbnN0YW5jZSkge1xuICAgIGxldCBjdXIgPSBpbnN0YW5jZS5wYXJlbnQ7XG4gICAgY29uc3QgZXhwb3NlZEluc3RhbmNlID0gaW5zdGFuY2UucHJveHk7XG4gICAgY29uc3QgZXJyb3JJbmZvID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IEVycm9yVHlwZVN0cmluZ3MkMVt0eXBlXSA6IGBodHRwczovL3Z1ZWpzLm9yZy9lcnJvci1yZWZlcmVuY2UvI3J1bnRpbWUtJHt0eXBlfWA7XG4gICAgd2hpbGUgKGN1cikge1xuICAgICAgY29uc3QgZXJyb3JDYXB0dXJlZEhvb2tzID0gY3VyLmVjO1xuICAgICAgaWYgKGVycm9yQ2FwdHVyZWRIb29rcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVycm9yQ2FwdHVyZWRIb29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlcnJvckNhcHR1cmVkSG9va3NbaV0oZXJyLCBleHBvc2VkSW5zdGFuY2UsIGVycm9ySW5mbykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdXIgPSBjdXIucGFyZW50O1xuICAgIH1cbiAgICBpZiAoZXJyb3JIYW5kbGVyKSB7XG4gICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZXJyb3JIYW5kbGVyLCBudWxsLCAxMCwgW1xuICAgICAgICBlcnIsXG4gICAgICAgIGV4cG9zZWRJbnN0YW5jZSxcbiAgICAgICAgZXJyb3JJbmZvXG4gICAgICBdKTtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYsIHRocm93VW5oYW5kbGVkRXJyb3JJblByb2R1Y3Rpb24pO1xufVxuZnVuY3Rpb24gbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYgPSB0cnVlLCB0aHJvd0luUHJvZCA9IGZhbHNlKSB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgY29uc3QgaW5mbyA9IEVycm9yVHlwZVN0cmluZ3MkMVt0eXBlXTtcbiAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICBwdXNoV2FybmluZ0NvbnRleHQoY29udGV4dFZOb2RlKTtcbiAgICB9XG4gICAgd2FybiQxKGBVbmhhbmRsZWQgZXJyb3Ike2luZm8gPyBgIGR1cmluZyBleGVjdXRpb24gb2YgJHtpbmZvfWAgOiBgYH1gKTtcbiAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgIH1cbiAgICBpZiAodGhyb3dJbkRldikge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHRocm93SW5Qcm9kKSB7XG4gICAgdGhyb3cgZXJyO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5sZXQgaXNGbHVzaGluZyA9IGZhbHNlO1xubGV0IGlzRmx1c2hQZW5kaW5nID0gZmFsc2U7XG5jb25zdCBxdWV1ZSA9IFtdO1xubGV0IGZsdXNoSW5kZXggPSAwO1xuY29uc3QgcGVuZGluZ1Bvc3RGbHVzaENicyA9IFtdO1xubGV0IGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XG5sZXQgcG9zdEZsdXNoSW5kZXggPSAwO1xuY29uc3QgcmVzb2x2ZWRQcm9taXNlID0gLyogQF9fUFVSRV9fICovIFByb21pc2UucmVzb2x2ZSgpO1xubGV0IGN1cnJlbnRGbHVzaFByb21pc2UgPSBudWxsO1xuY29uc3QgUkVDVVJTSU9OX0xJTUlUID0gMTAwO1xuZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgY29uc3QgcCA9IGN1cnJlbnRGbHVzaFByb21pc2UgfHwgcmVzb2x2ZWRQcm9taXNlO1xuICByZXR1cm4gZm4gPyBwLnRoZW4odGhpcyA/IGZuLmJpbmQodGhpcykgOiBmbikgOiBwO1xufVxuZnVuY3Rpb24gZmluZEluc2VydGlvbkluZGV4KGlkKSB7XG4gIGxldCBzdGFydCA9IGlzRmx1c2hpbmcgPyBmbHVzaEluZGV4ICsgMSA6IDA7XG4gIGxldCBlbmQgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgIGNvbnN0IG1pZGRsZSA9IHN0YXJ0ICsgZW5kID4+PiAxO1xuICAgIGNvbnN0IG1pZGRsZUpvYiA9IHF1ZXVlW21pZGRsZV07XG4gICAgY29uc3QgbWlkZGxlSm9iSWQgPSBnZXRJZChtaWRkbGVKb2IpO1xuICAgIGlmIChtaWRkbGVKb2JJZCA8IGlkIHx8IG1pZGRsZUpvYklkID09PSBpZCAmJiBtaWRkbGVKb2IuZmxhZ3MgJiAyKSB7XG4gICAgICBzdGFydCA9IG1pZGRsZSArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZCA9IG1pZGRsZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0YXJ0O1xufVxuZnVuY3Rpb24gcXVldWVKb2Ioam9iKSB7XG4gIGlmICghKGpvYi5mbGFncyAmIDEpKSB7XG4gICAgY29uc3Qgam9iSWQgPSBnZXRJZChqb2IpO1xuICAgIGNvbnN0IGxhc3RKb2IgPSBxdWV1ZVtxdWV1ZS5sZW5ndGggLSAxXTtcbiAgICBpZiAoIWxhc3RKb2IgfHwgLy8gZmFzdCBwYXRoIHdoZW4gdGhlIGpvYiBpZCBpcyBsYXJnZXIgdGhhbiB0aGUgdGFpbFxuICAgICEoam9iLmZsYWdzICYgMikgJiYgam9iSWQgPj0gZ2V0SWQobGFzdEpvYikpIHtcbiAgICAgIHF1ZXVlLnB1c2goam9iKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcXVldWUuc3BsaWNlKGZpbmRJbnNlcnRpb25JbmRleChqb2JJZCksIDAsIGpvYik7XG4gICAgfVxuICAgIGpvYi5mbGFncyB8PSAxO1xuICAgIHF1ZXVlRmx1c2goKTtcbiAgfVxufVxuZnVuY3Rpb24gcXVldWVGbHVzaCgpIHtcbiAgaWYgKCFpc0ZsdXNoaW5nICYmICFpc0ZsdXNoUGVuZGluZykge1xuICAgIGlzRmx1c2hQZW5kaW5nID0gdHJ1ZTtcbiAgICBjdXJyZW50Rmx1c2hQcm9taXNlID0gcmVzb2x2ZWRQcm9taXNlLnRoZW4oZmx1c2hKb2JzKTtcbiAgfVxufVxuZnVuY3Rpb24gcXVldWVQb3N0Rmx1c2hDYihjYikge1xuICBpZiAoIWlzQXJyYXkoY2IpKSB7XG4gICAgaWYgKGFjdGl2ZVBvc3RGbHVzaENicyAmJiBjYi5pZCA9PT0gLTEpIHtcbiAgICAgIGFjdGl2ZVBvc3RGbHVzaENicy5zcGxpY2UocG9zdEZsdXNoSW5kZXggKyAxLCAwLCBjYik7XG4gICAgfSBlbHNlIGlmICghKGNiLmZsYWdzICYgMSkpIHtcbiAgICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMucHVzaChjYik7XG4gICAgICBjYi5mbGFncyB8PSAxO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwZW5kaW5nUG9zdEZsdXNoQ2JzLnB1c2goLi4uY2IpO1xuICB9XG4gIHF1ZXVlRmx1c2goKTtcbn1cbmZ1bmN0aW9uIGZsdXNoUHJlRmx1c2hDYnMoaW5zdGFuY2UsIHNlZW4sIGkgPSBpc0ZsdXNoaW5nID8gZmx1c2hJbmRleCArIDEgOiAwKSB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgc2VlbiA9IHNlZW4gfHwgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgfVxuICBmb3IgKDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2IgPSBxdWV1ZVtpXTtcbiAgICBpZiAoY2IgJiYgY2IuZmxhZ3MgJiAyKSB7XG4gICAgICBpZiAoaW5zdGFuY2UgJiYgY2IuaWQgIT09IGluc3RhbmNlLnVpZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBjYikpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSwgMSk7XG4gICAgICBpLS07XG4gICAgICBpZiAoY2IuZmxhZ3MgJiA0KSB7XG4gICAgICAgIGNiLmZsYWdzICY9IH4xO1xuICAgICAgfVxuICAgICAgY2IoKTtcbiAgICAgIGlmICghKGNiLmZsYWdzICYgNCkpIHtcbiAgICAgICAgY2IuZmxhZ3MgJj0gfjE7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBmbHVzaFBvc3RGbHVzaENicyhzZWVuKSB7XG4gIGlmIChwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xuICAgIGNvbnN0IGRlZHVwZWQgPSBbLi4ubmV3IFNldChwZW5kaW5nUG9zdEZsdXNoQ2JzKV0uc29ydChcbiAgICAgIChhLCBiKSA9PiBnZXRJZChhKSAtIGdldElkKGIpXG4gICAgKTtcbiAgICBwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCA9IDA7XG4gICAgaWYgKGFjdGl2ZVBvc3RGbHVzaENicykge1xuICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnB1c2goLi4uZGVkdXBlZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFjdGl2ZVBvc3RGbHVzaENicyA9IGRlZHVwZWQ7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgIHNlZW4gPSBzZWVuIHx8IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGZvciAocG9zdEZsdXNoSW5kZXggPSAwOyBwb3N0Rmx1c2hJbmRleCA8IGFjdGl2ZVBvc3RGbHVzaENicy5sZW5ndGg7IHBvc3RGbHVzaEluZGV4KyspIHtcbiAgICAgIGNvbnN0IGNiID0gYWN0aXZlUG9zdEZsdXNoQ2JzW3Bvc3RGbHVzaEluZGV4XTtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBjYikpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoY2IuZmxhZ3MgJiA0KSB7XG4gICAgICAgIGNiLmZsYWdzICY9IH4xO1xuICAgICAgfVxuICAgICAgaWYgKCEoY2IuZmxhZ3MgJiA4KSkgY2IoKTtcbiAgICAgIGNiLmZsYWdzICY9IH4xO1xuICAgIH1cbiAgICBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBudWxsO1xuICAgIHBvc3RGbHVzaEluZGV4ID0gMDtcbiAgfVxufVxuY29uc3QgZ2V0SWQgPSAoam9iKSA9PiBqb2IuaWQgPT0gbnVsbCA/IGpvYi5mbGFncyAmIDIgPyAtMSA6IEluZmluaXR5IDogam9iLmlkO1xuZnVuY3Rpb24gZmx1c2hKb2JzKHNlZW4pIHtcbiAgaXNGbHVzaFBlbmRpbmcgPSBmYWxzZTtcbiAgaXNGbHVzaGluZyA9IHRydWU7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgc2VlbiA9IHNlZW4gfHwgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgfVxuICBjb25zdCBjaGVjayA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyAoam9iKSA9PiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2Vlbiwgam9iKSA6IE5PT1A7XG4gIHRyeSB7XG4gICAgZm9yIChmbHVzaEluZGV4ID0gMDsgZmx1c2hJbmRleCA8IHF1ZXVlLmxlbmd0aDsgZmx1c2hJbmRleCsrKSB7XG4gICAgICBjb25zdCBqb2IgPSBxdWV1ZVtmbHVzaEluZGV4XTtcbiAgICAgIGlmIChqb2IgJiYgIShqb2IuZmxhZ3MgJiA4KSkge1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBjaGVjayhqb2IpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpvYi5mbGFncyAmIDQpIHtcbiAgICAgICAgICBqb2IuZmxhZ3MgJj0gfjE7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKFxuICAgICAgICAgIGpvYixcbiAgICAgICAgICBqb2IuaSxcbiAgICAgICAgICBqb2IuaSA/IDE1IDogMTRcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCEoam9iLmZsYWdzICYgNCkpIHtcbiAgICAgICAgICBqb2IuZmxhZ3MgJj0gfjE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgZm9yICg7IGZsdXNoSW5kZXggPCBxdWV1ZS5sZW5ndGg7IGZsdXNoSW5kZXgrKykge1xuICAgICAgY29uc3Qgam9iID0gcXVldWVbZmx1c2hJbmRleF07XG4gICAgICBpZiAoam9iKSB7XG4gICAgICAgIGpvYi5mbGFncyAmPSB+MTtcbiAgICAgIH1cbiAgICB9XG4gICAgZmx1c2hJbmRleCA9IDA7XG4gICAgcXVldWUubGVuZ3RoID0gMDtcbiAgICBmbHVzaFBvc3RGbHVzaENicyhzZWVuKTtcbiAgICBpc0ZsdXNoaW5nID0gZmFsc2U7XG4gICAgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCB8fCBwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xuICAgICAgZmx1c2hKb2JzKHNlZW4pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGZuKSB7XG4gIGNvbnN0IGNvdW50ID0gc2Vlbi5nZXQoZm4pIHx8IDA7XG4gIGlmIChjb3VudCA+IFJFQ1VSU0lPTl9MSU1JVCkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gZm4uaTtcbiAgICBjb25zdCBjb21wb25lbnROYW1lID0gaW5zdGFuY2UgJiYgZ2V0Q29tcG9uZW50TmFtZShpbnN0YW5jZS50eXBlKTtcbiAgICBoYW5kbGVFcnJvcihcbiAgICAgIGBNYXhpbXVtIHJlY3Vyc2l2ZSB1cGRhdGVzIGV4Y2VlZGVkJHtjb21wb25lbnROYW1lID8gYCBpbiBjb21wb25lbnQgPCR7Y29tcG9uZW50TmFtZX0+YCA6IGBgfS4gVGhpcyBtZWFucyB5b3UgaGF2ZSBhIHJlYWN0aXZlIGVmZmVjdCB0aGF0IGlzIG11dGF0aW5nIGl0cyBvd24gZGVwZW5kZW5jaWVzIGFuZCB0aHVzIHJlY3Vyc2l2ZWx5IHRyaWdnZXJpbmcgaXRzZWxmLiBQb3NzaWJsZSBzb3VyY2VzIGluY2x1ZGUgY29tcG9uZW50IHRlbXBsYXRlLCByZW5kZXIgZnVuY3Rpb24sIHVwZGF0ZWQgaG9vayBvciB3YXRjaGVyIHNvdXJjZSBmdW5jdGlvbi5gLFxuICAgICAgbnVsbCxcbiAgICAgIDEwXG4gICAgKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzZWVuLnNldChmbiwgY291bnQgKyAxKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5sZXQgaXNIbXJVcGRhdGluZyA9IGZhbHNlO1xuY29uc3QgaG1yRGlydHlDb21wb25lbnRzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9ITVJfUlVOVElNRV9fID0ge1xuICAgIGNyZWF0ZVJlY29yZDogdHJ5V3JhcChjcmVhdGVSZWNvcmQpLFxuICAgIHJlcmVuZGVyOiB0cnlXcmFwKHJlcmVuZGVyKSxcbiAgICByZWxvYWQ6IHRyeVdyYXAocmVsb2FkKVxuICB9O1xufVxuY29uc3QgbWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmZ1bmN0aW9uIHJlZ2lzdGVySE1SKGluc3RhbmNlKSB7XG4gIGNvbnN0IGlkID0gaW5zdGFuY2UudHlwZS5fX2htcklkO1xuICBsZXQgcmVjb3JkID0gbWFwLmdldChpZCk7XG4gIGlmICghcmVjb3JkKSB7XG4gICAgY3JlYXRlUmVjb3JkKGlkLCBpbnN0YW5jZS50eXBlKTtcbiAgICByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgfVxuICByZWNvcmQuaW5zdGFuY2VzLmFkZChpbnN0YW5jZSk7XG59XG5mdW5jdGlvbiB1bnJlZ2lzdGVySE1SKGluc3RhbmNlKSB7XG4gIG1hcC5nZXQoaW5zdGFuY2UudHlwZS5fX2htcklkKS5pbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlY29yZChpZCwgaW5pdGlhbERlZikge1xuICBpZiAobWFwLmhhcyhpZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbWFwLnNldChpZCwge1xuICAgIGluaXRpYWxEZWY6IG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluaXRpYWxEZWYpLFxuICAgIGluc3RhbmNlczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKVxuICB9KTtcbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDbGFzc0NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgcmV0dXJuIGlzQ2xhc3NDb21wb25lbnQoY29tcG9uZW50KSA/IGNvbXBvbmVudC5fX3ZjY09wdHMgOiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiByZXJlbmRlcihpZCwgbmV3UmVuZGVyKSB7XG4gIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICBpZiAoIXJlY29yZCkge1xuICAgIHJldHVybjtcbiAgfVxuICByZWNvcmQuaW5pdGlhbERlZi5yZW5kZXIgPSBuZXdSZW5kZXI7XG4gIFsuLi5yZWNvcmQuaW5zdGFuY2VzXS5mb3JFYWNoKChpbnN0YW5jZSkgPT4ge1xuICAgIGlmIChuZXdSZW5kZXIpIHtcbiAgICAgIGluc3RhbmNlLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICAgIG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluc3RhbmNlLnR5cGUpLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICB9XG4gICAgaW5zdGFuY2UucmVuZGVyQ2FjaGUgPSBbXTtcbiAgICBpc0htclVwZGF0aW5nID0gdHJ1ZTtcbiAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICBpc0htclVwZGF0aW5nID0gZmFsc2U7XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVsb2FkKGlkLCBuZXdDb21wKSB7XG4gIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICBpZiAoIXJlY29yZCkgcmV0dXJuO1xuICBuZXdDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQobmV3Q29tcCk7XG4gIHVwZGF0ZUNvbXBvbmVudERlZihyZWNvcmQuaW5pdGlhbERlZiwgbmV3Q29tcCk7XG4gIGNvbnN0IGluc3RhbmNlcyA9IFsuLi5yZWNvcmQuaW5zdGFuY2VzXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGluc3RhbmNlc1tpXTtcbiAgICBjb25zdCBvbGRDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5zdGFuY2UudHlwZSk7XG4gICAgbGV0IGRpcnR5SW5zdGFuY2VzID0gaG1yRGlydHlDb21wb25lbnRzLmdldChvbGRDb21wKTtcbiAgICBpZiAoIWRpcnR5SW5zdGFuY2VzKSB7XG4gICAgICBpZiAob2xkQ29tcCAhPT0gcmVjb3JkLmluaXRpYWxEZWYpIHtcbiAgICAgICAgdXBkYXRlQ29tcG9uZW50RGVmKG9sZENvbXAsIG5ld0NvbXApO1xuICAgICAgfVxuICAgICAgaG1yRGlydHlDb21wb25lbnRzLnNldChvbGRDb21wLCBkaXJ0eUluc3RhbmNlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpO1xuICAgIH1cbiAgICBkaXJ0eUluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xuICAgIGluc3RhbmNlLmFwcENvbnRleHQucHJvcHNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgaW5zdGFuY2UuYXBwQ29udGV4dC5lbWl0c0NhY2hlLmRlbGV0ZShpbnN0YW5jZS50eXBlKTtcbiAgICBpbnN0YW5jZS5hcHBDb250ZXh0Lm9wdGlvbnNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgaWYgKGluc3RhbmNlLmNlUmVsb2FkKSB7XG4gICAgICBkaXJ0eUluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xuICAgICAgaW5zdGFuY2UuY2VSZWxvYWQobmV3Q29tcC5zdHlsZXMpO1xuICAgICAgZGlydHlJbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLnBhcmVudCkge1xuICAgICAgcXVldWVKb2IoKCkgPT4ge1xuICAgICAgICBpc0htclVwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgaW5zdGFuY2UucGFyZW50LnVwZGF0ZSgpO1xuICAgICAgICBpc0htclVwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgIGRpcnR5SW5zdGFuY2VzLmRlbGV0ZShpbnN0YW5jZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLmFwcENvbnRleHQucmVsb2FkKSB7XG4gICAgICBpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCgpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiW0hNUl0gUm9vdCBvciBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlIG1vZGlmaWVkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLnJvb3QuY2UgJiYgaW5zdGFuY2UgIT09IGluc3RhbmNlLnJvb3QpIHtcbiAgICAgIGluc3RhbmNlLnJvb3QuY2UuX3JlbW92ZUNoaWxkU3R5bGUob2xkQ29tcCk7XG4gICAgfVxuICB9XG4gIHF1ZXVlUG9zdEZsdXNoQ2IoKCkgPT4ge1xuICAgIGhtckRpcnR5Q29tcG9uZW50cy5jbGVhcigpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudERlZihvbGRDb21wLCBuZXdDb21wKSB7XG4gIGV4dGVuZChvbGRDb21wLCBuZXdDb21wKTtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2xkQ29tcCkge1xuICAgIGlmIChrZXkgIT09IFwiX19maWxlXCIgJiYgIShrZXkgaW4gbmV3Q29tcCkpIHtcbiAgICAgIGRlbGV0ZSBvbGRDb21wW2tleV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiB0cnlXcmFwKGZuKSB7XG4gIHJldHVybiAoaWQsIGFyZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4oaWQsIGFyZyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFtITVJdIFNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyBWdWUgY29tcG9uZW50IGhvdC1yZWxvYWQuIEZ1bGwgcmVsb2FkIHJlcXVpcmVkLmBcbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuXG5sZXQgZGV2dG9vbHMkMTtcbmxldCBidWZmZXIgPSBbXTtcbmxldCBkZXZ0b29sc05vdEluc3RhbGxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZW1pdCQxKGV2ZW50LCAuLi5hcmdzKSB7XG4gIGlmIChkZXZ0b29scyQxKSB7XG4gICAgZGV2dG9vbHMkMS5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgfSBlbHNlIGlmICghZGV2dG9vbHNOb3RJbnN0YWxsZWQpIHtcbiAgICBidWZmZXIucHVzaCh7IGV2ZW50LCBhcmdzIH0pO1xuICB9XG59XG5mdW5jdGlvbiBzZXREZXZ0b29sc0hvb2skMShob29rLCB0YXJnZXQpIHtcbiAgdmFyIF9hLCBfYjtcbiAgZGV2dG9vbHMkMSA9IGhvb2s7XG4gIGlmIChkZXZ0b29scyQxKSB7XG4gICAgZGV2dG9vbHMkMS5lbmFibGVkID0gdHJ1ZTtcbiAgICBidWZmZXIuZm9yRWFjaCgoeyBldmVudCwgYXJncyB9KSA9PiBkZXZ0b29scyQxLmVtaXQoZXZlbnQsIC4uLmFyZ3MpKTtcbiAgICBidWZmZXIgPSBbXTtcbiAgfSBlbHNlIGlmIChcbiAgICAvLyBoYW5kbGUgbGF0ZSBkZXZ0b29scyBpbmplY3Rpb24gLSBvbmx5IGRvIHRoaXMgaWYgd2UgYXJlIGluIGFuIGFjdHVhbFxuICAgIC8vIGJyb3dzZXIgZW52aXJvbm1lbnQgdG8gYXZvaWQgdGhlIHRpbWVyIGhhbmRsZSBzdGFsbGluZyB0ZXN0IHJ1bm5lciBleGl0XG4gICAgLy8gKCM0ODE1KVxuICAgIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgLy8gc29tZSBlbnZzIG1vY2sgd2luZG93IGJ1dCBub3QgZnVsbHlcbiAgICB3aW5kb3cuSFRNTEVsZW1lbnQgJiYgLy8gYWxzbyBleGNsdWRlIGpzZG9tXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgISgoX2IgPSAoX2EgPSB3aW5kb3cubmF2aWdhdG9yKSA9PSBudWxsID8gdm9pZCAwIDogX2EudXNlckFnZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2IuaW5jbHVkZXMoXCJqc2RvbVwiKSlcbiAgKSB7XG4gICAgY29uc3QgcmVwbGF5ID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18gPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyB8fCBbXTtcbiAgICByZXBsYXkucHVzaCgobmV3SG9vaykgPT4ge1xuICAgICAgc2V0RGV2dG9vbHNIb29rJDEobmV3SG9vaywgdGFyZ2V0KTtcbiAgICB9KTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICghZGV2dG9vbHMkMSkge1xuICAgICAgICB0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyA9IG51bGw7XG4gICAgICAgIGRldnRvb2xzTm90SW5zdGFsbGVkID0gdHJ1ZTtcbiAgICAgICAgYnVmZmVyID0gW107XG4gICAgICB9XG4gICAgfSwgM2UzKTtcbiAgfSBlbHNlIHtcbiAgICBkZXZ0b29sc05vdEluc3RhbGxlZCA9IHRydWU7XG4gICAgYnVmZmVyID0gW107XG4gIH1cbn1cbmZ1bmN0aW9uIGRldnRvb2xzSW5pdEFwcChhcHAsIHZlcnNpb24pIHtcbiAgZW1pdCQxKFwiYXBwOmluaXRcIiAvKiBBUFBfSU5JVCAqLywgYXBwLCB2ZXJzaW9uLCB7XG4gICAgRnJhZ21lbnQsXG4gICAgVGV4dCxcbiAgICBDb21tZW50LFxuICAgIFN0YXRpY1xuICB9KTtcbn1cbmZ1bmN0aW9uIGRldnRvb2xzVW5tb3VudEFwcChhcHApIHtcbiAgZW1pdCQxKFwiYXBwOnVubW91bnRcIiAvKiBBUFBfVU5NT1VOVCAqLywgYXBwKTtcbn1cbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50QWRkZWQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OmFkZGVkXCIgLyogQ09NUE9ORU5UX0FEREVEICovKTtcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6dXBkYXRlZFwiIC8qIENPTVBPTkVOVF9VUERBVEVEICovKTtcbmNvbnN0IF9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFxuICBcImNvbXBvbmVudDpyZW1vdmVkXCIgLyogQ09NUE9ORU5UX1JFTU9WRUQgKi9cbik7XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAoY29tcG9uZW50KSA9PiB7XG4gIGlmIChkZXZ0b29scyQxICYmIHR5cGVvZiBkZXZ0b29scyQxLmNsZWFudXBCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiAvLyByZW1vdmUgdGhlIGNvbXBvbmVudCBpZiBpdCB3YXNuJ3QgYnVmZmVyZWRcbiAgIWRldnRvb2xzJDEuY2xlYW51cEJ1ZmZlcihjb21wb25lbnQpKSB7XG4gICAgX2RldnRvb2xzQ29tcG9uZW50UmVtb3ZlZChjb21wb25lbnQpO1xuICB9XG59O1xuLyohICNfX05PX1NJREVfRUZGRUNUU19fICovXG4vLyBAX19OT19TSURFX0VGRkVDVFNfX1xuZnVuY3Rpb24gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKGhvb2spIHtcbiAgcmV0dXJuIChjb21wb25lbnQpID0+IHtcbiAgICBlbWl0JDEoXG4gICAgICBob29rLFxuICAgICAgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLFxuICAgICAgY29tcG9uZW50LnVpZCxcbiAgICAgIGNvbXBvbmVudC5wYXJlbnQgPyBjb21wb25lbnQucGFyZW50LnVpZCA6IHZvaWQgMCxcbiAgICAgIGNvbXBvbmVudFxuICAgICk7XG4gIH07XG59XG5jb25zdCBkZXZ0b29sc1BlcmZTdGFydCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhcInBlcmY6c3RhcnRcIiAvKiBQRVJGT1JNQU5DRV9TVEFSVCAqLyk7XG5jb25zdCBkZXZ0b29sc1BlcmZFbmQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNQZXJmb3JtYW5jZUhvb2soXCJwZXJmOmVuZFwiIC8qIFBFUkZPUk1BTkNFX0VORCAqLyk7XG5mdW5jdGlvbiBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhob29rKSB7XG4gIHJldHVybiAoY29tcG9uZW50LCB0eXBlLCB0aW1lKSA9PiB7XG4gICAgZW1pdCQxKGhvb2ssIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LnVpZCwgY29tcG9uZW50LCB0eXBlLCB0aW1lKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRldnRvb2xzQ29tcG9uZW50RW1pdChjb21wb25lbnQsIGV2ZW50LCBwYXJhbXMpIHtcbiAgZW1pdCQxKFxuICAgIFwiY29tcG9uZW50OmVtaXRcIiAvKiBDT01QT05FTlRfRU1JVCAqLyxcbiAgICBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsXG4gICAgY29tcG9uZW50LFxuICAgIGV2ZW50LFxuICAgIHBhcmFtc1xuICApO1xufVxuXG5sZXQgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbmxldCBjdXJyZW50U2NvcGVJZCA9IG51bGw7XG5mdW5jdGlvbiBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJldiA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gaW5zdGFuY2U7XG4gIGN1cnJlbnRTY29wZUlkID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UudHlwZS5fX3Njb3BlSWQgfHwgbnVsbDtcbiAgcmV0dXJuIHByZXY7XG59XG5mdW5jdGlvbiBwdXNoU2NvcGVJZChpZCkge1xuICBjdXJyZW50U2NvcGVJZCA9IGlkO1xufVxuZnVuY3Rpb24gcG9wU2NvcGVJZCgpIHtcbiAgY3VycmVudFNjb3BlSWQgPSBudWxsO1xufVxuY29uc3Qgd2l0aFNjb3BlSWQgPSAoX2lkKSA9PiB3aXRoQ3R4O1xuZnVuY3Rpb24gd2l0aEN0eChmbiwgY3R4ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLCBpc05vblNjb3BlZFNsb3QpIHtcbiAgaWYgKCFjdHgpIHJldHVybiBmbjtcbiAgaWYgKGZuLl9uKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG4gIGNvbnN0IHJlbmRlckZuV2l0aENvbnRleHQgPSAoLi4uYXJncykgPT4ge1xuICAgIGlmIChyZW5kZXJGbldpdGhDb250ZXh0Ll9kKSB7XG4gICAgICBzZXRCbG9ja1RyYWNraW5nKC0xKTtcbiAgICB9XG4gICAgY29uc3QgcHJldkluc3RhbmNlID0gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGN0eCk7XG4gICAgbGV0IHJlcztcbiAgICB0cnkge1xuICAgICAgcmVzID0gZm4oLi4uYXJncyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2SW5zdGFuY2UpO1xuICAgICAgaWYgKHJlbmRlckZuV2l0aENvbnRleHQuX2QpIHtcbiAgICAgICAgc2V0QmxvY2tUcmFja2luZygxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQoY3R4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcbiAgcmVuZGVyRm5XaXRoQ29udGV4dC5fbiA9IHRydWU7XG4gIHJlbmRlckZuV2l0aENvbnRleHQuX2MgPSB0cnVlO1xuICByZW5kZXJGbldpdGhDb250ZXh0Ll9kID0gdHJ1ZTtcbiAgcmV0dXJuIHJlbmRlckZuV2l0aENvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lKSB7XG4gIGlmIChpc0J1aWx0SW5EaXJlY3RpdmUobmFtZSkpIHtcbiAgICB3YXJuJDEoXCJEbyBub3QgdXNlIGJ1aWx0LWluIGRpcmVjdGl2ZSBpZHMgYXMgY3VzdG9tIGRpcmVjdGl2ZSBpZDogXCIgKyBuYW1lKTtcbiAgfVxufVxuZnVuY3Rpb24gd2l0aERpcmVjdGl2ZXModm5vZGUsIGRpcmVjdGl2ZXMpIHtcbiAgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgd2FybiQxKGB3aXRoRGlyZWN0aXZlcyBjYW4gb25seSBiZSB1c2VkIGluc2lkZSByZW5kZXIgZnVuY3Rpb25zLmApO1xuICAgIHJldHVybiB2bm9kZTtcbiAgfVxuICBjb25zdCBpbnN0YW5jZSA9IGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSk7XG4gIGNvbnN0IGJpbmRpbmdzID0gdm5vZGUuZGlycyB8fCAodm5vZGUuZGlycyA9IFtdKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3RpdmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IFtkaXIsIHZhbHVlLCBhcmcsIG1vZGlmaWVycyA9IEVNUFRZX09CSl0gPSBkaXJlY3RpdmVzW2ldO1xuICAgIGlmIChkaXIpIHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGRpcikpIHtcbiAgICAgICAgZGlyID0ge1xuICAgICAgICAgIG1vdW50ZWQ6IGRpcixcbiAgICAgICAgICB1cGRhdGVkOiBkaXJcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXIuZGVlcCkge1xuICAgICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBiaW5kaW5ncy5wdXNoKHtcbiAgICAgICAgZGlyLFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIG9sZFZhbHVlOiB2b2lkIDAsXG4gICAgICAgIGFyZyxcbiAgICAgICAgbW9kaWZpZXJzXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZub2RlO1xufVxuZnVuY3Rpb24gaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgcHJldlZOb2RlLCBpbnN0YW5jZSwgbmFtZSkge1xuICBjb25zdCBiaW5kaW5ncyA9IHZub2RlLmRpcnM7XG4gIGNvbnN0IG9sZEJpbmRpbmdzID0gcHJldlZOb2RlICYmIHByZXZWTm9kZS5kaXJzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYmluZGluZyA9IGJpbmRpbmdzW2ldO1xuICAgIGlmIChvbGRCaW5kaW5ncykge1xuICAgICAgYmluZGluZy5vbGRWYWx1ZSA9IG9sZEJpbmRpbmdzW2ldLnZhbHVlO1xuICAgIH1cbiAgICBsZXQgaG9vayA9IGJpbmRpbmcuZGlyW25hbWVdO1xuICAgIGlmIChob29rKSB7XG4gICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgOCwgW1xuICAgICAgICB2bm9kZS5lbCxcbiAgICAgICAgYmluZGluZyxcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIHByZXZWTm9kZVxuICAgICAgXSk7XG4gICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IFRlbGVwb3J0RW5kS2V5ID0gU3ltYm9sKFwiX3Z0ZVwiKTtcbmNvbnN0IGlzVGVsZXBvcnQgPSAodHlwZSkgPT4gdHlwZS5fX2lzVGVsZXBvcnQ7XG5jb25zdCBpc1RlbGVwb3J0RGlzYWJsZWQgPSAocHJvcHMpID0+IHByb3BzICYmIChwcm9wcy5kaXNhYmxlZCB8fCBwcm9wcy5kaXNhYmxlZCA9PT0gXCJcIik7XG5jb25zdCBpc1RlbGVwb3J0RGVmZXJyZWQgPSAocHJvcHMpID0+IHByb3BzICYmIChwcm9wcy5kZWZlciB8fCBwcm9wcy5kZWZlciA9PT0gXCJcIik7XG5jb25zdCBpc1RhcmdldFNWRyA9ICh0YXJnZXQpID0+IHR5cGVvZiBTVkdFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHRhcmdldCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQ7XG5jb25zdCBpc1RhcmdldE1hdGhNTCA9ICh0YXJnZXQpID0+IHR5cGVvZiBNYXRoTUxFbGVtZW50ID09PSBcImZ1bmN0aW9uXCIgJiYgdGFyZ2V0IGluc3RhbmNlb2YgTWF0aE1MRWxlbWVudDtcbmNvbnN0IHJlc29sdmVUYXJnZXQgPSAocHJvcHMsIHNlbGVjdCkgPT4ge1xuICBjb25zdCB0YXJnZXRTZWxlY3RvciA9IHByb3BzICYmIHByb3BzLnRvO1xuICBpZiAoaXNTdHJpbmcodGFyZ2V0U2VsZWN0b3IpKSB7XG4gICAgaWYgKCFzZWxlY3QpIHtcbiAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgd2FybiQxKFxuICAgICAgICBgQ3VycmVudCByZW5kZXJlciBkb2VzIG5vdCBzdXBwb3J0IHN0cmluZyB0YXJnZXQgZm9yIFRlbGVwb3J0cy4gKG1pc3NpbmcgcXVlcnlTZWxlY3RvciByZW5kZXJlciBvcHRpb24pYFxuICAgICAgKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBzZWxlY3QodGFyZ2V0U2VsZWN0b3IpO1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIXRhcmdldCAmJiAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYEZhaWxlZCB0byBsb2NhdGUgVGVsZXBvcnQgdGFyZ2V0IHdpdGggc2VsZWN0b3IgXCIke3RhcmdldFNlbGVjdG9yfVwiLiBOb3RlIHRoZSB0YXJnZXQgZWxlbWVudCBtdXN0IGV4aXN0IGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQgLSBpLmUuIHRoZSB0YXJnZXQgY2Fubm90IGJlIHJlbmRlcmVkIGJ5IHRoZSBjb21wb25lbnQgaXRzZWxmLCBhbmQgaWRlYWxseSBzaG91bGQgYmUgb3V0c2lkZSBvZiB0aGUgZW50aXJlIFZ1ZSBjb21wb25lbnQgdHJlZS5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhdGFyZ2V0U2VsZWN0b3IgJiYgIWlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcbiAgICAgIHdhcm4kMShgSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQ6ICR7dGFyZ2V0U2VsZWN0b3J9YCk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRTZWxlY3RvcjtcbiAgfVxufTtcbmNvbnN0IFRlbGVwb3J0SW1wbCA9IHtcbiAgbmFtZTogXCJUZWxlcG9ydFwiLFxuICBfX2lzVGVsZXBvcnQ6IHRydWUsXG4gIHByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgaW50ZXJuYWxzKSB7XG4gICAgY29uc3Qge1xuICAgICAgbWM6IG1vdW50Q2hpbGRyZW4sXG4gICAgICBwYzogcGF0Y2hDaGlsZHJlbixcbiAgICAgIHBiYzogcGF0Y2hCbG9ja0NoaWxkcmVuLFxuICAgICAgbzogeyBpbnNlcnQsIHF1ZXJ5U2VsZWN0b3IsIGNyZWF0ZVRleHQsIGNyZWF0ZUNvbW1lbnQgfVxuICAgIH0gPSBpbnRlcm5hbHM7XG4gICAgY29uc3QgZGlzYWJsZWQgPSBpc1RlbGVwb3J0RGlzYWJsZWQobjIucHJvcHMpO1xuICAgIGxldCB7IHNoYXBlRmxhZywgY2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiB9ID0gbjI7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgaXNIbXJVcGRhdGluZykge1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSBuMi5lbCA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBjcmVhdGVDb21tZW50KFwidGVsZXBvcnQgc3RhcnRcIikgOiBjcmVhdGVUZXh0KFwiXCIpO1xuICAgICAgY29uc3QgbWFpbkFuY2hvciA9IG4yLmFuY2hvciA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBjcmVhdGVDb21tZW50KFwidGVsZXBvcnQgZW5kXCIpIDogY3JlYXRlVGV4dChcIlwiKTtcbiAgICAgIGluc2VydChwbGFjZWhvbGRlciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KG1haW5BbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIGNvbnN0IG1vdW50ID0gKGNvbnRhaW5lcjIsIGFuY2hvcjIpID0+IHtcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICAgICAgaWYgKHBhcmVudENvbXBvbmVudCAmJiBwYXJlbnRDb21wb25lbnQuaXNDRSkge1xuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LmNlLl90ZWxlcG9ydFRhcmdldCA9IGNvbnRhaW5lcjI7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1vdW50Q2hpbGRyZW4oXG4gICAgICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgICAgIGNvbnRhaW5lcjIsXG4gICAgICAgICAgICBhbmNob3IyLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgbW91bnRUb1RhcmdldCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gbjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChuMi5wcm9wcywgcXVlcnlTZWxlY3Rvcik7XG4gICAgICAgIGNvbnN0IHRhcmdldEFuY2hvciA9IHByZXBhcmVBbmNob3IodGFyZ2V0LCBuMiwgY3JlYXRlVGV4dCwgaW5zZXJ0KTtcbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgIGlmIChuYW1lc3BhY2UgIT09IFwic3ZnXCIgJiYgaXNUYXJnZXRTVkcodGFyZ2V0KSkge1xuICAgICAgICAgICAgbmFtZXNwYWNlID0gXCJzdmdcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZSAhPT0gXCJtYXRobWxcIiAmJiBpc1RhcmdldE1hdGhNTCh0YXJnZXQpKSB7XG4gICAgICAgICAgICBuYW1lc3BhY2UgPSBcIm1hdGhtbFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgICAgICBtb3VudCh0YXJnZXQsIHRhcmdldEFuY2hvcik7XG4gICAgICAgICAgICB1cGRhdGVDc3NWYXJzKG4yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhZGlzYWJsZWQpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBcIkludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIG1vdW50OlwiLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgYCgke3R5cGVvZiB0YXJnZXR9KWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIG1vdW50KGNvbnRhaW5lciwgbWFpbkFuY2hvcik7XG4gICAgICAgIHVwZGF0ZUNzc1ZhcnMobjIpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVGVsZXBvcnREZWZlcnJlZChuMi5wcm9wcykpIHtcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KG1vdW50VG9UYXJnZXQsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vdW50VG9UYXJnZXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbjIuZWwgPSBuMS5lbDtcbiAgICAgIG4yLnRhcmdldFN0YXJ0ID0gbjEudGFyZ2V0U3RhcnQ7XG4gICAgICBjb25zdCBtYWluQW5jaG9yID0gbjIuYW5jaG9yID0gbjEuYW5jaG9yO1xuICAgICAgY29uc3QgdGFyZ2V0ID0gbjIudGFyZ2V0ID0gbjEudGFyZ2V0O1xuICAgICAgY29uc3QgdGFyZ2V0QW5jaG9yID0gbjIudGFyZ2V0QW5jaG9yID0gbjEudGFyZ2V0QW5jaG9yO1xuICAgICAgY29uc3Qgd2FzRGlzYWJsZWQgPSBpc1RlbGVwb3J0RGlzYWJsZWQobjEucHJvcHMpO1xuICAgICAgY29uc3QgY3VycmVudENvbnRhaW5lciA9IHdhc0Rpc2FibGVkID8gY29udGFpbmVyIDogdGFyZ2V0O1xuICAgICAgY29uc3QgY3VycmVudEFuY2hvciA9IHdhc0Rpc2FibGVkID8gbWFpbkFuY2hvciA6IHRhcmdldEFuY2hvcjtcbiAgICAgIGlmIChuYW1lc3BhY2UgPT09IFwic3ZnXCIgfHwgaXNUYXJnZXRTVkcodGFyZ2V0KSkge1xuICAgICAgICBuYW1lc3BhY2UgPSBcInN2Z1wiO1xuICAgICAgfSBlbHNlIGlmIChuYW1lc3BhY2UgPT09IFwibWF0aG1sXCIgfHwgaXNUYXJnZXRNYXRoTUwodGFyZ2V0KSkge1xuICAgICAgICBuYW1lc3BhY2UgPSBcIm1hdGhtbFwiO1xuICAgICAgfVxuICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4oXG4gICAgICAgICAgbjEuZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgICBjdXJyZW50Q29udGFpbmVyLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzXG4gICAgICAgICk7XG4gICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoIW9wdGltaXplZCkge1xuICAgICAgICBwYXRjaENoaWxkcmVuKFxuICAgICAgICAgIG4xLFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIGN1cnJlbnRDb250YWluZXIsXG4gICAgICAgICAgY3VycmVudEFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIGlmICghd2FzRGlzYWJsZWQpIHtcbiAgICAgICAgICBtb3ZlVGVsZXBvcnQoXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIG1haW5BbmNob3IsXG4gICAgICAgICAgICBpbnRlcm5hbHMsXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobjIucHJvcHMgJiYgbjEucHJvcHMgJiYgbjIucHJvcHMudG8gIT09IG4xLnByb3BzLnRvKSB7XG4gICAgICAgICAgICBuMi5wcm9wcy50byA9IG4xLnByb3BzLnRvO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChuMi5wcm9wcyAmJiBuMi5wcm9wcy50bykgIT09IChuMS5wcm9wcyAmJiBuMS5wcm9wcy50bykpIHtcbiAgICAgICAgICBjb25zdCBuZXh0VGFyZ2V0ID0gbjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChcbiAgICAgICAgICAgIG4yLnByb3BzLFxuICAgICAgICAgICAgcXVlcnlTZWxlY3RvclxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKG5leHRUYXJnZXQpIHtcbiAgICAgICAgICAgIG1vdmVUZWxlcG9ydChcbiAgICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICAgIG5leHRUYXJnZXQsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGludGVybmFscyxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJJbnZhbGlkIFRlbGVwb3J0IHRhcmdldCBvbiB1cGRhdGU6XCIsXG4gICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgYCgke3R5cGVvZiB0YXJnZXR9KWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHdhc0Rpc2FibGVkKSB7XG4gICAgICAgICAgbW92ZVRlbGVwb3J0KFxuICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICB0YXJnZXRBbmNob3IsXG4gICAgICAgICAgICBpbnRlcm5hbHMsXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdXBkYXRlQ3NzVmFycyhuMik7XG4gICAgfVxuICB9LFxuICByZW1vdmUodm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHsgdW06IHVubW91bnQsIG86IHsgcmVtb3ZlOiBob3N0UmVtb3ZlIH0gfSwgZG9SZW1vdmUpIHtcbiAgICBjb25zdCB7XG4gICAgICBzaGFwZUZsYWcsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGFuY2hvcixcbiAgICAgIHRhcmdldFN0YXJ0LFxuICAgICAgdGFyZ2V0QW5jaG9yLFxuICAgICAgdGFyZ2V0LFxuICAgICAgcHJvcHNcbiAgICB9ID0gdm5vZGU7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgaG9zdFJlbW92ZSh0YXJnZXRTdGFydCk7XG4gICAgICBob3N0UmVtb3ZlKHRhcmdldEFuY2hvcik7XG4gICAgfVxuICAgIGRvUmVtb3ZlICYmIGhvc3RSZW1vdmUoYW5jaG9yKTtcbiAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgIGNvbnN0IHNob3VsZFJlbW92ZSA9IGRvUmVtb3ZlIHx8ICFpc1RlbGVwb3J0RGlzYWJsZWQocHJvcHMpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICB1bm1vdW50KFxuICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzaG91bGRSZW1vdmUsXG4gICAgICAgICAgISFjaGlsZC5keW5hbWljQ2hpbGRyZW5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1vdmU6IG1vdmVUZWxlcG9ydCxcbiAgaHlkcmF0ZTogaHlkcmF0ZVRlbGVwb3J0XG59O1xuZnVuY3Rpb24gbW92ZVRlbGVwb3J0KHZub2RlLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgeyBvOiB7IGluc2VydCB9LCBtOiBtb3ZlIH0sIG1vdmVUeXBlID0gMikge1xuICBpZiAobW92ZVR5cGUgPT09IDApIHtcbiAgICBpbnNlcnQodm5vZGUudGFyZ2V0QW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gIH1cbiAgY29uc3QgeyBlbCwgYW5jaG9yLCBzaGFwZUZsYWcsIGNoaWxkcmVuLCBwcm9wcyB9ID0gdm5vZGU7XG4gIGNvbnN0IGlzUmVvcmRlciA9IG1vdmVUeXBlID09PSAyO1xuICBpZiAoaXNSZW9yZGVyKSB7XG4gICAgaW5zZXJ0KGVsLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gIH1cbiAgaWYgKCFpc1Jlb3JkZXIgfHwgaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBtb3ZlKFxuICAgICAgICAgIGNoaWxkcmVuW2ldLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBwYXJlbnRBbmNob3IsXG4gICAgICAgICAgMlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaXNSZW9yZGVyKSB7XG4gICAgaW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xuICB9XG59XG5mdW5jdGlvbiBoeWRyYXRlVGVsZXBvcnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCB7XG4gIG86IHsgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGUsIHF1ZXJ5U2VsZWN0b3IsIGluc2VydCwgY3JlYXRlVGV4dCB9XG59LCBoeWRyYXRlQ2hpbGRyZW4pIHtcbiAgY29uc3QgdGFyZ2V0ID0gdm5vZGUudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChcbiAgICB2bm9kZS5wcm9wcyxcbiAgICBxdWVyeVNlbGVjdG9yXG4gICk7XG4gIGlmICh0YXJnZXQpIHtcbiAgICBjb25zdCB0YXJnZXROb2RlID0gdGFyZ2V0Ll9scGEgfHwgdGFyZ2V0LmZpcnN0Q2hpbGQ7XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICBpZiAoaXNUZWxlcG9ydERpc2FibGVkKHZub2RlLnByb3BzKSkge1xuICAgICAgICB2bm9kZS5hbmNob3IgPSBoeWRyYXRlQ2hpbGRyZW4oXG4gICAgICAgICAgbmV4dFNpYmxpbmcobm9kZSksXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgcGFyZW50Tm9kZShub2RlKSxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICB2bm9kZS50YXJnZXRTdGFydCA9IHRhcmdldE5vZGU7XG4gICAgICAgIHZub2RlLnRhcmdldEFuY2hvciA9IHRhcmdldE5vZGUgJiYgbmV4dFNpYmxpbmcodGFyZ2V0Tm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5hbmNob3IgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgbGV0IHRhcmdldEFuY2hvciA9IHRhcmdldE5vZGU7XG4gICAgICAgIHdoaWxlICh0YXJnZXRBbmNob3IpIHtcbiAgICAgICAgICBpZiAodGFyZ2V0QW5jaG9yICYmIHRhcmdldEFuY2hvci5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldEFuY2hvci5kYXRhID09PSBcInRlbGVwb3J0IHN0YXJ0IGFuY2hvclwiKSB7XG4gICAgICAgICAgICAgIHZub2RlLnRhcmdldFN0YXJ0ID0gdGFyZ2V0QW5jaG9yO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRBbmNob3IuZGF0YSA9PT0gXCJ0ZWxlcG9ydCBhbmNob3JcIikge1xuICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSB0YXJnZXRBbmNob3I7XG4gICAgICAgICAgICAgIHRhcmdldC5fbHBhID0gdm5vZGUudGFyZ2V0QW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLnRhcmdldEFuY2hvcik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0YXJnZXRBbmNob3IgPSBuZXh0U2libGluZyh0YXJnZXRBbmNob3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdm5vZGUudGFyZ2V0QW5jaG9yKSB7XG4gICAgICAgICAgcHJlcGFyZUFuY2hvcih0YXJnZXQsIHZub2RlLCBjcmVhdGVUZXh0LCBpbnNlcnQpO1xuICAgICAgICB9XG4gICAgICAgIGh5ZHJhdGVDaGlsZHJlbihcbiAgICAgICAgICB0YXJnZXROb2RlICYmIG5leHRTaWJsaW5nKHRhcmdldE5vZGUpLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVDc3NWYXJzKHZub2RlKTtcbiAgfVxuICByZXR1cm4gdm5vZGUuYW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLmFuY2hvcik7XG59XG5jb25zdCBUZWxlcG9ydCA9IFRlbGVwb3J0SW1wbDtcbmZ1bmN0aW9uIHVwZGF0ZUNzc1ZhcnModm5vZGUpIHtcbiAgY29uc3QgY3R4ID0gdm5vZGUuY3R4O1xuICBpZiAoY3R4ICYmIGN0eC51dCkge1xuICAgIGxldCBub2RlID0gdm5vZGUudGFyZ2V0U3RhcnQ7XG4gICAgd2hpbGUgKG5vZGUgJiYgbm9kZSAhPT0gdm5vZGUudGFyZ2V0QW5jaG9yKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkgbm9kZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXYtb3duZXJcIiwgY3R4LnVpZCk7XG4gICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gICAgY3R4LnV0KCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZXBhcmVBbmNob3IodGFyZ2V0LCB2bm9kZSwgY3JlYXRlVGV4dCwgaW5zZXJ0KSB7XG4gIGNvbnN0IHRhcmdldFN0YXJ0ID0gdm5vZGUudGFyZ2V0U3RhcnQgPSBjcmVhdGVUZXh0KFwiXCIpO1xuICBjb25zdCB0YXJnZXRBbmNob3IgPSB2bm9kZS50YXJnZXRBbmNob3IgPSBjcmVhdGVUZXh0KFwiXCIpO1xuICB0YXJnZXRTdGFydFtUZWxlcG9ydEVuZEtleV0gPSB0YXJnZXRBbmNob3I7XG4gIGlmICh0YXJnZXQpIHtcbiAgICBpbnNlcnQodGFyZ2V0U3RhcnQsIHRhcmdldCk7XG4gICAgaW5zZXJ0KHRhcmdldEFuY2hvciwgdGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0QW5jaG9yO1xufVxuXG5jb25zdCBsZWF2ZUNiS2V5ID0gU3ltYm9sKFwiX2xlYXZlQ2JcIik7XG5jb25zdCBlbnRlckNiS2V5ID0gU3ltYm9sKFwiX2VudGVyQ2JcIik7XG5mdW5jdGlvbiB1c2VUcmFuc2l0aW9uU3RhdGUoKSB7XG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIGlzTW91bnRlZDogZmFsc2UsXG4gICAgaXNMZWF2aW5nOiBmYWxzZSxcbiAgICBpc1VubW91bnRpbmc6IGZhbHNlLFxuICAgIGxlYXZpbmdWTm9kZXM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKClcbiAgfTtcbiAgb25Nb3VudGVkKCgpID0+IHtcbiAgICBzdGF0ZS5pc01vdW50ZWQgPSB0cnVlO1xuICB9KTtcbiAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICBzdGF0ZS5pc1VubW91bnRpbmcgPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuY29uc3QgVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IgPSBbRnVuY3Rpb24sIEFycmF5XTtcbmNvbnN0IEJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzID0ge1xuICBtb2RlOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgcGVyc2lzdGVkOiBCb29sZWFuLFxuICAvLyBlbnRlclxuICBvbkJlZm9yZUVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25FbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uQWZ0ZXJFbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uRW50ZXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAvLyBsZWF2ZVxuICBvbkJlZm9yZUxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25MZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uQWZ0ZXJMZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uTGVhdmVDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAvLyBhcHBlYXJcbiAgb25CZWZvcmVBcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uQWZ0ZXJBcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkFwcGVhckNhbmNlbGxlZDogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3Jcbn07XG5jb25zdCByZWN1cnNpdmVHZXRTdWJ0cmVlID0gKGluc3RhbmNlKSA9PiB7XG4gIGNvbnN0IHN1YlRyZWUgPSBpbnN0YW5jZS5zdWJUcmVlO1xuICByZXR1cm4gc3ViVHJlZS5jb21wb25lbnQgPyByZWN1cnNpdmVHZXRTdWJ0cmVlKHN1YlRyZWUuY29tcG9uZW50KSA6IHN1YlRyZWU7XG59O1xuY29uc3QgQmFzZVRyYW5zaXRpb25JbXBsID0ge1xuICBuYW1lOiBgQmFzZVRyYW5zaXRpb25gLFxuICBwcm9wczogQmFzZVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMsXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCAmJiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oc2xvdHMuZGVmYXVsdCgpLCB0cnVlKTtcbiAgICAgIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBjaGlsZCA9IGZpbmROb25Db21tZW50Q2hpbGQoY2hpbGRyZW4pO1xuICAgICAgY29uc3QgcmF3UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgICBjb25zdCB7IG1vZGUgfSA9IHJhd1Byb3BzO1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgbW9kZSAmJiBtb2RlICE9PSBcImluLW91dFwiICYmIG1vZGUgIT09IFwib3V0LWluXCIgJiYgbW9kZSAhPT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgd2FybiQxKGBpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAke21vZGV9YCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhdGUuaXNMZWF2aW5nKSB7XG4gICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlubmVyQ2hpbGQgPSBnZXRJbm5lckNoaWxkJDEoY2hpbGQpO1xuICAgICAgaWYgKCFpbm5lckNoaWxkKSB7XG4gICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcbiAgICAgIH1cbiAgICAgIGxldCBlbnRlckhvb2tzID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhcbiAgICAgICAgaW5uZXJDaGlsZCxcbiAgICAgICAgcmF3UHJvcHMsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgLy8gIzExMDYxLCBlbnN1cmUgZW50ZXJIb29rcyBpcyBmcmVzaCBhZnRlciBjbG9uZVxuICAgICAgICAoaG9va3MpID0+IGVudGVySG9va3MgPSBob29rc1xuICAgICAgKTtcbiAgICAgIGlmIChpbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKGlubmVyQ2hpbGQsIGVudGVySG9va3MpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2xkQ2hpbGQgPSBpbnN0YW5jZS5zdWJUcmVlO1xuICAgICAgY29uc3Qgb2xkSW5uZXJDaGlsZCA9IG9sZENoaWxkICYmIGdldElubmVyQ2hpbGQkMShvbGRDaGlsZCk7XG4gICAgICBpZiAob2xkSW5uZXJDaGlsZCAmJiBvbGRJbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQgJiYgIWlzU2FtZVZOb2RlVHlwZShpbm5lckNoaWxkLCBvbGRJbm5lckNoaWxkKSAmJiByZWN1cnNpdmVHZXRTdWJ0cmVlKGluc3RhbmNlKS50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgIGNvbnN0IGxlYXZpbmdIb29rcyA9IHJlc29sdmVUcmFuc2l0aW9uSG9va3MoXG4gICAgICAgICAgb2xkSW5uZXJDaGlsZCxcbiAgICAgICAgICByYXdQcm9wcyxcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICBpbnN0YW5jZVxuICAgICAgICApO1xuICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Mob2xkSW5uZXJDaGlsZCwgbGVhdmluZ0hvb2tzKTtcbiAgICAgICAgaWYgKG1vZGUgPT09IFwib3V0LWluXCIgJiYgaW5uZXJDaGlsZC50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgICAgc3RhdGUuaXNMZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgICBsZWF2aW5nSG9va3MuYWZ0ZXJMZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHN0YXRlLmlzTGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCEoaW5zdGFuY2Uuam9iLmZsYWdzICYgOCkpIHtcbiAgICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgbGVhdmluZ0hvb2tzLmFmdGVyTGVhdmU7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gZW1wdHlQbGFjZWhvbGRlcihjaGlsZCk7XG4gICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJpbi1vdXRcIiAmJiBpbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICBsZWF2aW5nSG9va3MuZGVsYXlMZWF2ZSA9IChlbCwgZWFybHlSZW1vdmUsIGRlbGF5ZWRMZWF2ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gZ2V0TGVhdmluZ05vZGVzRm9yVHlwZShcbiAgICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICAgIG9sZElubmVyQ2hpbGRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVbU3RyaW5nKG9sZElubmVyQ2hpbGQua2V5KV0gPSBvbGRJbm5lckNoaWxkO1xuICAgICAgICAgICAgZWxbbGVhdmVDYktleV0gPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGVhcmx5UmVtb3ZlKCk7XG4gICAgICAgICAgICAgIGVsW2xlYXZlQ2JLZXldID0gdm9pZCAwO1xuICAgICAgICAgICAgICBkZWxldGUgZW50ZXJIb29rcy5kZWxheWVkTGVhdmU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZW50ZXJIb29rcy5kZWxheWVkTGVhdmUgPSBkZWxheWVkTGVhdmU7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH07XG4gIH1cbn07XG5mdW5jdGlvbiBmaW5kTm9uQ29tbWVudENoaWxkKGNoaWxkcmVuKSB7XG4gIGxldCBjaGlsZCA9IGNoaWxkcmVuWzBdO1xuICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgIGxldCBoYXNGb3VuZCA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgYyBvZiBjaGlsZHJlbikge1xuICAgICAgaWYgKGMudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBoYXNGb3VuZCkge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIFwiPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudCBvciBjb21wb25lbnQuIFVzZSA8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjaGlsZCA9IGM7XG4gICAgICAgIGhhc0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgaWYgKCEhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkO1xufVxuY29uc3QgQmFzZVRyYW5zaXRpb24gPSBCYXNlVHJhbnNpdGlvbkltcGw7XG5mdW5jdGlvbiBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSkge1xuICBjb25zdCB7IGxlYXZpbmdWTm9kZXMgfSA9IHN0YXRlO1xuICBsZXQgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gbGVhdmluZ1ZOb2Rlcy5nZXQodm5vZGUudHlwZSk7XG4gIGlmICghbGVhdmluZ1ZOb2Rlc0NhY2hlKSB7XG4gICAgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgbGVhdmluZ1ZOb2Rlcy5zZXQodm5vZGUudHlwZSwgbGVhdmluZ1ZOb2Rlc0NhY2hlKTtcbiAgfVxuICByZXR1cm4gbGVhdmluZ1ZOb2Rlc0NhY2hlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSwgcG9zdENsb25lKSB7XG4gIGNvbnN0IHtcbiAgICBhcHBlYXIsXG4gICAgbW9kZSxcbiAgICBwZXJzaXN0ZWQgPSBmYWxzZSxcbiAgICBvbkJlZm9yZUVudGVyLFxuICAgIG9uRW50ZXIsXG4gICAgb25BZnRlckVudGVyLFxuICAgIG9uRW50ZXJDYW5jZWxsZWQsXG4gICAgb25CZWZvcmVMZWF2ZSxcbiAgICBvbkxlYXZlLFxuICAgIG9uQWZ0ZXJMZWF2ZSxcbiAgICBvbkxlYXZlQ2FuY2VsbGVkLFxuICAgIG9uQmVmb3JlQXBwZWFyLFxuICAgIG9uQXBwZWFyLFxuICAgIG9uQWZ0ZXJBcHBlYXIsXG4gICAgb25BcHBlYXJDYW5jZWxsZWRcbiAgfSA9IHByb3BzO1xuICBjb25zdCBrZXkgPSBTdHJpbmcodm5vZGUua2V5KTtcbiAgY29uc3QgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gZ2V0TGVhdmluZ05vZGVzRm9yVHlwZShzdGF0ZSwgdm5vZGUpO1xuICBjb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzKSA9PiB7XG4gICAgaG9vayAmJiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhcbiAgICAgIGhvb2ssXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDksXG4gICAgICBhcmdzXG4gICAgKTtcbiAgfTtcbiAgY29uc3QgY2FsbEFzeW5jSG9vayA9IChob29rLCBhcmdzKSA9PiB7XG4gICAgY29uc3QgZG9uZSA9IGFyZ3NbMV07XG4gICAgY2FsbEhvb2soaG9vaywgYXJncyk7XG4gICAgaWYgKGlzQXJyYXkoaG9vaykpIHtcbiAgICAgIGlmIChob29rLmV2ZXJ5KChob29rMikgPT4gaG9vazIubGVuZ3RoIDw9IDEpKSBkb25lKCk7XG4gICAgfSBlbHNlIGlmIChob29rLmxlbmd0aCA8PSAxKSB7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBob29rcyA9IHtcbiAgICBtb2RlLFxuICAgIHBlcnNpc3RlZCxcbiAgICBiZWZvcmVFbnRlcihlbCkge1xuICAgICAgbGV0IGhvb2sgPSBvbkJlZm9yZUVudGVyO1xuICAgICAgaWYgKCFzdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICAgIGhvb2sgPSBvbkJlZm9yZUFwcGVhciB8fCBvbkJlZm9yZUVudGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVsW2xlYXZlQ2JLZXldKSB7XG4gICAgICAgIGVsW2xlYXZlQ2JLZXldKFxuICAgICAgICAgIHRydWVcbiAgICAgICAgICAvKiBjYW5jZWxsZWQgKi9cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxlYXZpbmdWTm9kZSA9IGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldO1xuICAgICAgaWYgKGxlYXZpbmdWTm9kZSAmJiBpc1NhbWVWTm9kZVR5cGUodm5vZGUsIGxlYXZpbmdWTm9kZSkgJiYgbGVhdmluZ1ZOb2RlLmVsW2xlYXZlQ2JLZXldKSB7XG4gICAgICAgIGxlYXZpbmdWTm9kZS5lbFtsZWF2ZUNiS2V5XSgpO1xuICAgICAgfVxuICAgICAgY2FsbEhvb2soaG9vaywgW2VsXSk7XG4gICAgfSxcbiAgICBlbnRlcihlbCkge1xuICAgICAgbGV0IGhvb2sgPSBvbkVudGVyO1xuICAgICAgbGV0IGFmdGVySG9vayA9IG9uQWZ0ZXJFbnRlcjtcbiAgICAgIGxldCBjYW5jZWxIb29rID0gb25FbnRlckNhbmNlbGxlZDtcbiAgICAgIGlmICghc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgICBob29rID0gb25BcHBlYXIgfHwgb25FbnRlcjtcbiAgICAgICAgICBhZnRlckhvb2sgPSBvbkFmdGVyQXBwZWFyIHx8IG9uQWZ0ZXJFbnRlcjtcbiAgICAgICAgICBjYW5jZWxIb29rID0gb25BcHBlYXJDYW5jZWxsZWQgfHwgb25FbnRlckNhbmNlbGxlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGRvbmUgPSBlbFtlbnRlckNiS2V5XSA9IChjYW5jZWxsZWQpID0+IHtcbiAgICAgICAgaWYgKGNhbGxlZCkgcmV0dXJuO1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgY2FsbEhvb2soY2FuY2VsSG9vaywgW2VsXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbEhvb2soYWZ0ZXJIb29rLCBbZWxdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaG9va3MuZGVsYXllZExlYXZlKSB7XG4gICAgICAgICAgaG9va3MuZGVsYXllZExlYXZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxbZW50ZXJDYktleV0gPSB2b2lkIDA7XG4gICAgICB9O1xuICAgICAgaWYgKGhvb2spIHtcbiAgICAgICAgY2FsbEFzeW5jSG9vayhob29rLCBbZWwsIGRvbmVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxlYXZlKGVsLCByZW1vdmUpIHtcbiAgICAgIGNvbnN0IGtleTIgPSBTdHJpbmcodm5vZGUua2V5KTtcbiAgICAgIGlmIChlbFtlbnRlckNiS2V5XSkge1xuICAgICAgICBlbFtlbnRlckNiS2V5XShcbiAgICAgICAgICB0cnVlXG4gICAgICAgICAgLyogY2FuY2VsbGVkICovXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhdGUuaXNVbm1vdW50aW5nKSB7XG4gICAgICAgIHJldHVybiByZW1vdmUoKTtcbiAgICAgIH1cbiAgICAgIGNhbGxIb29rKG9uQmVmb3JlTGVhdmUsIFtlbF0pO1xuICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICAgICAgY29uc3QgZG9uZSA9IGVsW2xlYXZlQ2JLZXldID0gKGNhbmNlbGxlZCkgPT4ge1xuICAgICAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIHJlbW92ZSgpO1xuICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgY2FsbEhvb2sob25MZWF2ZUNhbmNlbGxlZCwgW2VsXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbEhvb2sob25BZnRlckxlYXZlLCBbZWxdKTtcbiAgICAgICAgfVxuICAgICAgICBlbFtsZWF2ZUNiS2V5XSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGxlYXZpbmdWTm9kZXNDYWNoZVtrZXkyXSA9PT0gdm5vZGUpIHtcbiAgICAgICAgICBkZWxldGUgbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleTJdO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleTJdID0gdm5vZGU7XG4gICAgICBpZiAob25MZWF2ZSkge1xuICAgICAgICBjYWxsQXN5bmNIb29rKG9uTGVhdmUsIFtlbCwgZG9uZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2xvbmUodm5vZGUyKSB7XG4gICAgICBjb25zdCBob29rczIgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKFxuICAgICAgICB2bm9kZTIsXG4gICAgICAgIHByb3BzLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgIHBvc3RDbG9uZVxuICAgICAgKTtcbiAgICAgIGlmIChwb3N0Q2xvbmUpIHBvc3RDbG9uZShob29rczIpO1xuICAgICAgcmV0dXJuIGhvb2tzMjtcbiAgICB9XG4gIH07XG4gIHJldHVybiBob29rcztcbn1cbmZ1bmN0aW9uIGVtcHR5UGxhY2Vob2xkZXIodm5vZGUpIHtcbiAgaWYgKGlzS2VlcEFsaXZlKHZub2RlKSkge1xuICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgdm5vZGUuY2hpbGRyZW4gPSBudWxsO1xuICAgIHJldHVybiB2bm9kZTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0SW5uZXJDaGlsZCQxKHZub2RlKSB7XG4gIGlmICghaXNLZWVwQWxpdmUodm5vZGUpKSB7XG4gICAgaWYgKGlzVGVsZXBvcnQodm5vZGUudHlwZSkgJiYgdm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiBmaW5kTm9uQ29tbWVudENoaWxkKHZub2RlLmNoaWxkcmVuKTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlO1xuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHZub2RlLmNvbXBvbmVudCkge1xuICAgIHJldHVybiB2bm9kZS5jb21wb25lbnQuc3ViVHJlZTtcbiAgfVxuICBjb25zdCB7IHNoYXBlRmxhZywgY2hpbGRyZW4gfSA9IHZub2RlO1xuICBpZiAoY2hpbGRyZW4pIHtcbiAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlblswXTtcbiAgICB9XG4gICAgaWYgKHNoYXBlRmxhZyAmIDMyICYmIGlzRnVuY3Rpb24oY2hpbGRyZW4uZGVmYXVsdCkpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbi5kZWZhdWx0KCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUsIGhvb2tzKSB7XG4gIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2ICYmIHZub2RlLmNvbXBvbmVudCkge1xuICAgIHZub2RlLnRyYW5zaXRpb24gPSBob29rcztcbiAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGhvb2tzKTtcbiAgfSBlbHNlIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxMjgpIHtcbiAgICB2bm9kZS5zc0NvbnRlbnQudHJhbnNpdGlvbiA9IGhvb2tzLmNsb25lKHZub2RlLnNzQ29udGVudCk7XG4gICAgdm5vZGUuc3NGYWxsYmFjay50cmFuc2l0aW9uID0gaG9va3MuY2xvbmUodm5vZGUuc3NGYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgdm5vZGUudHJhbnNpdGlvbiA9IGhvb2tzO1xuICB9XG59XG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGRyZW4sIGtlZXBDb21tZW50ID0gZmFsc2UsIHBhcmVudEtleSkge1xuICBsZXQgcmV0ID0gW107XG4gIGxldCBrZXllZEZyYWdtZW50Q291bnQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgY29uc3Qga2V5ID0gcGFyZW50S2V5ID09IG51bGwgPyBjaGlsZC5rZXkgOiBTdHJpbmcocGFyZW50S2V5KSArIFN0cmluZyhjaGlsZC5rZXkgIT0gbnVsbCA/IGNoaWxkLmtleSA6IGkpO1xuICAgIGlmIChjaGlsZC50eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgaWYgKGNoaWxkLnBhdGNoRmxhZyAmIDEyOCkga2V5ZWRGcmFnbWVudENvdW50Kys7XG4gICAgICByZXQgPSByZXQuY29uY2F0KFxuICAgICAgICBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGQuY2hpbGRyZW4sIGtlZXBDb21tZW50LCBrZXkpXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoa2VlcENvbW1lbnQgfHwgY2hpbGQudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgcmV0LnB1c2goa2V5ICE9IG51bGwgPyBjbG9uZVZOb2RlKGNoaWxkLCB7IGtleSB9KSA6IGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgaWYgKGtleWVkRnJhZ21lbnRDb3VudCA+IDEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJldC5sZW5ndGg7IGkrKykge1xuICAgICAgcmV0W2ldLnBhdGNoRmxhZyA9IC0yO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vKiEgI19fTk9fU0lERV9FRkZFQ1RTX18gKi9cbi8vIEBfX05PX1NJREVfRUZGRUNUU19fXG5mdW5jdGlvbiBkZWZpbmVDb21wb25lbnQob3B0aW9ucywgZXh0cmFPcHRpb25zKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKG9wdGlvbnMpID8gKFxuICAgIC8vICM4MjM2OiBleHRlbmQgY2FsbCBhbmQgb3B0aW9ucy5uYW1lIGFjY2VzcyBhcmUgY29uc2lkZXJlZCBzaWRlLWVmZmVjdHNcbiAgICAvLyBieSBSb2xsdXAsIHNvIHdlIGhhdmUgdG8gd3JhcCBpdCBpbiBhIHB1cmUtYW5ub3RhdGVkIElJRkUuXG4gICAgLyogQF9fUFVSRV9fICovICgoKSA9PiBleHRlbmQoeyBuYW1lOiBvcHRpb25zLm5hbWUgfSwgZXh0cmFPcHRpb25zLCB7IHNldHVwOiBvcHRpb25zIH0pKSgpXG4gICkgOiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiB1c2VJZCgpIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoaSkge1xuICAgIHJldHVybiAoaS5hcHBDb250ZXh0LmNvbmZpZy5pZFByZWZpeCB8fCBcInZcIikgKyBcIi1cIiArIGkuaWRzWzBdICsgaS5pZHNbMV0rKztcbiAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgd2FybiQxKFxuICAgICAgYHVzZUlkKCkgaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZSB0byBiZSBhc3NvY2lhdGVkIHdpdGguYFxuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtBc3luY0JvdW5kYXJ5KGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLmlkcyA9IFtpbnN0YW5jZS5pZHNbMF0gKyBpbnN0YW5jZS5pZHNbMl0rKyArIFwiLVwiLCAwLCAwXTtcbn1cblxuY29uc3Qga25vd25UZW1wbGF0ZVJlZnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbmZ1bmN0aW9uIHVzZVRlbXBsYXRlUmVmKGtleSkge1xuICBjb25zdCBpID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIGNvbnN0IHIgPSBzaGFsbG93UmVmKG51bGwpO1xuICBpZiAoaSkge1xuICAgIGNvbnN0IHJlZnMgPSBpLnJlZnMgPT09IEVNUFRZX09CSiA/IGkucmVmcyA9IHt9IDogaS5yZWZzO1xuICAgIGxldCBkZXNjO1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIChkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyZWZzLCBrZXkpKSAmJiAhZGVzYy5jb25maWd1cmFibGUpIHtcbiAgICAgIHdhcm4kMShgdXNlVGVtcGxhdGVSZWYoJyR7a2V5fScpIGFscmVhZHkgZXhpc3RzLmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVmcywga2V5LCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogKCkgPT4gci52YWx1ZSxcbiAgICAgICAgc2V0OiAodmFsKSA9PiByLnZhbHVlID0gdmFsXG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIHdhcm4kMShcbiAgICAgIGB1c2VUZW1wbGF0ZVJlZigpIGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UgdG8gYmUgYXNzb2NpYXRlZCB3aXRoLmBcbiAgICApO1xuICB9XG4gIGNvbnN0IHJldCA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyByZWFkb25seShyKSA6IHI7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAga25vd25UZW1wbGF0ZVJlZnMuYWRkKHJldCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2V0UmVmKHJhd1JlZiwgb2xkUmF3UmVmLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUsIGlzVW5tb3VudCA9IGZhbHNlKSB7XG4gIGlmIChpc0FycmF5KHJhd1JlZikpIHtcbiAgICByYXdSZWYuZm9yRWFjaChcbiAgICAgIChyLCBpKSA9PiBzZXRSZWYoXG4gICAgICAgIHIsXG4gICAgICAgIG9sZFJhd1JlZiAmJiAoaXNBcnJheShvbGRSYXdSZWYpID8gb2xkUmF3UmVmW2ldIDogb2xkUmF3UmVmKSxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIHZub2RlLFxuICAgICAgICBpc1VubW91bnRcbiAgICAgIClcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaXNBc3luY1dyYXBwZXIodm5vZGUpICYmICFpc1VubW91bnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcmVmVmFsdWUgPSB2bm9kZS5zaGFwZUZsYWcgJiA0ID8gZ2V0Q29tcG9uZW50UHVibGljSW5zdGFuY2Uodm5vZGUuY29tcG9uZW50KSA6IHZub2RlLmVsO1xuICBjb25zdCB2YWx1ZSA9IGlzVW5tb3VudCA/IG51bGwgOiByZWZWYWx1ZTtcbiAgY29uc3QgeyBpOiBvd25lciwgcjogcmVmIH0gPSByYXdSZWY7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFvd25lcikge1xuICAgIHdhcm4kMShcbiAgICAgIGBNaXNzaW5nIHJlZiBvd25lciBjb250ZXh0LiByZWYgY2Fubm90IGJlIHVzZWQgb24gaG9pc3RlZCB2bm9kZXMuIEEgdm5vZGUgd2l0aCByZWYgbXVzdCBiZSBjcmVhdGVkIGluc2lkZSB0aGUgcmVuZGVyIGZ1bmN0aW9uLmBcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBvbGRSZWYgPSBvbGRSYXdSZWYgJiYgb2xkUmF3UmVmLnI7XG4gIGNvbnN0IHJlZnMgPSBvd25lci5yZWZzID09PSBFTVBUWV9PQkogPyBvd25lci5yZWZzID0ge30gOiBvd25lci5yZWZzO1xuICBjb25zdCBzZXR1cFN0YXRlID0gb3duZXIuc2V0dXBTdGF0ZTtcbiAgY29uc3QgcmF3U2V0dXBTdGF0ZSA9IHRvUmF3KHNldHVwU3RhdGUpO1xuICBjb25zdCBjYW5TZXRTZXR1cFJlZiA9IHNldHVwU3RhdGUgPT09IEVNUFRZX09CSiA/ICgpID0+IGZhbHNlIDogKGtleSkgPT4ge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGtub3duVGVtcGxhdGVSZWZzLmhhcyhyYXdTZXR1cFN0YXRlW2tleV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBoYXNPd24ocmF3U2V0dXBTdGF0ZSwga2V5KTtcbiAgfTtcbiAgaWYgKG9sZFJlZiAhPSBudWxsICYmIG9sZFJlZiAhPT0gcmVmKSB7XG4gICAgaWYgKGlzU3RyaW5nKG9sZFJlZikpIHtcbiAgICAgIHJlZnNbb2xkUmVmXSA9IG51bGw7XG4gICAgICBpZiAoY2FuU2V0U2V0dXBSZWYob2xkUmVmKSkge1xuICAgICAgICBzZXR1cFN0YXRlW29sZFJlZl0gPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNSZWYob2xkUmVmKSkge1xuICAgICAgb2xkUmVmLnZhbHVlID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgaWYgKGlzRnVuY3Rpb24ocmVmKSkge1xuICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhyZWYsIG93bmVyLCAxMiwgW3ZhbHVlLCByZWZzXSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgX2lzU3RyaW5nID0gaXNTdHJpbmcocmVmKTtcbiAgICBjb25zdCBfaXNSZWYgPSBpc1JlZihyZWYpO1xuICAgIGlmIChfaXNTdHJpbmcgfHwgX2lzUmVmKSB7XG4gICAgICBjb25zdCBkb1NldCA9ICgpID0+IHtcbiAgICAgICAgaWYgKHJhd1JlZi5mKSB7XG4gICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBfaXNTdHJpbmcgPyBjYW5TZXRTZXR1cFJlZihyZWYpID8gc2V0dXBTdGF0ZVtyZWZdIDogcmVmc1tyZWZdIDogcmVmLnZhbHVlO1xuICAgICAgICAgIGlmIChpc1VubW91bnQpIHtcbiAgICAgICAgICAgIGlzQXJyYXkoZXhpc3RpbmcpICYmIHJlbW92ZShleGlzdGluZywgcmVmVmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkoZXhpc3RpbmcpKSB7XG4gICAgICAgICAgICAgIGlmIChfaXNTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICByZWZzW3JlZl0gPSBbcmVmVmFsdWVdO1xuICAgICAgICAgICAgICAgIGlmIChjYW5TZXRTZXR1cFJlZihyZWYpKSB7XG4gICAgICAgICAgICAgICAgICBzZXR1cFN0YXRlW3JlZl0gPSByZWZzW3JlZl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlZi52YWx1ZSA9IFtyZWZWYWx1ZV07XG4gICAgICAgICAgICAgICAgaWYgKHJhd1JlZi5rKSByZWZzW3Jhd1JlZi5rXSA9IHJlZi52YWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghZXhpc3RpbmcuaW5jbHVkZXMocmVmVmFsdWUpKSB7XG4gICAgICAgICAgICAgIGV4aXN0aW5nLnB1c2gocmVmVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfaXNTdHJpbmcpIHtcbiAgICAgICAgICByZWZzW3JlZl0gPSB2YWx1ZTtcbiAgICAgICAgICBpZiAoY2FuU2V0U2V0dXBSZWYocmVmKSkge1xuICAgICAgICAgICAgc2V0dXBTdGF0ZVtyZWZdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF9pc1JlZikge1xuICAgICAgICAgIHJlZi52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIGlmIChyYXdSZWYuaykgcmVmc1tyYXdSZWYua10gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgd2FybiQxKFwiSW52YWxpZCB0ZW1wbGF0ZSByZWYgdHlwZTpcIiwgcmVmLCBgKCR7dHlwZW9mIHJlZn0pYCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZG9TZXQuaWQgPSAtMTtcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGRvU2V0LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb1NldCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgd2FybiQxKFwiSW52YWxpZCB0ZW1wbGF0ZSByZWYgdHlwZTpcIiwgcmVmLCBgKCR7dHlwZW9mIHJlZn0pYCk7XG4gICAgfVxuICB9XG59XG5cbmxldCBoYXNMb2dnZWRNaXNtYXRjaEVycm9yID0gZmFsc2U7XG5jb25zdCBsb2dNaXNtYXRjaEVycm9yID0gKCkgPT4ge1xuICBpZiAoaGFzTG9nZ2VkTWlzbWF0Y2hFcnJvcikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zb2xlLmVycm9yKFwiSHlkcmF0aW9uIGNvbXBsZXRlZCBidXQgY29udGFpbnMgbWlzbWF0Y2hlcy5cIik7XG4gIGhhc0xvZ2dlZE1pc21hdGNoRXJyb3IgPSB0cnVlO1xufTtcbmNvbnN0IGlzU1ZHQ29udGFpbmVyID0gKGNvbnRhaW5lcikgPT4gY29udGFpbmVyLm5hbWVzcGFjZVVSSS5pbmNsdWRlcyhcInN2Z1wiKSAmJiBjb250YWluZXIudGFnTmFtZSAhPT0gXCJmb3JlaWduT2JqZWN0XCI7XG5jb25zdCBpc01hdGhNTENvbnRhaW5lciA9IChjb250YWluZXIpID0+IGNvbnRhaW5lci5uYW1lc3BhY2VVUkkuaW5jbHVkZXMoXCJNYXRoTUxcIik7XG5jb25zdCBnZXRDb250YWluZXJUeXBlID0gKGNvbnRhaW5lcikgPT4ge1xuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlICE9PSAxKSByZXR1cm4gdm9pZCAwO1xuICBpZiAoaXNTVkdDb250YWluZXIoY29udGFpbmVyKSkgcmV0dXJuIFwic3ZnXCI7XG4gIGlmIChpc01hdGhNTENvbnRhaW5lcihjb250YWluZXIpKSByZXR1cm4gXCJtYXRobWxcIjtcbiAgcmV0dXJuIHZvaWQgMDtcbn07XG5jb25zdCBpc0NvbW1lbnQgPSAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gODtcbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyhyZW5kZXJlckludGVybmFscykge1xuICBjb25zdCB7XG4gICAgbXQ6IG1vdW50Q29tcG9uZW50LFxuICAgIHA6IHBhdGNoLFxuICAgIG86IHtcbiAgICAgIHBhdGNoUHJvcCxcbiAgICAgIGNyZWF0ZVRleHQsXG4gICAgICBuZXh0U2libGluZyxcbiAgICAgIHBhcmVudE5vZGUsXG4gICAgICByZW1vdmUsXG4gICAgICBpbnNlcnQsXG4gICAgICBjcmVhdGVDb21tZW50XG4gICAgfVxuICB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XG4gIGNvbnN0IGh5ZHJhdGUgPSAodm5vZGUsIGNvbnRhaW5lcikgPT4ge1xuICAgIGlmICghY29udGFpbmVyLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9IWURSQVRJT05fTUlTTUFUQ0hfREVUQUlMU19fKSAmJiB3YXJuJDEoXG4gICAgICAgIGBBdHRlbXB0aW5nIHRvIGh5ZHJhdGUgZXhpc3RpbmcgbWFya3VwIGJ1dCBjb250YWluZXIgaXMgZW1wdHkuIFBlcmZvcm1pbmcgZnVsbCBtb3VudCBpbnN0ZWFkLmBcbiAgICAgICk7XG4gICAgICBwYXRjaChudWxsLCB2bm9kZSwgY29udGFpbmVyKTtcbiAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XG4gICAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGh5ZHJhdGVOb2RlKGNvbnRhaW5lci5maXJzdENoaWxkLCB2bm9kZSwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcbiAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XG4gIH07XG4gIGNvbnN0IGh5ZHJhdGVOb2RlID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XG4gICAgb3B0aW1pemVkID0gb3B0aW1pemVkIHx8ICEhdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xuICAgIGNvbnN0IGlzRnJhZ21lbnRTdGFydCA9IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09IFwiW1wiO1xuICAgIGNvbnN0IG9uTWlzbWF0Y2ggPSAoKSA9PiBoYW5kbGVNaXNtYXRjaChcbiAgICAgIG5vZGUsXG4gICAgICB2bm9kZSxcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgaXNGcmFnbWVudFN0YXJ0XG4gICAgKTtcbiAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnLCBwYXRjaEZsYWcgfSA9IHZub2RlO1xuICAgIGxldCBkb21UeXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgICB2bm9kZS5lbCA9IG5vZGU7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICBkZWYobm9kZSwgXCJfX3Zub2RlXCIsIHZub2RlLCB0cnVlKTtcbiAgICAgIGRlZihub2RlLCBcIl9fdnVlUGFyZW50Q29tcG9uZW50XCIsIHBhcmVudENvbXBvbmVudCwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChwYXRjaEZsYWcgPT09IC0yKSB7XG4gICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgIHZub2RlLmR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgfVxuICAgIGxldCBuZXh0Tm9kZSA9IG51bGw7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFRleHQ6XG4gICAgICAgIGlmIChkb21UeXBlICE9PSAzKSB7XG4gICAgICAgICAgaWYgKHZub2RlLmNoaWxkcmVuID09PSBcIlwiKSB7XG4gICAgICAgICAgICBpbnNlcnQodm5vZGUuZWwgPSBjcmVhdGVUZXh0KFwiXCIpLCBwYXJlbnROb2RlKG5vZGUpLCBub2RlKTtcbiAgICAgICAgICAgIG5leHROb2RlID0gbm9kZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChub2RlLmRhdGEgIT09IHZub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0hZRFJBVElPTl9NSVNNQVRDSF9ERVRBSUxTX18pICYmIHdhcm4kMShcbiAgICAgICAgICAgICAgYEh5ZHJhdGlvbiB0ZXh0IG1pc21hdGNoIGluYCxcbiAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICBgXG4gIC0gcmVuZGVyZWQgb24gc2VydmVyOiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIG5vZGUuZGF0YVxuICAgICAgICAgICAgICApfVxuICAtIGV4cGVjdGVkIG9uIGNsaWVudDogJHtKU09OLnN0cmluZ2lmeSh2bm9kZS5jaGlsZHJlbil9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZub2RlLmNoaWxkcmVuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDb21tZW50OlxuICAgICAgICBpZiAoaXNUZW1wbGF0ZU5vZGUobm9kZSkpIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgIHJlcGxhY2VOb2RlKFxuICAgICAgICAgICAgdm5vZGUuZWwgPSBub2RlLmNvbnRlbnQuZmlyc3RDaGlsZCxcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKGRvbVR5cGUgIT09IDggfHwgaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU3RhdGljOlxuICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgbm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgIGRvbVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb21UeXBlID09PSAxIHx8IGRvbVR5cGUgPT09IDMpIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgY29uc3QgbmVlZFRvQWRvcHRDb250ZW50ID0gIXZub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZub2RlLnN0YXRpY0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChuZWVkVG9BZG9wdENvbnRlbnQpXG4gICAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuICs9IG5leHROb2RlLm5vZGVUeXBlID09PSAxID8gbmV4dE5vZGUub3V0ZXJIVE1MIDogbmV4dE5vZGUuZGF0YTtcbiAgICAgICAgICAgIGlmIChpID09PSB2bm9kZS5zdGF0aWNDb3VudCAtIDEpIHtcbiAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gbmV4dE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5leHROb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGlzRnJhZ21lbnRTdGFydCA/IG5leHRTaWJsaW5nKG5leHROb2RlKSA6IG5leHROb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uTWlzbWF0Y2goKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgICAgIGlmICghaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRnJhZ21lbnQoXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSkge1xuICAgICAgICAgIGlmICgoZG9tVHlwZSAhPT0gMSB8fCB2bm9kZS50eXBlLnRvTG93ZXJDYXNlKCkgIT09IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAmJiAhaXNUZW1wbGF0ZU5vZGUobm9kZSkpIHtcbiAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IGh5ZHJhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYpIHtcbiAgICAgICAgICB2bm9kZS5zbG90U2NvcGVJZHMgPSBzbG90U2NvcGVJZHM7XG4gICAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcbiAgICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IGxvY2F0ZUNsb3NpbmdBbmNob3Iobm9kZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSBcInRlbGVwb3J0IHN0YXJ0XCIpIHtcbiAgICAgICAgICAgIG5leHROb2RlID0gbG9jYXRlQ2xvc2luZ0FuY2hvcihub2RlLCBub2RlLmRhdGEsIFwidGVsZXBvcnQgZW5kXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtb3VudENvbXBvbmVudChcbiAgICAgICAgICAgIHZub2RlLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgZ2V0Q29udGFpbmVyVHlwZShjb250YWluZXIpLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoaXNBc3luY1dyYXBwZXIodm5vZGUpKSB7XG4gICAgICAgICAgICBsZXQgc3ViVHJlZTtcbiAgICAgICAgICAgIGlmIChpc0ZyYWdtZW50U3RhcnQpIHtcbiAgICAgICAgICAgICAgc3ViVHJlZSA9IGNyZWF0ZVZOb2RlKEZyYWdtZW50KTtcbiAgICAgICAgICAgICAgc3ViVHJlZS5hbmNob3IgPSBuZXh0Tm9kZSA/IG5leHROb2RlLnByZXZpb3VzU2libGluZyA6IGNvbnRhaW5lci5sYXN0Q2hpbGQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdWJUcmVlID0gbm9kZS5ub2RlVHlwZSA9PT0gMyA/IGNyZWF0ZVRleHRWTm9kZShcIlwiKSA6IGNyZWF0ZVZOb2RlKFwiZGl2XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3ViVHJlZS5lbCA9IG5vZGU7XG4gICAgICAgICAgICB2bm9kZS5jb21wb25lbnQuc3ViVHJlZSA9IHN1YlRyZWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDY0KSB7XG4gICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDgpIHtcbiAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IHZub2RlLnR5cGUuaHlkcmF0ZShcbiAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICAgICAgICByZW5kZXJlckludGVybmFscyxcbiAgICAgICAgICAgICAgaHlkcmF0ZUNoaWxkcmVuXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IHZub2RlLnR5cGUuaHlkcmF0ZShcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgZ2V0Q29udGFpbmVyVHlwZShwYXJlbnROb2RlKG5vZGUpKSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZCxcbiAgICAgICAgICAgIHJlbmRlcmVySW50ZXJuYWxzLFxuICAgICAgICAgICAgaHlkcmF0ZU5vZGVcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9IWURSQVRJT05fTUlTTUFUQ0hfREVUQUlMU19fKSB7XG4gICAgICAgICAgd2FybiQxKFwiSW52YWxpZCBIb3N0Vk5vZGUgdHlwZTpcIiwgdHlwZSwgYCgke3R5cGVvZiB0eXBlfSlgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVmICE9IG51bGwpIHtcbiAgICAgIHNldFJlZihyZWYsIG51bGwsIHBhcmVudFN1c3BlbnNlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0Tm9kZTtcbiAgfTtcbiAgY29uc3QgaHlkcmF0ZUVsZW1lbnQgPSAoZWwsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXZub2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgICBjb25zdCB7IHR5cGUsIHByb3BzLCBwYXRjaEZsYWcsIHNoYXBlRmxhZywgZGlycywgdHJhbnNpdGlvbiB9ID0gdm5vZGU7XG4gICAgY29uc3QgZm9yY2VQYXRjaCA9IHR5cGUgPT09IFwiaW5wdXRcIiB8fCB0eXBlID09PSBcIm9wdGlvblwiO1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IGZvcmNlUGF0Y2ggfHwgcGF0Y2hGbGFnICE9PSAtMSkge1xuICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImNyZWF0ZWRcIik7XG4gICAgICB9XG4gICAgICBsZXQgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSBmYWxzZTtcbiAgICAgIGlmIChpc1RlbXBsYXRlTm9kZShlbCkpIHtcbiAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSBuZWVkVHJhbnNpdGlvbihwYXJlbnRTdXNwZW5zZSwgdHJhbnNpdGlvbikgJiYgcGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC52bm9kZS5wcm9wcyAmJiBwYXJlbnRDb21wb25lbnQudm5vZGUucHJvcHMuYXBwZWFyO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gZWwuY29udGVudC5maXJzdENoaWxkO1xuICAgICAgICBpZiAobmVlZENhbGxUcmFuc2l0aW9uSG9va3MpIHtcbiAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJlcGxhY2VOb2RlKGNvbnRlbnQsIGVsLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICB2bm9kZS5lbCA9IGVsID0gY29udGVudDtcbiAgICAgIH1cbiAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAmJiAvLyBza2lwIGlmIGVsZW1lbnQgaGFzIGlubmVySFRNTCAvIHRleHRDb250ZW50XG4gICAgICAhKHByb3BzICYmIChwcm9wcy5pbm5lckhUTUwgfHwgcHJvcHMudGV4dENvbnRlbnQpKSkge1xuICAgICAgICBsZXQgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihcbiAgICAgICAgICBlbC5maXJzdENoaWxkLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGVsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIGxldCBoYXNXYXJuZWQgPSBmYWxzZTtcbiAgICAgICAgd2hpbGUgKG5leHQpIHtcbiAgICAgICAgICBpZiAoIWlzTWlzbWF0Y2hBbGxvd2VkKGVsLCAxIC8qIENISUxEUkVOICovKSkge1xuICAgICAgICAgICAgaWYgKCghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfSFlEUkFUSU9OX01JU01BVENIX0RFVEFJTFNfXykgJiYgIWhhc1dhcm5lZCkge1xuICAgICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgICAgYEh5ZHJhdGlvbiBjaGlsZHJlbiBtaXNtYXRjaCBvbmAsXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgYFxuU2VydmVyIHJlbmRlcmVkIGVsZW1lbnQgY29udGFpbnMgbW9yZSBjaGlsZCBub2RlcyB0aGFuIGNsaWVudCB2ZG9tLmBcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgY3VyID0gbmV4dDtcbiAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcbiAgICAgICAgICByZW1vdmUoY3VyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiA4KSB7XG4gICAgICAgIGxldCBjbGllbnRUZXh0ID0gdm5vZGUuY2hpbGRyZW47XG4gICAgICAgIGlmIChjbGllbnRUZXh0WzBdID09PSBcIlxcblwiICYmIChlbC50YWdOYW1lID09PSBcIlBSRVwiIHx8IGVsLnRhZ05hbWUgPT09IFwiVEVYVEFSRUFcIikpIHtcbiAgICAgICAgICBjbGllbnRUZXh0ID0gY2xpZW50VGV4dC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWwudGV4dENvbnRlbnQgIT09IGNsaWVudFRleHQpIHtcbiAgICAgICAgICBpZiAoIWlzTWlzbWF0Y2hBbGxvd2VkKGVsLCAwIC8qIFRFWFQgKi8pKSB7XG4gICAgICAgICAgICAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0hZRFJBVElPTl9NSVNNQVRDSF9ERVRBSUxTX18pICYmIHdhcm4kMShcbiAgICAgICAgICAgICAgYEh5ZHJhdGlvbiB0ZXh0IGNvbnRlbnQgbWlzbWF0Y2ggb25gLFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgYFxuICAtIHJlbmRlcmVkIG9uIHNlcnZlcjogJHtlbC50ZXh0Q29udGVudH1cbiAgLSBleHBlY3RlZCBvbiBjbGllbnQ6ICR7dm5vZGUuY2hpbGRyZW59YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWwudGV4dENvbnRlbnQgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfSFlEUkFUSU9OX01JU01BVENIX0RFVEFJTFNfXyB8fCBmb3JjZVBhdGNoIHx8ICFvcHRpbWl6ZWQgfHwgcGF0Y2hGbGFnICYgKDE2IHwgMzIpKSB7XG4gICAgICAgICAgY29uc3QgaXNDdXN0b21FbGVtZW50ID0gZWwudGFnTmFtZS5pbmNsdWRlcyhcIi1cIik7XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGlmICgoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0hZRFJBVElPTl9NSVNNQVRDSF9ERVRBSUxTX18pICYmIC8vICMxMTE4OSBza2lwIGlmIHRoaXMgbm9kZSBoYXMgZGlyZWN0aXZlcyB0aGF0IGhhdmUgY3JlYXRlZCBob29rc1xuICAgICAgICAgICAgLy8gYXMgaXQgY291bGQgaGF2ZSBtdXRhdGVkIHRoZSBET00gaW4gYW55IHBvc3NpYmxlIHdheVxuICAgICAgICAgICAgIShkaXJzICYmIGRpcnMuc29tZSgoZCkgPT4gZC5kaXIuY3JlYXRlZCkpICYmIHByb3BIYXNNaXNtYXRjaChlbCwga2V5LCBwcm9wc1trZXldLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50KSkge1xuICAgICAgICAgICAgICBsb2dNaXNtYXRjaEVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm9yY2VQYXRjaCAmJiAoa2V5LmVuZHNXaXRoKFwidmFsdWVcIikgfHwga2V5ID09PSBcImluZGV0ZXJtaW5hdGVcIikgfHwgaXNPbihrZXkpICYmICFpc1Jlc2VydmVkUHJvcChrZXkpIHx8IC8vIGZvcmNlIGh5ZHJhdGUgdi1iaW5kIHdpdGggLnByb3AgbW9kaWZpZXJzXG4gICAgICAgICAgICBrZXlbMF0gPT09IFwiLlwiIHx8IGlzQ3VzdG9tRWxlbWVudCkge1xuICAgICAgICAgICAgICBwYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSwgdm9pZCAwLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgICAgcGF0Y2hQcm9wKFxuICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICBcIm9uQ2xpY2tcIixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwcm9wcy5vbkNsaWNrLFxuICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXRjaEZsYWcgJiA0ICYmIGlzUmVhY3RpdmUocHJvcHMuc3R5bGUpKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMuc3R5bGUpIHByb3BzLnN0eWxlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCB2bm9kZUhvb2tzO1xuICAgICAgaWYgKHZub2RlSG9va3MgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpIHtcbiAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImJlZm9yZU1vdW50XCIpO1xuICAgICAgfVxuICAgICAgaWYgKCh2bm9kZUhvb2tzID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8IGRpcnMgfHwgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MpIHtcbiAgICAgICAgcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UoKCkgPT4ge1xuICAgICAgICAgIHZub2RlSG9va3MgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzICYmIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xuICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcIm1vdW50ZWRcIik7XG4gICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsLm5leHRTaWJsaW5nO1xuICB9O1xuICBjb25zdCBoeWRyYXRlQ2hpbGRyZW4gPSAobm9kZSwgcGFyZW50Vk5vZGUsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBvcHRpbWl6ZWQgPSBvcHRpbWl6ZWQgfHwgISFwYXJlbnRWTm9kZS5keW5hbWljQ2hpbGRyZW47XG4gICAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnRWTm9kZS5jaGlsZHJlbjtcbiAgICBjb25zdCBsID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGxldCBoYXNXYXJuZWQgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3Qgdm5vZGUgPSBvcHRpbWl6ZWQgPyBjaGlsZHJlbltpXSA6IGNoaWxkcmVuW2ldID0gbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baV0pO1xuICAgICAgY29uc3QgaXNUZXh0ID0gdm5vZGUudHlwZSA9PT0gVGV4dDtcbiAgICAgIGlmIChub2RlKSB7XG4gICAgICAgIGlmIChpc1RleHQgJiYgIW9wdGltaXplZCkge1xuICAgICAgICAgIGlmIChpICsgMSA8IGwgJiYgbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baSArIDFdKS50eXBlID09PSBUZXh0KSB7XG4gICAgICAgICAgICBpbnNlcnQoXG4gICAgICAgICAgICAgIGNyZWF0ZVRleHQoXG4gICAgICAgICAgICAgICAgbm9kZS5kYXRhLnNsaWNlKHZub2RlLmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgICBuZXh0U2libGluZyhub2RlKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZub2RlLmNoaWxkcmVuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBub2RlID0gaHlkcmF0ZU5vZGUoXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChpc1RleHQgJiYgIXZub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIGluc2VydCh2bm9kZS5lbCA9IGNyZWF0ZVRleHQoXCJcIiksIGNvbnRhaW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWlzTWlzbWF0Y2hBbGxvd2VkKGNvbnRhaW5lciwgMSAvKiBDSElMRFJFTiAqLykpIHtcbiAgICAgICAgICBpZiAoKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9IWURSQVRJT05fTUlTTUFUQ0hfREVUQUlMU19fKSAmJiAhaGFzV2FybmVkKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIGBIeWRyYXRpb24gY2hpbGRyZW4gbWlzbWF0Y2ggb25gLFxuICAgICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICAgIGBcblNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIGZld2VyIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBwYXRjaChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBnZXRDb250YWluZXJUeXBlKGNvbnRhaW5lciksXG4gICAgICAgICAgc2xvdFNjb3BlSWRzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9O1xuICBjb25zdCBoeWRyYXRlRnJhZ21lbnQgPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgeyBzbG90U2NvcGVJZHM6IGZyYWdtZW50U2xvdFNjb3BlSWRzIH0gPSB2bm9kZTtcbiAgICBpZiAoZnJhZ21lbnRTbG90U2NvcGVJZHMpIHtcbiAgICAgIHNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkcyA/IHNsb3RTY29wZUlkcy5jb25jYXQoZnJhZ21lbnRTbG90U2NvcGVJZHMpIDogZnJhZ21lbnRTbG90U2NvcGVJZHM7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XG4gICAgY29uc3QgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihcbiAgICAgIG5leHRTaWJsaW5nKG5vZGUpLFxuICAgICAgdm5vZGUsXG4gICAgICBjb250YWluZXIsXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgIG9wdGltaXplZFxuICAgICk7XG4gICAgaWYgKG5leHQgJiYgaXNDb21tZW50KG5leHQpICYmIG5leHQuZGF0YSA9PT0gXCJdXCIpIHtcbiAgICAgIHJldHVybiBuZXh0U2libGluZyh2bm9kZS5hbmNob3IgPSBuZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nTWlzbWF0Y2hFcnJvcigpO1xuICAgICAgaW5zZXJ0KHZub2RlLmFuY2hvciA9IGNyZWF0ZUNvbW1lbnQoYF1gKSwgY29udGFpbmVyLCBuZXh0KTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlTWlzbWF0Y2ggPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgaXNGcmFnbWVudCkgPT4ge1xuICAgIGlmICghaXNNaXNtYXRjaEFsbG93ZWQobm9kZS5wYXJlbnRFbGVtZW50LCAxIC8qIENISUxEUkVOICovKSkge1xuICAgICAgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9IWURSQVRJT05fTUlTTUFUQ0hfREVUQUlMU19fKSAmJiB3YXJuJDEoXG4gICAgICAgIGBIeWRyYXRpb24gbm9kZSBtaXNtYXRjaDpcbi0gcmVuZGVyZWQgb24gc2VydmVyOmAsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIG5vZGUubm9kZVR5cGUgPT09IDMgPyBgKHRleHQpYCA6IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09IFwiW1wiID8gYChzdGFydCBvZiBmcmFnbWVudClgIDogYGAsXG4gICAgICAgIGBcbi0gZXhwZWN0ZWQgb24gY2xpZW50OmAsXG4gICAgICAgIHZub2RlLnR5cGVcbiAgICAgICk7XG4gICAgICBsb2dNaXNtYXRjaEVycm9yKCk7XG4gICAgfVxuICAgIHZub2RlLmVsID0gbnVsbDtcbiAgICBpZiAoaXNGcmFnbWVudCkge1xuICAgICAgY29uc3QgZW5kID0gbG9jYXRlQ2xvc2luZ0FuY2hvcihub2RlKTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IG5leHQyID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgIGlmIChuZXh0MiAmJiBuZXh0MiAhPT0gZW5kKSB7XG4gICAgICAgICAgcmVtb3ZlKG5leHQyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBuZXh0ID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcbiAgICByZW1vdmUobm9kZSk7XG4gICAgcGF0Y2goXG4gICAgICBudWxsLFxuICAgICAgdm5vZGUsXG4gICAgICBjb250YWluZXIsXG4gICAgICBuZXh0LFxuICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICBnZXRDb250YWluZXJUeXBlKGNvbnRhaW5lciksXG4gICAgICBzbG90U2NvcGVJZHNcbiAgICApO1xuICAgIHJldHVybiBuZXh0O1xuICB9O1xuICBjb25zdCBsb2NhdGVDbG9zaW5nQW5jaG9yID0gKG5vZGUsIG9wZW4gPSBcIltcIiwgY2xvc2UgPSBcIl1cIikgPT4ge1xuICAgIGxldCBtYXRjaCA9IDA7XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIG5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgIGlmIChub2RlICYmIGlzQ29tbWVudChub2RlKSkge1xuICAgICAgICBpZiAobm9kZS5kYXRhID09PSBvcGVuKSBtYXRjaCsrO1xuICAgICAgICBpZiAobm9kZS5kYXRhID09PSBjbG9zZSkge1xuICAgICAgICAgIGlmIChtYXRjaCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXRjaC0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcbiAgY29uc3QgcmVwbGFjZU5vZGUgPSAobmV3Tm9kZSwgb2xkTm9kZSwgcGFyZW50Q29tcG9uZW50KSA9PiB7XG4gICAgY29uc3QgcGFyZW50Tm9kZTIgPSBvbGROb2RlLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudE5vZGUyKSB7XG4gICAgICBwYXJlbnROb2RlMi5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgb2xkTm9kZSk7XG4gICAgfVxuICAgIGxldCBwYXJlbnQgPSBwYXJlbnRDb21wb25lbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC52bm9kZS5lbCA9PT0gb2xkTm9kZSkge1xuICAgICAgICBwYXJlbnQudm5vZGUuZWwgPSBwYXJlbnQuc3ViVHJlZS5lbCA9IG5ld05vZGU7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaXNUZW1wbGF0ZU5vZGUgPSAobm9kZSkgPT4ge1xuICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAxICYmIG5vZGUudGFnTmFtZSA9PT0gXCJURU1QTEFURVwiO1xuICB9O1xuICByZXR1cm4gW2h5ZHJhdGUsIGh5ZHJhdGVOb2RlXTtcbn1cbmZ1bmN0aW9uIHByb3BIYXNNaXNtYXRjaChlbCwga2V5LCBjbGllbnRWYWx1ZSwgdm5vZGUsIGluc3RhbmNlKSB7XG4gIGxldCBtaXNtYXRjaFR5cGU7XG4gIGxldCBtaXNtYXRjaEtleTtcbiAgbGV0IGFjdHVhbDtcbiAgbGV0IGV4cGVjdGVkO1xuICBpZiAoa2V5ID09PSBcImNsYXNzXCIpIHtcbiAgICBhY3R1YWwgPSBlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKTtcbiAgICBleHBlY3RlZCA9IG5vcm1hbGl6ZUNsYXNzKGNsaWVudFZhbHVlKTtcbiAgICBpZiAoIWlzU2V0RXF1YWwodG9DbGFzc1NldChhY3R1YWwgfHwgXCJcIiksIHRvQ2xhc3NTZXQoZXhwZWN0ZWQpKSkge1xuICAgICAgbWlzbWF0Y2hUeXBlID0gMiAvKiBDTEFTUyAqLztcbiAgICAgIG1pc21hdGNoS2V5ID0gYGNsYXNzYDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoa2V5ID09PSBcInN0eWxlXCIpIHtcbiAgICBhY3R1YWwgPSBlbC5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKSB8fCBcIlwiO1xuICAgIGV4cGVjdGVkID0gaXNTdHJpbmcoY2xpZW50VmFsdWUpID8gY2xpZW50VmFsdWUgOiBzdHJpbmdpZnlTdHlsZShub3JtYWxpemVTdHlsZShjbGllbnRWYWx1ZSkpO1xuICAgIGNvbnN0IGFjdHVhbE1hcCA9IHRvU3R5bGVNYXAoYWN0dWFsKTtcbiAgICBjb25zdCBleHBlY3RlZE1hcCA9IHRvU3R5bGVNYXAoZXhwZWN0ZWQpO1xuICAgIGlmICh2bm9kZS5kaXJzKSB7XG4gICAgICBmb3IgKGNvbnN0IHsgZGlyLCB2YWx1ZSB9IG9mIHZub2RlLmRpcnMpIHtcbiAgICAgICAgaWYgKGRpci5uYW1lID09PSBcInNob3dcIiAmJiAhdmFsdWUpIHtcbiAgICAgICAgICBleHBlY3RlZE1hcC5zZXQoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIHJlc29sdmVDc3NWYXJzKGluc3RhbmNlLCB2bm9kZSwgZXhwZWN0ZWRNYXApO1xuICAgIH1cbiAgICBpZiAoIWlzTWFwRXF1YWwoYWN0dWFsTWFwLCBleHBlY3RlZE1hcCkpIHtcbiAgICAgIG1pc21hdGNoVHlwZSA9IDMgLyogU1RZTEUgKi87XG4gICAgICBtaXNtYXRjaEtleSA9IFwic3R5bGVcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZWwgaW5zdGFuY2VvZiBTVkdFbGVtZW50ICYmIGlzS25vd25TdmdBdHRyKGtleSkgfHwgZWwgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiAoaXNCb29sZWFuQXR0cihrZXkpIHx8IGlzS25vd25IdG1sQXR0cihrZXkpKSkge1xuICAgIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAgIGFjdHVhbCA9IGVsLmhhc0F0dHJpYnV0ZShrZXkpO1xuICAgICAgZXhwZWN0ZWQgPSBpbmNsdWRlQm9vbGVhbkF0dHIoY2xpZW50VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoY2xpZW50VmFsdWUgPT0gbnVsbCkge1xuICAgICAgYWN0dWFsID0gZWwuaGFzQXR0cmlidXRlKGtleSk7XG4gICAgICBleHBlY3RlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKGtleSkpIHtcbiAgICAgICAgYWN0dWFsID0gZWwuZ2V0QXR0cmlidXRlKGtleSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJ2YWx1ZVwiICYmIGVsLnRhZ05hbWUgPT09IFwiVEVYVEFSRUFcIikge1xuICAgICAgICBhY3R1YWwgPSBlbC52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdHVhbCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZXhwZWN0ZWQgPSBpc1JlbmRlcmFibGVBdHRyVmFsdWUoY2xpZW50VmFsdWUpID8gU3RyaW5nKGNsaWVudFZhbHVlKSA6IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZCkge1xuICAgICAgbWlzbWF0Y2hUeXBlID0gNCAvKiBBVFRSSUJVVEUgKi87XG4gICAgICBtaXNtYXRjaEtleSA9IGtleTtcbiAgICB9XG4gIH1cbiAgaWYgKG1pc21hdGNoVHlwZSAhPSBudWxsICYmICFpc01pc21hdGNoQWxsb3dlZChlbCwgbWlzbWF0Y2hUeXBlKSkge1xuICAgIGNvbnN0IGZvcm1hdCA9ICh2KSA9PiB2ID09PSBmYWxzZSA/IGAobm90IHJlbmRlcmVkKWAgOiBgJHttaXNtYXRjaEtleX09XCIke3Z9XCJgO1xuICAgIGNvbnN0IHByZVNlZ21lbnQgPSBgSHlkcmF0aW9uICR7TWlzbWF0Y2hUeXBlU3RyaW5nW21pc21hdGNoVHlwZV19IG1pc21hdGNoIG9uYDtcbiAgICBjb25zdCBwb3N0U2VnbWVudCA9IGBcbiAgLSByZW5kZXJlZCBvbiBzZXJ2ZXI6ICR7Zm9ybWF0KGFjdHVhbCl9XG4gIC0gZXhwZWN0ZWQgb24gY2xpZW50OiAke2Zvcm1hdChleHBlY3RlZCl9XG4gIE5vdGU6IHRoaXMgbWlzbWF0Y2ggaXMgY2hlY2stb25seS4gVGhlIERPTSB3aWxsIG5vdCBiZSByZWN0aWZpZWQgaW4gcHJvZHVjdGlvbiBkdWUgdG8gcGVyZm9ybWFuY2Ugb3ZlcmhlYWQuXG4gIFlvdSBzaG91bGQgZml4IHRoZSBzb3VyY2Ugb2YgdGhlIG1pc21hdGNoLmA7XG4gICAge1xuICAgICAgd2FybiQxKHByZVNlZ21lbnQsIGVsLCBwb3N0U2VnbWVudCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHRvQ2xhc3NTZXQoc3RyKSB7XG4gIHJldHVybiBuZXcgU2V0KHN0ci50cmltKCkuc3BsaXQoL1xccysvKSk7XG59XG5mdW5jdGlvbiBpc1NldEVxdWFsKGEsIGIpIHtcbiAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoY29uc3QgcyBvZiBhKSB7XG4gICAgaWYgKCFiLmhhcyhzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHRvU3R5bGVNYXAoc3RyKSB7XG4gIGNvbnN0IHN0eWxlTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIHN0ci5zcGxpdChcIjtcIikpIHtcbiAgICBsZXQgW2tleSwgdmFsdWVdID0gaXRlbS5zcGxpdChcIjpcIik7XG4gICAga2V5ID0ga2V5LnRyaW0oKTtcbiAgICB2YWx1ZSA9IHZhbHVlICYmIHZhbHVlLnRyaW0oKTtcbiAgICBpZiAoa2V5ICYmIHZhbHVlKSB7XG4gICAgICBzdHlsZU1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZU1hcDtcbn1cbmZ1bmN0aW9uIGlzTWFwRXF1YWwoYSwgYikge1xuICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgYSkge1xuICAgIGlmICh2YWx1ZSAhPT0gYi5nZXQoa2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDc3NWYXJzKGluc3RhbmNlLCB2bm9kZSwgZXhwZWN0ZWRNYXApIHtcbiAgY29uc3Qgcm9vdCA9IGluc3RhbmNlLnN1YlRyZWU7XG4gIGlmIChpbnN0YW5jZS5nZXRDc3NWYXJzICYmICh2bm9kZSA9PT0gcm9vdCB8fCByb290ICYmIHJvb3QudHlwZSA9PT0gRnJhZ21lbnQgJiYgcm9vdC5jaGlsZHJlbi5pbmNsdWRlcyh2bm9kZSkpKSB7XG4gICAgY29uc3QgY3NzVmFycyA9IGluc3RhbmNlLmdldENzc1ZhcnMoKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjc3NWYXJzKSB7XG4gICAgICBleHBlY3RlZE1hcC5zZXQoXG4gICAgICAgIGAtLSR7Z2V0RXNjYXBlZENzc1Zhck5hbWUoa2V5LCBmYWxzZSl9YCxcbiAgICAgICAgU3RyaW5nKGNzc1ZhcnNba2V5XSlcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmICh2bm9kZSA9PT0gcm9vdCAmJiBpbnN0YW5jZS5wYXJlbnQpIHtcbiAgICByZXNvbHZlQ3NzVmFycyhpbnN0YW5jZS5wYXJlbnQsIGluc3RhbmNlLnZub2RlLCBleHBlY3RlZE1hcCk7XG4gIH1cbn1cbmNvbnN0IGFsbG93TWlzbWF0Y2hBdHRyID0gXCJkYXRhLWFsbG93LW1pc21hdGNoXCI7XG5jb25zdCBNaXNtYXRjaFR5cGVTdHJpbmcgPSB7XG4gIFswIC8qIFRFWFQgKi9dOiBcInRleHRcIixcbiAgWzEgLyogQ0hJTERSRU4gKi9dOiBcImNoaWxkcmVuXCIsXG4gIFsyIC8qIENMQVNTICovXTogXCJjbGFzc1wiLFxuICBbMyAvKiBTVFlMRSAqL106IFwic3R5bGVcIixcbiAgWzQgLyogQVRUUklCVVRFICovXTogXCJhdHRyaWJ1dGVcIlxufTtcbmZ1bmN0aW9uIGlzTWlzbWF0Y2hBbGxvd2VkKGVsLCBhbGxvd2VkVHlwZSkge1xuICBpZiAoYWxsb3dlZFR5cGUgPT09IDAgLyogVEVYVCAqLyB8fCBhbGxvd2VkVHlwZSA9PT0gMSAvKiBDSElMRFJFTiAqLykge1xuICAgIHdoaWxlIChlbCAmJiAhZWwuaGFzQXR0cmlidXRlKGFsbG93TWlzbWF0Y2hBdHRyKSkge1xuICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgfVxuICBjb25zdCBhbGxvd2VkQXR0ciA9IGVsICYmIGVsLmdldEF0dHJpYnV0ZShhbGxvd01pc21hdGNoQXR0cik7XG4gIGlmIChhbGxvd2VkQXR0ciA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGFsbG93ZWRBdHRyID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbGlzdCA9IGFsbG93ZWRBdHRyLnNwbGl0KFwiLFwiKTtcbiAgICBpZiAoYWxsb3dlZFR5cGUgPT09IDAgLyogVEVYVCAqLyAmJiBsaXN0LmluY2x1ZGVzKFwiY2hpbGRyZW5cIikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gYWxsb3dlZEF0dHIuc3BsaXQoXCIsXCIpLmluY2x1ZGVzKE1pc21hdGNoVHlwZVN0cmluZ1thbGxvd2VkVHlwZV0pO1xuICB9XG59XG5cbmNvbnN0IGh5ZHJhdGVPbklkbGUgPSAodGltZW91dCA9IDFlNCkgPT4gKGh5ZHJhdGUpID0+IHtcbiAgY29uc3QgaWQgPSByZXF1ZXN0SWRsZUNhbGxiYWNrKGh5ZHJhdGUsIHsgdGltZW91dCB9KTtcbiAgcmV0dXJuICgpID0+IGNhbmNlbElkbGVDYWxsYmFjayhpZCk7XG59O1xuZnVuY3Rpb24gZWxlbWVudElzVmlzaWJsZUluVmlld3BvcnQoZWwpIHtcbiAgY29uc3QgeyB0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQgfSA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCB7IGlubmVySGVpZ2h0LCBpbm5lcldpZHRoIH0gPSB3aW5kb3c7XG4gIHJldHVybiAodG9wID4gMCAmJiB0b3AgPCBpbm5lckhlaWdodCB8fCBib3R0b20gPiAwICYmIGJvdHRvbSA8IGlubmVySGVpZ2h0KSAmJiAobGVmdCA+IDAgJiYgbGVmdCA8IGlubmVyV2lkdGggfHwgcmlnaHQgPiAwICYmIHJpZ2h0IDwgaW5uZXJXaWR0aCk7XG59XG5jb25zdCBoeWRyYXRlT25WaXNpYmxlID0gKG9wdHMpID0+IChoeWRyYXRlLCBmb3JFYWNoKSA9PiB7XG4gIGNvbnN0IG9iID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgZm9yIChjb25zdCBlIG9mIGVudHJpZXMpIHtcbiAgICAgIGlmICghZS5pc0ludGVyc2VjdGluZykgY29udGludWU7XG4gICAgICBvYi5kaXNjb25uZWN0KCk7XG4gICAgICBoeWRyYXRlKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0sIG9wdHMpO1xuICBmb3JFYWNoKChlbCkgPT4ge1xuICAgIGlmICghKGVsIGluc3RhbmNlb2YgRWxlbWVudCkpIHJldHVybjtcbiAgICBpZiAoZWxlbWVudElzVmlzaWJsZUluVmlld3BvcnQoZWwpKSB7XG4gICAgICBoeWRyYXRlKCk7XG4gICAgICBvYi5kaXNjb25uZWN0KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iLm9ic2VydmUoZWwpO1xuICB9KTtcbiAgcmV0dXJuICgpID0+IG9iLmRpc2Nvbm5lY3QoKTtcbn07XG5jb25zdCBoeWRyYXRlT25NZWRpYVF1ZXJ5ID0gKHF1ZXJ5KSA9PiAoaHlkcmF0ZSkgPT4ge1xuICBpZiAocXVlcnkpIHtcbiAgICBjb25zdCBtcWwgPSBtYXRjaE1lZGlhKHF1ZXJ5KTtcbiAgICBpZiAobXFsLm1hdGNoZXMpIHtcbiAgICAgIGh5ZHJhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbXFsLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgaHlkcmF0ZSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuICgpID0+IG1xbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGh5ZHJhdGUpO1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IGh5ZHJhdGVPbkludGVyYWN0aW9uID0gKGludGVyYWN0aW9ucyA9IFtdKSA9PiAoaHlkcmF0ZSwgZm9yRWFjaCkgPT4ge1xuICBpZiAoaXNTdHJpbmcoaW50ZXJhY3Rpb25zKSkgaW50ZXJhY3Rpb25zID0gW2ludGVyYWN0aW9uc107XG4gIGxldCBoYXNIeWRyYXRlZCA9IGZhbHNlO1xuICBjb25zdCBkb0h5ZHJhdGUgPSAoZSkgPT4ge1xuICAgIGlmICghaGFzSHlkcmF0ZWQpIHtcbiAgICAgIGhhc0h5ZHJhdGVkID0gdHJ1ZTtcbiAgICAgIHRlYXJkb3duKCk7XG4gICAgICBoeWRyYXRlKCk7XG4gICAgICBlLnRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBlLmNvbnN0cnVjdG9yKGUudHlwZSwgZSkpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdGVhcmRvd24gPSAoKSA9PiB7XG4gICAgZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGZvciAoY29uc3QgaSBvZiBpbnRlcmFjdGlvbnMpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihpLCBkb0h5ZHJhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBmb3JFYWNoKChlbCkgPT4ge1xuICAgIGZvciAoY29uc3QgaSBvZiBpbnRlcmFjdGlvbnMpIHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoaSwgZG9IeWRyYXRlLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRlYXJkb3duO1xufTtcbmZ1bmN0aW9uIGZvckVhY2hFbGVtZW50KG5vZGUsIGNiKSB7XG4gIGlmIChpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSBcIltcIikge1xuICAgIGxldCBkZXB0aCA9IDE7XG4gICAgbGV0IG5leHQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICBpZiAobmV4dC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjYihuZXh0KTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0NvbW1lbnQobmV4dCkpIHtcbiAgICAgICAgaWYgKG5leHQuZGF0YSA9PT0gXCJdXCIpIHtcbiAgICAgICAgICBpZiAoLS1kZXB0aCA9PT0gMCkgYnJlYWs7XG4gICAgICAgIH0gZWxzZSBpZiAobmV4dC5kYXRhID09PSBcIltcIikge1xuICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjYihub2RlKTtcbiAgfVxufVxuXG5jb25zdCBpc0FzeW5jV3JhcHBlciA9IChpKSA9PiAhIWkudHlwZS5fX2FzeW5jTG9hZGVyO1xuLyohICNfX05PX1NJREVfRUZGRUNUU19fICovXG4vLyBAX19OT19TSURFX0VGRkVDVFNfX1xuZnVuY3Rpb24gZGVmaW5lQXN5bmNDb21wb25lbnQoc291cmNlKSB7XG4gIGlmIChpc0Z1bmN0aW9uKHNvdXJjZSkpIHtcbiAgICBzb3VyY2UgPSB7IGxvYWRlcjogc291cmNlIH07XG4gIH1cbiAgY29uc3Qge1xuICAgIGxvYWRlcixcbiAgICBsb2FkaW5nQ29tcG9uZW50LFxuICAgIGVycm9yQ29tcG9uZW50LFxuICAgIGRlbGF5ID0gMjAwLFxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVTdHJhdGVneSxcbiAgICB0aW1lb3V0LFxuICAgIC8vIHVuZGVmaW5lZCA9IG5ldmVyIHRpbWVzIG91dFxuICAgIHN1c3BlbnNpYmxlID0gdHJ1ZSxcbiAgICBvbkVycm9yOiB1c2VyT25FcnJvclxuICB9ID0gc291cmNlO1xuICBsZXQgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xuICBsZXQgcmVzb2x2ZWRDb21wO1xuICBsZXQgcmV0cmllcyA9IDA7XG4gIGNvbnN0IHJldHJ5ID0gKCkgPT4ge1xuICAgIHJldHJpZXMrKztcbiAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgcmV0dXJuIGxvYWQoKTtcbiAgfTtcbiAgY29uc3QgbG9hZCA9ICgpID0+IHtcbiAgICBsZXQgdGhpc1JlcXVlc3Q7XG4gICAgcmV0dXJuIHBlbmRpbmdSZXF1ZXN0IHx8ICh0aGlzUmVxdWVzdCA9IHBlbmRpbmdSZXF1ZXN0ID0gbG9hZGVyKCkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgZXJyID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xuICAgICAgaWYgKHVzZXJPbkVycm9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3QgdXNlclJldHJ5ID0gKCkgPT4gcmVzb2x2ZShyZXRyeSgpKTtcbiAgICAgICAgICBjb25zdCB1c2VyRmFpbCA9ICgpID0+IHJlamVjdChlcnIpO1xuICAgICAgICAgIHVzZXJPbkVycm9yKGVyciwgdXNlclJldHJ5LCB1c2VyRmFpbCwgcmV0cmllcyArIDEpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9KS50aGVuKChjb21wKSA9PiB7XG4gICAgICBpZiAodGhpc1JlcXVlc3QgIT09IHBlbmRpbmdSZXF1ZXN0ICYmIHBlbmRpbmdSZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBwZW5kaW5nUmVxdWVzdDtcbiAgICAgIH1cbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFjb21wKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgQXN5bmMgY29tcG9uZW50IGxvYWRlciByZXNvbHZlZCB0byB1bmRlZmluZWQuIElmIHlvdSBhcmUgdXNpbmcgcmV0cnkoKSwgbWFrZSBzdXJlIHRvIHJldHVybiBpdHMgcmV0dXJuIHZhbHVlLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wICYmIChjb21wLl9fZXNNb2R1bGUgfHwgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSBcIk1vZHVsZVwiKSkge1xuICAgICAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgY29tcCAmJiAhaXNPYmplY3QoY29tcCkgJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFzeW5jIGNvbXBvbmVudCBsb2FkIHJlc3VsdDogJHtjb21wfWApO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZWRDb21wID0gY29tcDtcbiAgICAgIHJldHVybiBjb21wO1xuICAgIH0pKTtcbiAgfTtcbiAgcmV0dXJuIGRlZmluZUNvbXBvbmVudCh7XG4gICAgbmFtZTogXCJBc3luY0NvbXBvbmVudFdyYXBwZXJcIixcbiAgICBfX2FzeW5jTG9hZGVyOiBsb2FkLFxuICAgIF9fYXN5bmNIeWRyYXRlKGVsLCBpbnN0YW5jZSwgaHlkcmF0ZSkge1xuICAgICAgY29uc3QgZG9IeWRyYXRlID0gaHlkcmF0ZVN0cmF0ZWd5ID8gKCkgPT4ge1xuICAgICAgICBjb25zdCB0ZWFyZG93biA9IGh5ZHJhdGVTdHJhdGVneShcbiAgICAgICAgICBoeWRyYXRlLFxuICAgICAgICAgIChjYikgPT4gZm9yRWFjaEVsZW1lbnQoZWwsIGNiKVxuICAgICAgICApO1xuICAgICAgICBpZiAodGVhcmRvd24pIHtcbiAgICAgICAgICAoaW5zdGFuY2UuYnVtIHx8IChpbnN0YW5jZS5idW0gPSBbXSkpLnB1c2godGVhcmRvd24pO1xuICAgICAgICB9XG4gICAgICB9IDogaHlkcmF0ZTtcbiAgICAgIGlmIChyZXNvbHZlZENvbXApIHtcbiAgICAgICAgZG9IeWRyYXRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkKCkudGhlbigoKSA9PiAhaW5zdGFuY2UuaXNVbm1vdW50ZWQgJiYgZG9IeWRyYXRlKCkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0IF9fYXN5bmNSZXNvbHZlZCgpIHtcbiAgICAgIHJldHVybiByZXNvbHZlZENvbXA7XG4gICAgfSxcbiAgICBzZXR1cCgpIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlO1xuICAgICAgbWFya0FzeW5jQm91bmRhcnkoaW5zdGFuY2UpO1xuICAgICAgaWYgKHJlc29sdmVkQ29tcCkge1xuICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xuICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICBlcnIsXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgMTMsXG4gICAgICAgICAgIWVycm9yQ29tcG9uZW50XG4gICAgICAgICk7XG4gICAgICB9O1xuICAgICAgaWYgKHN1c3BlbnNpYmxlICYmIGluc3RhbmNlLnN1c3BlbnNlIHx8IGlzSW5TU1JDb21wb25lbnRTZXR1cCkge1xuICAgICAgICByZXR1cm4gbG9hZCgpLnRoZW4oKGNvbXApID0+IHtcbiAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKGNvbXAsIGluc3RhbmNlKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICByZXR1cm4gKCkgPT4gZXJyb3JDb21wb25lbnQgPyBjcmVhdGVWTm9kZShlcnJvckNvbXBvbmVudCwge1xuICAgICAgICAgICAgZXJyb3I6IGVyclxuICAgICAgICAgIH0pIDogbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBsb2FkZWQgPSByZWYoZmFsc2UpO1xuICAgICAgY29uc3QgZXJyb3IgPSByZWYoKTtcbiAgICAgIGNvbnN0IGRlbGF5ZWQgPSByZWYoISFkZWxheSk7XG4gICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZGVsYXllZC52YWx1ZSA9IGZhbHNlO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9XG4gICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICghbG9hZGVkLnZhbHVlICYmICFlcnJvci52YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgQXN5bmMgY29tcG9uZW50IHRpbWVkIG91dCBhZnRlciAke3RpbWVvdXR9bXMuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICB9XG4gICAgICBsb2FkKCkudGhlbigoKSA9PiB7XG4gICAgICAgIGxvYWRlZC52YWx1ZSA9IHRydWU7XG4gICAgICAgIGlmIChpbnN0YW5jZS5wYXJlbnQgJiYgaXNLZWVwQWxpdmUoaW5zdGFuY2UucGFyZW50LnZub2RlKSkge1xuICAgICAgICAgIGluc3RhbmNlLnBhcmVudC51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAobG9hZGVkLnZhbHVlICYmIHJlc29sdmVkQ29tcCkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVJbm5lckNvbXAocmVzb2x2ZWRDb21wLCBpbnN0YW5jZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXJyb3IudmFsdWUgJiYgZXJyb3JDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoZXJyb3JDb21wb25lbnQsIHtcbiAgICAgICAgICAgIGVycm9yOiBlcnJvci52YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvYWRpbmdDb21wb25lbnQgJiYgIWRlbGF5ZWQudmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUobG9hZGluZ0NvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUlubmVyQ29tcChjb21wLCBwYXJlbnQpIHtcbiAgY29uc3QgeyByZWY6IHJlZjIsIHByb3BzLCBjaGlsZHJlbiwgY2UgfSA9IHBhcmVudC52bm9kZTtcbiAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShjb21wLCBwcm9wcywgY2hpbGRyZW4pO1xuICB2bm9kZS5yZWYgPSByZWYyO1xuICB2bm9kZS5jZSA9IGNlO1xuICBkZWxldGUgcGFyZW50LnZub2RlLmNlO1xuICByZXR1cm4gdm5vZGU7XG59XG5cbmNvbnN0IGlzS2VlcEFsaXZlID0gKHZub2RlKSA9PiB2bm9kZS50eXBlLl9faXNLZWVwQWxpdmU7XG5jb25zdCBLZWVwQWxpdmVJbXBsID0ge1xuICBuYW1lOiBgS2VlcEFsaXZlYCxcbiAgLy8gTWFya2VyIGZvciBzcGVjaWFsIGhhbmRsaW5nIGluc2lkZSB0aGUgcmVuZGVyZXIuIFdlIGFyZSBub3QgdXNpbmcgYSA9PT1cbiAgLy8gY2hlY2sgZGlyZWN0bHkgb24gS2VlcEFsaXZlIGluIHRoZSByZW5kZXJlciwgYmVjYXVzZSBpbXBvcnRpbmcgaXQgZGlyZWN0bHlcbiAgLy8gd291bGQgcHJldmVudCBpdCBmcm9tIGJlaW5nIHRyZWUtc2hha2VuLlxuICBfX2lzS2VlcEFsaXZlOiB0cnVlLFxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxuICAgIGV4Y2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzaGFyZWRDb250ZXh0ID0gaW5zdGFuY2UuY3R4O1xuICAgIGlmICghc2hhcmVkQ29udGV4dC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgY29uc3Qga2V5cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgbGV0IGN1cnJlbnQgPSBudWxsO1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgaW5zdGFuY2UuX192X2NhY2hlID0gY2FjaGU7XG4gICAgfVxuICAgIGNvbnN0IHBhcmVudFN1c3BlbnNlID0gaW5zdGFuY2Uuc3VzcGVuc2U7XG4gICAgY29uc3Qge1xuICAgICAgcmVuZGVyZXI6IHtcbiAgICAgICAgcDogcGF0Y2gsXG4gICAgICAgIG06IG1vdmUsXG4gICAgICAgIHVtOiBfdW5tb3VudCxcbiAgICAgICAgbzogeyBjcmVhdGVFbGVtZW50IH1cbiAgICAgIH1cbiAgICB9ID0gc2hhcmVkQ29udGV4dDtcbiAgICBjb25zdCBzdG9yYWdlQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBzaGFyZWRDb250ZXh0LmFjdGl2YXRlID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgbmFtZXNwYWNlLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgIGNvbnN0IGluc3RhbmNlMiA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgIG1vdmUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCAwLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICBwYXRjaChcbiAgICAgICAgaW5zdGFuY2UyLnZub2RlLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIGluc3RhbmNlMixcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgdm5vZGUuc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpbnN0YW5jZTIuaXNEZWFjdGl2YXRlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoaW5zdGFuY2UyLmEpIHtcbiAgICAgICAgICBpbnZva2VBcnJheUZucyhpbnN0YW5jZTIuYSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZU1vdW50ZWQ7XG4gICAgICAgIGlmICh2bm9kZUhvb2spIHtcbiAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZTIucGFyZW50LCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlMik7XG4gICAgICB9XG4gICAgfTtcbiAgICBzaGFyZWRDb250ZXh0LmRlYWN0aXZhdGUgPSAodm5vZGUpID0+IHtcbiAgICAgIGNvbnN0IGluc3RhbmNlMiA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgIGludmFsaWRhdGVNb3VudChpbnN0YW5jZTIubSk7XG4gICAgICBpbnZhbGlkYXRlTW91bnQoaW5zdGFuY2UyLmEpO1xuICAgICAgbW92ZSh2bm9kZSwgc3RvcmFnZUNvbnRhaW5lciwgbnVsbCwgMSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGluc3RhbmNlMi5kYSkge1xuICAgICAgICAgIGludm9rZUFycmF5Rm5zKGluc3RhbmNlMi5kYSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZVVubW91bnRlZDtcbiAgICAgICAgaWYgKHZub2RlSG9vaykge1xuICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIGluc3RhbmNlMi5wYXJlbnQsIHZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZTIuaXNEZWFjdGl2YXRlZCA9IHRydWU7XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZTIpO1xuICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gdW5tb3VudCh2bm9kZSkge1xuICAgICAgcmVzZXRTaGFwZUZsYWcodm5vZGUpO1xuICAgICAgX3VubW91bnQodm5vZGUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBydW5lQ2FjaGUoZmlsdGVyKSB7XG4gICAgICBjYWNoZS5mb3JFYWNoKCh2bm9kZSwga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKHZub2RlLnR5cGUpO1xuICAgICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkoa2V5KSB7XG4gICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoa2V5KTtcbiAgICAgIGlmIChjYWNoZWQgJiYgKCFjdXJyZW50IHx8ICFpc1NhbWVWTm9kZVR5cGUoY2FjaGVkLCBjdXJyZW50KSkpIHtcbiAgICAgICAgdW5tb3VudChjYWNoZWQpO1xuICAgICAgfSBlbHNlIGlmIChjdXJyZW50KSB7XG4gICAgICAgIHJlc2V0U2hhcGVGbGFnKGN1cnJlbnQpO1xuICAgICAgfVxuICAgICAgY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICBrZXlzLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICB3YXRjaChcbiAgICAgICgpID0+IFtwcm9wcy5pbmNsdWRlLCBwcm9wcy5leGNsdWRlXSxcbiAgICAgIChbaW5jbHVkZSwgZXhjbHVkZV0pID0+IHtcbiAgICAgICAgaW5jbHVkZSAmJiBwcnVuZUNhY2hlKChuYW1lKSA9PiBtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKTtcbiAgICAgICAgZXhjbHVkZSAmJiBwcnVuZUNhY2hlKChuYW1lKSA9PiAhbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSk7XG4gICAgICB9LFxuICAgICAgLy8gcHJ1bmUgcG9zdC1yZW5kZXIgYWZ0ZXIgYGN1cnJlbnRgIGhhcyBiZWVuIHVwZGF0ZWRcbiAgICAgIHsgZmx1c2g6IFwicG9zdFwiLCBkZWVwOiB0cnVlIH1cbiAgICApO1xuICAgIGxldCBwZW5kaW5nQ2FjaGVLZXkgPSBudWxsO1xuICAgIGNvbnN0IGNhY2hlU3VidHJlZSA9ICgpID0+IHtcbiAgICAgIGlmIChwZW5kaW5nQ2FjaGVLZXkgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNTdXNwZW5zZShpbnN0YW5jZS5zdWJUcmVlLnR5cGUpKSB7XG4gICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNhY2hlLnNldChwZW5kaW5nQ2FjaGVLZXksIGdldElubmVyQ2hpbGQoaW5zdGFuY2Uuc3ViVHJlZSkpO1xuICAgICAgICAgIH0sIGluc3RhbmNlLnN1YlRyZWUuc3VzcGVuc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhY2hlLnNldChwZW5kaW5nQ2FjaGVLZXksIGdldElubmVyQ2hpbGQoaW5zdGFuY2Uuc3ViVHJlZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBvbk1vdW50ZWQoY2FjaGVTdWJ0cmVlKTtcbiAgICBvblVwZGF0ZWQoY2FjaGVTdWJ0cmVlKTtcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgY2FjaGUuZm9yRWFjaCgoY2FjaGVkKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgc3ViVHJlZSwgc3VzcGVuc2UgfSA9IGluc3RhbmNlO1xuICAgICAgICBjb25zdCB2bm9kZSA9IGdldElubmVyQ2hpbGQoc3ViVHJlZSk7XG4gICAgICAgIGlmIChjYWNoZWQudHlwZSA9PT0gdm5vZGUudHlwZSAmJiBjYWNoZWQua2V5ID09PSB2bm9kZS5rZXkpIHtcbiAgICAgICAgICByZXNldFNoYXBlRmxhZyh2bm9kZSk7XG4gICAgICAgICAgY29uc3QgZGEgPSB2bm9kZS5jb21wb25lbnQuZGE7XG4gICAgICAgICAgZGEgJiYgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGRhLCBzdXNwZW5zZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHVubW91bnQoY2FjaGVkKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBwZW5kaW5nQ2FjaGVLZXkgPSBudWxsO1xuICAgICAgaWYgKCFzbG90cy5kZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCgpO1xuICAgICAgY29uc3QgcmF3Vk5vZGUgPSBjaGlsZHJlblswXTtcbiAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgd2FybiQxKGBLZWVwQWxpdmUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgY29tcG9uZW50IGNoaWxkLmApO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICB9IGVsc2UgaWYgKCFpc1ZOb2RlKHJhd1ZOb2RlKSB8fCAhKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDQpICYmICEocmF3Vk5vZGUuc2hhcGVGbGFnICYgMTI4KSkge1xuICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xuICAgICAgfVxuICAgICAgbGV0IHZub2RlID0gZ2V0SW5uZXJDaGlsZChyYXdWTm9kZSk7XG4gICAgICBpZiAodm5vZGUudHlwZSA9PT0gQ29tbWVudCkge1xuICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgICAgfVxuICAgICAgY29uc3QgY29tcCA9IHZub2RlLnR5cGU7XG4gICAgICBjb25zdCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShcbiAgICAgICAgaXNBc3luY1dyYXBwZXIodm5vZGUpID8gdm5vZGUudHlwZS5fX2FzeW5jUmVzb2x2ZWQgfHwge30gOiBjb21wXG4gICAgICApO1xuICAgICAgY29uc3QgeyBpbmNsdWRlLCBleGNsdWRlLCBtYXggfSA9IHByb3BzO1xuICAgICAgaWYgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSB8fCBleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSkge1xuICAgICAgICB2bm9kZS5zaGFwZUZsYWcgJj0gfjI1NjtcbiAgICAgICAgY3VycmVudCA9IHZub2RlO1xuICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XG4gICAgICB9XG4gICAgICBjb25zdCBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbCA/IGNvbXAgOiB2bm9kZS5rZXk7XG4gICAgICBjb25zdCBjYWNoZWRWTm9kZSA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgaWYgKHZub2RlLmVsKSB7XG4gICAgICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgICAgIGlmIChyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgICAgICByYXdWTm9kZS5zc0NvbnRlbnQgPSB2bm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGVuZGluZ0NhY2hlS2V5ID0ga2V5O1xuICAgICAgaWYgKGNhY2hlZFZOb2RlKSB7XG4gICAgICAgIHZub2RlLmVsID0gY2FjaGVkVk5vZGUuZWw7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudCA9IGNhY2hlZFZOb2RlLmNvbXBvbmVudDtcbiAgICAgICAgaWYgKHZub2RlLnRyYW5zaXRpb24pIHtcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUsIHZub2RlLnRyYW5zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSA1MTI7XG4gICAgICAgIGtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgICAgICBpZiAobWF4ICYmIGtleXMuc2l6ZSA+IHBhcnNlSW50KG1heCwgMTApKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleXMudmFsdWVzKCkubmV4dCgpLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdm5vZGUuc2hhcGVGbGFnIHw9IDI1NjtcbiAgICAgIGN1cnJlbnQgPSB2bm9kZTtcbiAgICAgIHJldHVybiBpc1N1c3BlbnNlKHJhd1ZOb2RlLnR5cGUpID8gcmF3Vk5vZGUgOiB2bm9kZTtcbiAgICB9O1xuICB9XG59O1xuY29uc3QgS2VlcEFsaXZlID0gS2VlcEFsaXZlSW1wbDtcbmZ1bmN0aW9uIG1hdGNoZXMocGF0dGVybiwgbmFtZSkge1xuICBpZiAoaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnNvbWUoKHApID0+IG1hdGNoZXMocCwgbmFtZSkpO1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoXCIsXCIpLmluY2x1ZGVzKG5hbWUpO1xuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgcGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gb25BY3RpdmF0ZWQoaG9vaywgdGFyZ2V0KSB7XG4gIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImFcIiwgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIG9uRGVhY3RpdmF0ZWQoaG9vaywgdGFyZ2V0KSB7XG4gIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImRhXCIsIHRhcmdldCk7XG59XG5mdW5jdGlvbiByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgdHlwZSwgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSB7XG4gIGNvbnN0IHdyYXBwZWRIb29rID0gaG9vay5fX3dkYyB8fCAoaG9vay5fX3dkYyA9ICgpID0+IHtcbiAgICBsZXQgY3VycmVudCA9IHRhcmdldDtcbiAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgaWYgKGN1cnJlbnQuaXNEZWFjdGl2YXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBob29rKCk7XG4gIH0pO1xuICBpbmplY3RIb29rKHR5cGUsIHdyYXBwZWRIb29rLCB0YXJnZXQpO1xuICBpZiAodGFyZ2V0KSB7XG4gICAgbGV0IGN1cnJlbnQgPSB0YXJnZXQucGFyZW50O1xuICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQucGFyZW50KSB7XG4gICAgICBpZiAoaXNLZWVwQWxpdmUoY3VycmVudC5wYXJlbnQudm5vZGUpKSB7XG4gICAgICAgIGluamVjdFRvS2VlcEFsaXZlUm9vdCh3cmFwcGVkSG9vaywgdHlwZSwgdGFyZ2V0LCBjdXJyZW50KTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGluamVjdFRvS2VlcEFsaXZlUm9vdChob29rLCB0eXBlLCB0YXJnZXQsIGtlZXBBbGl2ZVJvb3QpIHtcbiAgY29uc3QgaW5qZWN0ZWQgPSBpbmplY3RIb29rKFxuICAgIHR5cGUsXG4gICAgaG9vayxcbiAgICBrZWVwQWxpdmVSb290LFxuICAgIHRydWVcbiAgICAvKiBwcmVwZW5kICovXG4gICk7XG4gIG9uVW5tb3VudGVkKCgpID0+IHtcbiAgICByZW1vdmUoa2VlcEFsaXZlUm9vdFt0eXBlXSwgaW5qZWN0ZWQpO1xuICB9LCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gcmVzZXRTaGFwZUZsYWcodm5vZGUpIHtcbiAgdm5vZGUuc2hhcGVGbGFnICY9IH4yNTY7XG4gIHZub2RlLnNoYXBlRmxhZyAmPSB+NTEyO1xufVxuZnVuY3Rpb24gZ2V0SW5uZXJDaGlsZCh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuc2hhcGVGbGFnICYgMTI4ID8gdm5vZGUuc3NDb250ZW50IDogdm5vZGU7XG59XG5cbmZ1bmN0aW9uIGluamVjdEhvb2sodHlwZSwgaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlLCBwcmVwZW5kID0gZmFsc2UpIHtcbiAgaWYgKHRhcmdldCkge1xuICAgIGNvbnN0IGhvb2tzID0gdGFyZ2V0W3R5cGVdIHx8ICh0YXJnZXRbdHlwZV0gPSBbXSk7XG4gICAgY29uc3Qgd3JhcHBlZEhvb2sgPSBob29rLl9fd2VoIHx8IChob29rLl9fd2VoID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgIGNvbnN0IHJlc2V0ID0gc2V0Q3VycmVudEluc3RhbmNlKHRhcmdldCk7XG4gICAgICBjb25zdCByZXMgPSBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCB0YXJnZXQsIHR5cGUsIGFyZ3MpO1xuICAgICAgcmVzZXQoKTtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSk7XG4gICAgaWYgKHByZXBlbmQpIHtcbiAgICAgIGhvb2tzLnVuc2hpZnQod3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBob29rcy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXBwZWRIb29rO1xuICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICBjb25zdCBhcGlOYW1lID0gdG9IYW5kbGVyS2V5KEVycm9yVHlwZVN0cmluZ3MkMVt0eXBlXS5yZXBsYWNlKC8gaG9vayQvLCBcIlwiKSk7XG4gICAgd2FybiQxKFxuICAgICAgYCR7YXBpTmFtZX0gaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZSB0byBiZSBhc3NvY2lhdGVkIHdpdGguIExpZmVjeWNsZSBpbmplY3Rpb24gQVBJcyBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBleGVjdXRpb24gb2Ygc2V0dXAoKS5gICsgKGAgSWYgeW91IGFyZSB1c2luZyBhc3luYyBzZXR1cCgpLCBtYWtlIHN1cmUgdG8gcmVnaXN0ZXIgbGlmZWN5Y2xlIGhvb2tzIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQgc3RhdGVtZW50LmAgKVxuICAgICk7XG4gIH1cbn1cbmNvbnN0IGNyZWF0ZUhvb2sgPSAobGlmZWN5Y2xlKSA9PiAoaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSA9PiB7XG4gIGlmICghaXNJblNTUkNvbXBvbmVudFNldHVwIHx8IGxpZmVjeWNsZSA9PT0gXCJzcFwiKSB7XG4gICAgaW5qZWN0SG9vayhsaWZlY3ljbGUsICguLi5hcmdzKSA9PiBob29rKC4uLmFyZ3MpLCB0YXJnZXQpO1xuICB9XG59O1xuY29uc3Qgb25CZWZvcmVNb3VudCA9IGNyZWF0ZUhvb2soXCJibVwiKTtcbmNvbnN0IG9uTW91bnRlZCA9IGNyZWF0ZUhvb2soXCJtXCIpO1xuY29uc3Qgb25CZWZvcmVVcGRhdGUgPSBjcmVhdGVIb29rKFxuICBcImJ1XCJcbik7XG5jb25zdCBvblVwZGF0ZWQgPSBjcmVhdGVIb29rKFwidVwiKTtcbmNvbnN0IG9uQmVmb3JlVW5tb3VudCA9IGNyZWF0ZUhvb2soXG4gIFwiYnVtXCJcbik7XG5jb25zdCBvblVubW91bnRlZCA9IGNyZWF0ZUhvb2soXCJ1bVwiKTtcbmNvbnN0IG9uU2VydmVyUHJlZmV0Y2ggPSBjcmVhdGVIb29rKFxuICBcInNwXCJcbik7XG5jb25zdCBvblJlbmRlclRyaWdnZXJlZCA9IGNyZWF0ZUhvb2soXCJydGdcIik7XG5jb25zdCBvblJlbmRlclRyYWNrZWQgPSBjcmVhdGVIb29rKFwicnRjXCIpO1xuZnVuY3Rpb24gb25FcnJvckNhcHR1cmVkKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xuICBpbmplY3RIb29rKFwiZWNcIiwgaG9vaywgdGFyZ2V0KTtcbn1cblxuY29uc3QgQ09NUE9ORU5UUyA9IFwiY29tcG9uZW50c1wiO1xuY29uc3QgRElSRUNUSVZFUyA9IFwiZGlyZWN0aXZlc1wiO1xuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudChuYW1lLCBtYXliZVNlbGZSZWZlcmVuY2UpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBuYW1lLCB0cnVlLCBtYXliZVNlbGZSZWZlcmVuY2UpIHx8IG5hbWU7XG59XG5jb25zdCBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UID0gU3ltYm9sLmZvcihcInYtbmRjXCIpO1xuZnVuY3Rpb24gcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQoY29tcG9uZW50KSB7XG4gIGlmIChpc1N0cmluZyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBjb21wb25lbnQsIGZhbHNlKSB8fCBjb21wb25lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudCB8fCBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlRGlyZWN0aXZlKG5hbWUpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldChESVJFQ1RJVkVTLCBuYW1lKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCh0eXBlLCBuYW1lLCB3YXJuTWlzc2luZyA9IHRydWUsIG1heWJlU2VsZlJlZmVyZW5jZSA9IGZhbHNlKSB7XG4gIGNvbnN0IGluc3RhbmNlID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIHx8IGN1cnJlbnRJbnN0YW5jZTtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcbiAgICBpZiAodHlwZSA9PT0gQ09NUE9ORU5UUykge1xuICAgICAgY29uc3Qgc2VsZk5hbWUgPSBnZXRDb21wb25lbnROYW1lKFxuICAgICAgICBDb21wb25lbnQsXG4gICAgICAgIGZhbHNlXG4gICAgICApO1xuICAgICAgaWYgKHNlbGZOYW1lICYmIChzZWxmTmFtZSA9PT0gbmFtZSB8fCBzZWxmTmFtZSA9PT0gY2FtZWxpemUobmFtZSkgfHwgc2VsZk5hbWUgPT09IGNhcGl0YWxpemUoY2FtZWxpemUobmFtZSkpKSkge1xuICAgICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXMgPSAoXG4gICAgICAvLyBsb2NhbCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGNoZWNrIGluc3RhbmNlW3R5cGVdIGZpcnN0IHdoaWNoIGlzIHJlc29sdmVkIGZvciBvcHRpb25zIEFQSVxuICAgICAgcmVzb2x2ZShpbnN0YW5jZVt0eXBlXSB8fCBDb21wb25lbnRbdHlwZV0sIG5hbWUpIHx8IC8vIGdsb2JhbCByZWdpc3RyYXRpb25cbiAgICAgIHJlc29sdmUoaW5zdGFuY2UuYXBwQ29udGV4dFt0eXBlXSwgbmFtZSlcbiAgICApO1xuICAgIGlmICghcmVzICYmIG1heWJlU2VsZlJlZmVyZW5jZSkge1xuICAgICAgcmV0dXJuIENvbXBvbmVudDtcbiAgICB9XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgICAgY29uc3QgZXh0cmEgPSB0eXBlID09PSBDT01QT05FTlRTID8gYFxuSWYgdGhpcyBpcyBhIG5hdGl2ZSBjdXN0b20gZWxlbWVudCwgbWFrZSBzdXJlIHRvIGV4Y2x1ZGUgaXQgZnJvbSBjb21wb25lbnQgcmVzb2x1dGlvbiB2aWEgY29tcGlsZXJPcHRpb25zLmlzQ3VzdG9tRWxlbWVudC5gIDogYGA7XG4gICAgICB3YXJuJDEoYEZhaWxlZCB0byByZXNvbHZlICR7dHlwZS5zbGljZSgwLCAtMSl9OiAke25hbWV9JHtleHRyYX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgd2FybiQxKFxuICAgICAgYHJlc29sdmUke2NhcGl0YWxpemUodHlwZS5zbGljZSgwLCAtMSkpfSBjYW4gb25seSBiZSB1c2VkIGluIHJlbmRlcigpIG9yIHNldHVwKCkuYFxuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlc29sdmUocmVnaXN0cnksIG5hbWUpIHtcbiAgcmV0dXJuIHJlZ2lzdHJ5ICYmIChyZWdpc3RyeVtuYW1lXSB8fCByZWdpc3RyeVtjYW1lbGl6ZShuYW1lKV0gfHwgcmVnaXN0cnlbY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSldKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyTGlzdChzb3VyY2UsIHJlbmRlckl0ZW0sIGNhY2hlLCBpbmRleCkge1xuICBsZXQgcmV0O1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZSAmJiBjYWNoZVtpbmRleF07XG4gIGNvbnN0IHNvdXJjZUlzQXJyYXkgPSBpc0FycmF5KHNvdXJjZSk7XG4gIGlmIChzb3VyY2VJc0FycmF5IHx8IGlzU3RyaW5nKHNvdXJjZSkpIHtcbiAgICBjb25zdCBzb3VyY2VJc1JlYWN0aXZlQXJyYXkgPSBzb3VyY2VJc0FycmF5ICYmIGlzUmVhY3RpdmUoc291cmNlKTtcbiAgICBsZXQgbmVlZHNXcmFwID0gZmFsc2U7XG4gICAgaWYgKHNvdXJjZUlzUmVhY3RpdmVBcnJheSkge1xuICAgICAgbmVlZHNXcmFwID0gIWlzU2hhbGxvdyhzb3VyY2UpO1xuICAgICAgc291cmNlID0gc2hhbGxvd1JlYWRBcnJheShzb3VyY2UpO1xuICAgIH1cbiAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBzb3VyY2UubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXJJdGVtKFxuICAgICAgICBuZWVkc1dyYXAgPyB0b1JlYWN0aXZlKHNvdXJjZVtpXSkgOiBzb3VyY2VbaV0sXG4gICAgICAgIGksXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgY2FjaGVkICYmIGNhY2hlZFtpXVxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNvdXJjZSA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFOdW1iZXIuaXNJbnRlZ2VyKHNvdXJjZSkpIHtcbiAgICAgIHdhcm4kMShgVGhlIHYtZm9yIHJhbmdlIGV4cGVjdCBhbiBpbnRlZ2VyIHZhbHVlIGJ1dCBnb3QgJHtzb3VyY2V9LmApO1xuICAgIH1cbiAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZTsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXJJdGVtKGkgKyAxLCBpLCB2b2lkIDAsIGNhY2hlZCAmJiBjYWNoZWRbaV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgaWYgKHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICByZXQgPSBBcnJheS5mcm9tKFxuICAgICAgICBzb3VyY2UsXG4gICAgICAgIChpdGVtLCBpKSA9PiByZW5kZXJJdGVtKGl0ZW0sIGksIHZvaWQgMCwgY2FjaGVkICYmIGNhY2hlZFtpXSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShzb3VyY2Vba2V5XSwga2V5LCBpLCBjYWNoZWQgJiYgY2FjaGVkW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0ID0gW107XG4gIH1cbiAgaWYgKGNhY2hlKSB7XG4gICAgY2FjaGVbaW5kZXhdID0gcmV0O1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNsb3RzKHNsb3RzLCBkeW5hbWljU2xvdHMpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkeW5hbWljU2xvdHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzbG90ID0gZHluYW1pY1Nsb3RzW2ldO1xuICAgIGlmIChpc0FycmF5KHNsb3QpKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNsb3QubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgc2xvdHNbc2xvdFtqXS5uYW1lXSA9IHNsb3Rbal0uZm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICBzbG90c1tzbG90Lm5hbWVdID0gc2xvdC5rZXkgPyAoLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSBzbG90LmZuKC4uLmFyZ3MpO1xuICAgICAgICBpZiAocmVzKSByZXMua2V5ID0gc2xvdC5rZXk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9IDogc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNsb3RzO1xufVxuXG5mdW5jdGlvbiByZW5kZXJTbG90KHNsb3RzLCBuYW1lLCBwcm9wcyA9IHt9LCBmYWxsYmFjaywgbm9TbG90dGVkKSB7XG4gIGlmIChjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnBhcmVudCAmJiBpc0FzeW5jV3JhcHBlcihjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UucGFyZW50KSAmJiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UucGFyZW50LmNlKSB7XG4gICAgaWYgKG5hbWUgIT09IFwiZGVmYXVsdFwiKSBwcm9wcy5uYW1lID0gbmFtZTtcbiAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKFxuICAgICAgRnJhZ21lbnQsXG4gICAgICBudWxsLFxuICAgICAgW2NyZWF0ZVZOb2RlKFwic2xvdFwiLCBwcm9wcywgZmFsbGJhY2sgJiYgZmFsbGJhY2soKSldLFxuICAgICAgNjRcbiAgICApO1xuICB9XG4gIGxldCBzbG90ID0gc2xvdHNbbmFtZV07XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHNsb3QgJiYgc2xvdC5sZW5ndGggPiAxKSB7XG4gICAgd2FybiQxKFxuICAgICAgYFNTUi1vcHRpbWl6ZWQgc2xvdCBmdW5jdGlvbiBkZXRlY3RlZCBpbiBhIG5vbi1TU1Itb3B0aW1pemVkIHJlbmRlciBmdW5jdGlvbi4gWW91IG5lZWQgdG8gbWFyayB0aGlzIGNvbXBvbmVudCB3aXRoICRkeW5hbWljLXNsb3RzIGluIHRoZSBwYXJlbnQgdGVtcGxhdGUuYFxuICAgICk7XG4gICAgc2xvdCA9ICgpID0+IFtdO1xuICB9XG4gIGlmIChzbG90ICYmIHNsb3QuX2MpIHtcbiAgICBzbG90Ll9kID0gZmFsc2U7XG4gIH1cbiAgb3BlbkJsb2NrKCk7XG4gIGNvbnN0IHZhbGlkU2xvdENvbnRlbnQgPSBzbG90ICYmIGVuc3VyZVZhbGlkVk5vZGUoc2xvdChwcm9wcykpO1xuICBjb25zdCByZW5kZXJlZCA9IGNyZWF0ZUJsb2NrKFxuICAgIEZyYWdtZW50LFxuICAgIHtcbiAgICAgIGtleTogKHByb3BzLmtleSB8fCAvLyBzbG90IGNvbnRlbnQgYXJyYXkgb2YgYSBkeW5hbWljIGNvbmRpdGlvbmFsIHNsb3QgbWF5IGhhdmUgYSBicmFuY2hcbiAgICAgIC8vIGtleSBhdHRhY2hlZCBpbiB0aGUgYGNyZWF0ZVNsb3RzYCBoZWxwZXIsIHJlc3BlY3QgdGhhdFxuICAgICAgdmFsaWRTbG90Q29udGVudCAmJiB2YWxpZFNsb3RDb250ZW50LmtleSB8fCBgXyR7bmFtZX1gKSArIC8vICM3MjU2IGZvcmNlIGRpZmZlcmVudGlhdGUgZmFsbGJhY2sgY29udGVudCBmcm9tIGFjdHVhbCBjb250ZW50XG4gICAgICAoIXZhbGlkU2xvdENvbnRlbnQgJiYgZmFsbGJhY2sgPyBcIl9mYlwiIDogXCJcIilcbiAgICB9LFxuICAgIHZhbGlkU2xvdENvbnRlbnQgfHwgKGZhbGxiYWNrID8gZmFsbGJhY2soKSA6IFtdKSxcbiAgICB2YWxpZFNsb3RDb250ZW50ICYmIHNsb3RzLl8gPT09IDEgPyA2NCA6IC0yXG4gICk7XG4gIGlmICghbm9TbG90dGVkICYmIHJlbmRlcmVkLnNjb3BlSWQpIHtcbiAgICByZW5kZXJlZC5zbG90U2NvcGVJZHMgPSBbcmVuZGVyZWQuc2NvcGVJZCArIFwiLXNcIl07XG4gIH1cbiAgaWYgKHNsb3QgJiYgc2xvdC5fYykge1xuICAgIHNsb3QuX2QgPSB0cnVlO1xuICB9XG4gIHJldHVybiByZW5kZXJlZDtcbn1cbmZ1bmN0aW9uIGVuc3VyZVZhbGlkVk5vZGUodm5vZGVzKSB7XG4gIHJldHVybiB2bm9kZXMuc29tZSgoY2hpbGQpID0+IHtcbiAgICBpZiAoIWlzVk5vZGUoY2hpbGQpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoY2hpbGQudHlwZSA9PT0gQ29tbWVudCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChjaGlsZC50eXBlID09PSBGcmFnbWVudCAmJiAhZW5zdXJlVmFsaWRWTm9kZShjaGlsZC5jaGlsZHJlbikpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pID8gdm5vZGVzIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gdG9IYW5kbGVycyhvYmosIHByZXNlcnZlQ2FzZUlmTmVjZXNzYXJ5KSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhaXNPYmplY3Qob2JqKSkge1xuICAgIHdhcm4kMShgdi1vbiB3aXRoIG5vIGFyZ3VtZW50IGV4cGVjdHMgYW4gb2JqZWN0IHZhbHVlLmApO1xuICAgIHJldHVybiByZXQ7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmV0W3ByZXNlcnZlQ2FzZUlmTmVjZXNzYXJ5ICYmIC9bQS1aXS8udGVzdChrZXkpID8gYG9uOiR7a2V5fWAgOiB0b0hhbmRsZXJLZXkoa2V5KV0gPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5jb25zdCBnZXRQdWJsaWNJbnN0YW5jZSA9IChpKSA9PiB7XG4gIGlmICghaSkgcmV0dXJuIG51bGw7XG4gIGlmIChpc1N0YXRlZnVsQ29tcG9uZW50KGkpKSByZXR1cm4gZ2V0Q29tcG9uZW50UHVibGljSW5zdGFuY2UoaSk7XG4gIHJldHVybiBnZXRQdWJsaWNJbnN0YW5jZShpLnBhcmVudCk7XG59O1xuY29uc3QgcHVibGljUHJvcGVydGllc01hcCA9IChcbiAgLy8gTW92ZSBQVVJFIG1hcmtlciB0byBuZXcgbGluZSB0byB3b3JrYXJvdW5kIGNvbXBpbGVyIGRpc2NhcmRpbmcgaXRcbiAgLy8gZHVlIHRvIHR5cGUgYW5ub3RhdGlvblxuICAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpLCB7XG4gICAgJDogKGkpID0+IGksXG4gICAgJGVsOiAoaSkgPT4gaS52bm9kZS5lbCxcbiAgICAkZGF0YTogKGkpID0+IGkuZGF0YSxcbiAgICAkcHJvcHM6IChpKSA9PiAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gc2hhbGxvd1JlYWRvbmx5KGkucHJvcHMpIDogaS5wcm9wcyxcbiAgICAkYXR0cnM6IChpKSA9PiAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gc2hhbGxvd1JlYWRvbmx5KGkuYXR0cnMpIDogaS5hdHRycyxcbiAgICAkc2xvdHM6IChpKSA9PiAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gc2hhbGxvd1JlYWRvbmx5KGkuc2xvdHMpIDogaS5zbG90cyxcbiAgICAkcmVmczogKGkpID0+ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBzaGFsbG93UmVhZG9ubHkoaS5yZWZzKSA6IGkucmVmcyxcbiAgICAkcGFyZW50OiAoaSkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpLFxuICAgICRyb290OiAoaSkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5yb290KSxcbiAgICAkaG9zdDogKGkpID0+IGkuY2UsXG4gICAgJGVtaXQ6IChpKSA9PiBpLmVtaXQsXG4gICAgJG9wdGlvbnM6IChpKSA9PiBfX1ZVRV9PUFRJT05TX0FQSV9fID8gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaSkgOiBpLnR5cGUsXG4gICAgJGZvcmNlVXBkYXRlOiAoaSkgPT4gaS5mIHx8IChpLmYgPSAoKSA9PiB7XG4gICAgICBxdWV1ZUpvYihpLnVwZGF0ZSk7XG4gICAgfSksXG4gICAgJG5leHRUaWNrOiAoaSkgPT4gaS5uIHx8IChpLm4gPSBuZXh0VGljay5iaW5kKGkucHJveHkpKSxcbiAgICAkd2F0Y2g6IChpKSA9PiBfX1ZVRV9PUFRJT05TX0FQSV9fID8gaW5zdGFuY2VXYXRjaC5iaW5kKGkpIDogTk9PUFxuICB9KVxuKTtcbmNvbnN0IGlzUmVzZXJ2ZWRQcmVmaXggPSAoa2V5KSA9PiBrZXkgPT09IFwiX1wiIHx8IGtleSA9PT0gXCIkXCI7XG5jb25zdCBoYXNTZXR1cEJpbmRpbmcgPSAoc3RhdGUsIGtleSkgPT4gc3RhdGUgIT09IEVNUFRZX09CSiAmJiAhc3RhdGUuX19pc1NjcmlwdFNldHVwICYmIGhhc093bihzdGF0ZSwga2V5KTtcbmNvbnN0IFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyA9IHtcbiAgZ2V0KHsgXzogaW5zdGFuY2UgfSwga2V5KSB7XG4gICAgaWYgKGtleSA9PT0gXCJfX3Zfc2tpcFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUsIGRhdGEsIHByb3BzLCBhY2Nlc3NDYWNoZSwgdHlwZSwgYXBwQ29udGV4dCB9ID0gaW5zdGFuY2U7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYga2V5ID09PSBcIl9faXNWdWVcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCBub3JtYWxpemVkUHJvcHM7XG4gICAgaWYgKGtleVswXSAhPT0gXCIkXCIpIHtcbiAgICAgIGNvbnN0IG4gPSBhY2Nlc3NDYWNoZVtrZXldO1xuICAgICAgaWYgKG4gIT09IHZvaWQgMCkge1xuICAgICAgICBzd2l0Y2ggKG4pIHtcbiAgICAgICAgICBjYXNlIDEgLyogU0VUVVAgKi86XG4gICAgICAgICAgICByZXR1cm4gc2V0dXBTdGF0ZVtrZXldO1xuICAgICAgICAgIGNhc2UgMiAvKiBEQVRBICovOlxuICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgICAgICBjYXNlIDQgLyogQ09OVEVYVCAqLzpcbiAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcbiAgICAgICAgICBjYXNlIDMgLyogUFJPUFMgKi86XG4gICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChoYXNTZXR1cEJpbmRpbmcoc2V0dXBTdGF0ZSwga2V5KSkge1xuICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMSAvKiBTRVRVUCAqLztcbiAgICAgICAgcmV0dXJuIHNldHVwU3RhdGVba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB7XG4gICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAyIC8qIERBVEEgKi87XG4gICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAvLyBvbmx5IGNhY2hlIG90aGVyIHByb3BlcnRpZXMgd2hlbiBpbnN0YW5jZSBoYXMgZGVjbGFyZWQgKHRodXMgc3RhYmxlKVxuICAgICAgICAvLyBwcm9wc1xuICAgICAgICAobm9ybWFsaXplZFByb3BzID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdKSAmJiBoYXNPd24obm9ybWFsaXplZFByb3BzLCBrZXkpXG4gICAgICApIHtcbiAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDMgLyogUFJPUFMgKi87XG4gICAgICAgIHJldHVybiBwcm9wc1trZXldO1xuICAgICAgfSBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XG4gICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSA0IC8qIENPTlRFWFQgKi87XG4gICAgICAgIHJldHVybiBjdHhba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoIV9fVlVFX09QVElPTlNfQVBJX18gfHwgc2hvdWxkQ2FjaGVBY2Nlc3MpIHtcbiAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDAgLyogT1RIRVIgKi87XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHB1YmxpY0dldHRlciA9IHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XTtcbiAgICBsZXQgY3NzTW9kdWxlLCBnbG9iYWxQcm9wZXJ0aWVzO1xuICAgIGlmIChwdWJsaWNHZXR0ZXIpIHtcbiAgICAgIGlmIChrZXkgPT09IFwiJGF0dHJzXCIpIHtcbiAgICAgICAgdHJhY2soaW5zdGFuY2UuYXR0cnMsIFwiZ2V0XCIsIFwiXCIpO1xuICAgICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYga2V5ID09PSBcIiRzbG90c1wiKSB7XG4gICAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiLCBrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHB1YmxpY0dldHRlcihpbnN0YW5jZSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIGNzcyBtb2R1bGUgKGluamVjdGVkIGJ5IHZ1ZS1sb2FkZXIpXG4gICAgICAoY3NzTW9kdWxlID0gdHlwZS5fX2Nzc01vZHVsZXMpICYmIChjc3NNb2R1bGUgPSBjc3NNb2R1bGVba2V5XSlcbiAgICApIHtcbiAgICAgIHJldHVybiBjc3NNb2R1bGU7XG4gICAgfSBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XG4gICAgICBhY2Nlc3NDYWNoZVtrZXldID0gNCAvKiBDT05URVhUICovO1xuICAgICAgcmV0dXJuIGN0eFtrZXldO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBnbG9iYWwgcHJvcGVydGllc1xuICAgICAgZ2xvYmFsUHJvcGVydGllcyA9IGFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMsIGhhc093bihnbG9iYWxQcm9wZXJ0aWVzLCBrZXkpXG4gICAgKSB7XG4gICAgICB7XG4gICAgICAgIHJldHVybiBnbG9iYWxQcm9wZXJ0aWVzW2tleV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSAmJiAoIWlzU3RyaW5nKGtleSkgfHwgLy8gIzEwOTEgYXZvaWQgaW50ZXJuYWwgaXNSZWYvaXNWTm9kZSBjaGVja3Mgb24gY29tcG9uZW50IGluc3RhbmNlIGxlYWRpbmdcbiAgICAvLyB0byBpbmZpbml0ZSB3YXJuaW5nIGxvb3BcbiAgICBrZXkuaW5kZXhPZihcIl9fdlwiKSAhPT0gMCkpIHtcbiAgICAgIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaXNSZXNlcnZlZFByZWZpeChrZXlbMF0pICYmIGhhc093bihkYXRhLCBrZXkpKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIGtleVxuICAgICAgICAgICl9IG11c3QgYmUgYWNjZXNzZWQgdmlhICRkYXRhIGJlY2F1c2UgaXQgc3RhcnRzIHdpdGggYSByZXNlcnZlZCBjaGFyYWN0ZXIgKFwiJFwiIG9yIFwiX1wiKSBhbmQgaXMgbm90IHByb3hpZWQgb24gdGhlIHJlbmRlciBjb250ZXh0LmBcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UgPT09IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gd2FzIGFjY2Vzc2VkIGR1cmluZyByZW5kZXIgYnV0IGlzIG5vdCBkZWZpbmVkIG9uIGluc3RhbmNlLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNldCh7IF86IGluc3RhbmNlIH0sIGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCB7IGRhdGEsIHNldHVwU3RhdGUsIGN0eCB9ID0gaW5zdGFuY2U7XG4gICAgaWYgKGhhc1NldHVwQmluZGluZyhzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICBzZXR1cFN0YXRlW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBzZXR1cFN0YXRlLl9faXNTY3JpcHRTZXR1cCAmJiBoYXNPd24oc2V0dXBTdGF0ZSwga2V5KSkge1xuICAgICAgd2FybiQxKGBDYW5ub3QgbXV0YXRlIDxzY3JpcHQgc2V0dXA+IGJpbmRpbmcgXCIke2tleX1cIiBmcm9tIE9wdGlvbnMgQVBJLmApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB7XG4gICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoaGFzT3duKGluc3RhbmNlLnByb3BzLCBrZXkpKSB7XG4gICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHdhcm4kMShgQXR0ZW1wdGluZyB0byBtdXRhdGUgcHJvcCBcIiR7a2V5fVwiLiBQcm9wcyBhcmUgcmVhZG9ubHkuYCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChrZXlbMF0gPT09IFwiJFwiICYmIGtleS5zbGljZSgxKSBpbiBpbnN0YW5jZSkge1xuICAgICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB3YXJuJDEoXG4gICAgICAgIGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwdWJsaWMgcHJvcGVydHkgXCIke2tleX1cIi4gUHJvcGVydGllcyBzdGFydGluZyB3aXRoICQgYXJlIHJlc2VydmVkIGFuZCByZWFkb25seS5gXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBrZXkgaW4gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBoYXMoe1xuICAgIF86IHsgZGF0YSwgc2V0dXBTdGF0ZSwgYWNjZXNzQ2FjaGUsIGN0eCwgYXBwQ29udGV4dCwgcHJvcHNPcHRpb25zIH1cbiAgfSwga2V5KSB7XG4gICAgbGV0IG5vcm1hbGl6ZWRQcm9wcztcbiAgICByZXR1cm4gISFhY2Nlc3NDYWNoZVtrZXldIHx8IGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSB8fCBoYXNTZXR1cEJpbmRpbmcoc2V0dXBTdGF0ZSwga2V5KSB8fCAobm9ybWFsaXplZFByb3BzID0gcHJvcHNPcHRpb25zWzBdKSAmJiBoYXNPd24obm9ybWFsaXplZFByb3BzLCBrZXkpIHx8IGhhc093bihjdHgsIGtleSkgfHwgaGFzT3duKHB1YmxpY1Byb3BlcnRpZXNNYXAsIGtleSkgfHwgaGFzT3duKGFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMsIGtleSk7XG4gIH0sXG4gIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgaWYgKGRlc2NyaXB0b3IuZ2V0ICE9IG51bGwpIHtcbiAgICAgIHRhcmdldC5fLmFjY2Vzc0NhY2hlW2tleV0gPSAwO1xuICAgIH0gZWxzZSBpZiAoaGFzT3duKGRlc2NyaXB0b3IsIFwidmFsdWVcIikpIHtcbiAgICAgIHRoaXMuc2V0KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yLnZhbHVlLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpO1xuICB9XG59O1xuaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgdHJ1ZSkge1xuICBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMub3duS2V5cyA9ICh0YXJnZXQpID0+IHtcbiAgICB3YXJuJDEoXG4gICAgICBgQXZvaWQgYXBwIGxvZ2ljIHRoYXQgcmVsaWVzIG9uIGVudW1lcmF0aW5nIGtleXMgb24gYSBjb21wb25lbnQgaW5zdGFuY2UuIFRoZSBrZXlzIHdpbGwgYmUgZW1wdHkgaW4gcHJvZHVjdGlvbiBtb2RlIHRvIGF2b2lkIHBlcmZvcm1hbmNlIG92ZXJoZWFkLmBcbiAgICApO1xuICAgIHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0KTtcbiAgfTtcbn1cbmNvbnN0IFJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBleHRlbmQoe30sIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycywge1xuICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICBpZiAoa2V5ID09PSBTeW1ib2wudW5zY29wYWJsZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycy5nZXQodGFyZ2V0LCBrZXksIHRhcmdldCk7XG4gIH0sXG4gIGhhcyhfLCBrZXkpIHtcbiAgICBjb25zdCBoYXMgPSBrZXlbMF0gIT09IFwiX1wiICYmICFpc0dsb2JhbGx5QWxsb3dlZChrZXkpO1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFoYXMgJiYgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLmhhcyhfLCBrZXkpKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIGtleVxuICAgICAgICApfSBzaG91bGQgbm90IHN0YXJ0IHdpdGggXyB3aGljaCBpcyBhIHJlc2VydmVkIHByZWZpeCBmb3IgVnVlIGludGVybmFscy5gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gaGFzO1xuICB9XG59KTtcbmZ1bmN0aW9uIGNyZWF0ZURldlJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcbiAgY29uc3QgdGFyZ2V0ID0ge307XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGBfYCwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBnZXQ6ICgpID0+IGluc3RhbmNlXG4gIH0pO1xuICBPYmplY3Qua2V5cyhwdWJsaWNQcm9wZXJ0aWVzTWFwKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgZ2V0OiAoKSA9PiBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV0oaW5zdGFuY2UpLFxuICAgICAgLy8gaW50ZXJjZXB0ZWQgYnkgdGhlIHByb3h5IHNvIG5vIG5lZWQgZm9yIGltcGxlbWVudGF0aW9uLFxuICAgICAgLy8gYnV0IG5lZWRlZCB0byBwcmV2ZW50IHNldCBlcnJvcnNcbiAgICAgIHNldDogTk9PUFxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIGV4cG9zZVByb3BzT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XG4gIGNvbnN0IHtcbiAgICBjdHgsXG4gICAgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXVxuICB9ID0gaW5zdGFuY2U7XG4gIGlmIChwcm9wc09wdGlvbnMpIHtcbiAgICBPYmplY3Qua2V5cyhwcm9wc09wdGlvbnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBpbnN0YW5jZS5wcm9wc1trZXldLFxuICAgICAgICBzZXQ6IE5PT1BcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBleHBvc2VTZXR1cFN0YXRlT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XG4gIGNvbnN0IHsgY3R4LCBzZXR1cFN0YXRlIH0gPSBpbnN0YW5jZTtcbiAgT2JqZWN0LmtleXModG9SYXcoc2V0dXBTdGF0ZSkpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmICghc2V0dXBTdGF0ZS5fX2lzU2NyaXB0U2V0dXApIHtcbiAgICAgIGlmIChpc1Jlc2VydmVkUHJlZml4KGtleVswXSkpIHtcbiAgICAgICAgd2FybiQxKFxuICAgICAgICAgIGBzZXR1cCgpIHJldHVybiBwcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAga2V5XG4gICAgICAgICAgKX0gc2hvdWxkIG5vdCBzdGFydCB3aXRoIFwiJFwiIG9yIFwiX1wiIHdoaWNoIGFyZSByZXNlcnZlZCBwcmVmaXhlcyBmb3IgVnVlIGludGVybmFscy5gXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogKCkgPT4gc2V0dXBTdGF0ZVtrZXldLFxuICAgICAgICBzZXQ6IE5PT1BcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IHdhcm5SdW50aW1lVXNhZ2UgPSAobWV0aG9kKSA9PiB3YXJuJDEoXG4gIGAke21ldGhvZH0oKSBpcyBhIGNvbXBpbGVyLWhpbnQgaGVscGVyIHRoYXQgaXMgb25seSB1c2FibGUgaW5zaWRlIDxzY3JpcHQgc2V0dXA+IG9mIGEgc2luZ2xlIGZpbGUgY29tcG9uZW50LiBJdHMgYXJndW1lbnRzIHNob3VsZCBiZSBjb21waWxlZCBhd2F5IGFuZCBwYXNzaW5nIGl0IGF0IHJ1bnRpbWUgaGFzIG5vIGVmZmVjdC5gXG4pO1xuZnVuY3Rpb24gZGVmaW5lUHJvcHMoKSB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lUHJvcHNgKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGRlZmluZUVtaXRzKCkge1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZUVtaXRzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVFeHBvc2UoZXhwb3NlZCkge1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZUV4cG9zZWApO1xuICB9XG59XG5mdW5jdGlvbiBkZWZpbmVPcHRpb25zKG9wdGlvbnMpIHtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuUnVudGltZVVzYWdlKGBkZWZpbmVPcHRpb25zYCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRlZmluZVNsb3RzKCkge1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZVNsb3RzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVNb2RlbCgpIHtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuUnVudGltZVVzYWdlKFwiZGVmaW5lTW9kZWxcIik7XG4gIH1cbn1cbmZ1bmN0aW9uIHdpdGhEZWZhdWx0cyhwcm9wcywgZGVmYXVsdHMpIHtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuUnVudGltZVVzYWdlKGB3aXRoRGVmYXVsdHNgKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHVzZVNsb3RzKCkge1xuICByZXR1cm4gZ2V0Q29udGV4dCgpLnNsb3RzO1xufVxuZnVuY3Rpb24gdXNlQXR0cnMoKSB7XG4gIHJldHVybiBnZXRDb250ZXh0KCkuYXR0cnM7XG59XG5mdW5jdGlvbiBnZXRDb250ZXh0KCkge1xuICBjb25zdCBpID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFpKSB7XG4gICAgd2FybiQxKGB1c2VDb250ZXh0KCkgY2FsbGVkIHdpdGhvdXQgYWN0aXZlIGluc3RhbmNlLmApO1xuICB9XG4gIHJldHVybiBpLnNldHVwQ29udGV4dCB8fCAoaS5zZXR1cENvbnRleHQgPSBjcmVhdGVTZXR1cENvbnRleHQoaSkpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHNPckVtaXRzKHByb3BzKSB7XG4gIHJldHVybiBpc0FycmF5KHByb3BzKSA/IHByb3BzLnJlZHVjZShcbiAgICAobm9ybWFsaXplZCwgcCkgPT4gKG5vcm1hbGl6ZWRbcF0gPSBudWxsLCBub3JtYWxpemVkKSxcbiAgICB7fVxuICApIDogcHJvcHM7XG59XG5mdW5jdGlvbiBtZXJnZURlZmF1bHRzKHJhdywgZGVmYXVsdHMpIHtcbiAgY29uc3QgcHJvcHMgPSBub3JtYWxpemVQcm9wc09yRW1pdHMocmF3KTtcbiAgZm9yIChjb25zdCBrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJfX3NraXBcIikpIGNvbnRpbnVlO1xuICAgIGxldCBvcHQgPSBwcm9wc1trZXldO1xuICAgIGlmIChvcHQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9wdCkgfHwgaXNGdW5jdGlvbihvcHQpKSB7XG4gICAgICAgIG9wdCA9IHByb3BzW2tleV0gPSB7IHR5cGU6IG9wdCwgZGVmYXVsdDogZGVmYXVsdHNba2V5XSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0LmRlZmF1bHQgPSBkZWZhdWx0c1trZXldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3B0ID09PSBudWxsKSB7XG4gICAgICBvcHQgPSBwcm9wc1trZXldID0geyBkZWZhdWx0OiBkZWZhdWx0c1trZXldIH07XG4gICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICB3YXJuJDEoYHByb3BzIGRlZmF1bHQga2V5IFwiJHtrZXl9XCIgaGFzIG5vIGNvcnJlc3BvbmRpbmcgZGVjbGFyYXRpb24uYCk7XG4gICAgfVxuICAgIGlmIChvcHQgJiYgZGVmYXVsdHNbYF9fc2tpcF8ke2tleX1gXSkge1xuICAgICAgb3B0LnNraXBGYWN0b3J5ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BzO1xufVxuZnVuY3Rpb24gbWVyZ2VNb2RlbHMoYSwgYikge1xuICBpZiAoIWEgfHwgIWIpIHJldHVybiBhIHx8IGI7XG4gIGlmIChpc0FycmF5KGEpICYmIGlzQXJyYXkoYikpIHJldHVybiBhLmNvbmNhdChiKTtcbiAgcmV0dXJuIGV4dGVuZCh7fSwgbm9ybWFsaXplUHJvcHNPckVtaXRzKGEpLCBub3JtYWxpemVQcm9wc09yRW1pdHMoYikpO1xufVxuZnVuY3Rpb24gY3JlYXRlUHJvcHNSZXN0UHJveHkocHJvcHMsIGV4Y2x1ZGVkS2V5cykge1xuICBjb25zdCByZXQgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoIWV4Y2x1ZGVkS2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBwcm9wc1trZXldXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHdpdGhBc3luY0NvbnRleHQoZ2V0QXdhaXRhYmxlKSB7XG4gIGNvbnN0IGN0eCA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhY3R4KSB7XG4gICAgd2FybiQxKFxuICAgICAgYHdpdGhBc3luY0NvbnRleHQgY2FsbGVkIHdpdGhvdXQgYWN0aXZlIGN1cnJlbnQgaW5zdGFuY2UuIFRoaXMgaXMgbGlrZWx5IGEgYnVnLmBcbiAgICApO1xuICB9XG4gIGxldCBhd2FpdGFibGUgPSBnZXRBd2FpdGFibGUoKTtcbiAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgaWYgKGlzUHJvbWlzZShhd2FpdGFibGUpKSB7XG4gICAgYXdhaXRhYmxlID0gYXdhaXRhYmxlLmNhdGNoKChlKSA9PiB7XG4gICAgICBzZXRDdXJyZW50SW5zdGFuY2UoY3R4KTtcbiAgICAgIHRocm93IGU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIFthd2FpdGFibGUsICgpID0+IHNldEN1cnJlbnRJbnN0YW5jZShjdHgpXTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRHVwbGljYXRlQ2hlY2tlcigpIHtcbiAgY29uc3QgY2FjaGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuICh0eXBlLCBrZXkpID0+IHtcbiAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgd2FybiQxKGAke3R5cGV9IHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluICR7Y2FjaGVba2V5XX0uYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlW2tleV0gPSB0eXBlO1xuICAgIH1cbiAgfTtcbn1cbmxldCBzaG91bGRDYWNoZUFjY2VzcyA9IHRydWU7XG5mdW5jdGlvbiBhcHBseU9wdGlvbnMoaW5zdGFuY2UpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHJlc29sdmVNZXJnZWRPcHRpb25zKGluc3RhbmNlKTtcbiAgY29uc3QgcHVibGljVGhpcyA9IGluc3RhbmNlLnByb3h5O1xuICBjb25zdCBjdHggPSBpbnN0YW5jZS5jdHg7XG4gIHNob3VsZENhY2hlQWNjZXNzID0gZmFsc2U7XG4gIGlmIChvcHRpb25zLmJlZm9yZUNyZWF0ZSkge1xuICAgIGNhbGxIb29rKG9wdGlvbnMuYmVmb3JlQ3JlYXRlLCBpbnN0YW5jZSwgXCJiY1wiKTtcbiAgfVxuICBjb25zdCB7XG4gICAgLy8gc3RhdGVcbiAgICBkYXRhOiBkYXRhT3B0aW9ucyxcbiAgICBjb21wdXRlZDogY29tcHV0ZWRPcHRpb25zLFxuICAgIG1ldGhvZHMsXG4gICAgd2F0Y2g6IHdhdGNoT3B0aW9ucyxcbiAgICBwcm92aWRlOiBwcm92aWRlT3B0aW9ucyxcbiAgICBpbmplY3Q6IGluamVjdE9wdGlvbnMsXG4gICAgLy8gbGlmZWN5Y2xlXG4gICAgY3JlYXRlZCxcbiAgICBiZWZvcmVNb3VudCxcbiAgICBtb3VudGVkLFxuICAgIGJlZm9yZVVwZGF0ZSxcbiAgICB1cGRhdGVkLFxuICAgIGFjdGl2YXRlZCxcbiAgICBkZWFjdGl2YXRlZCxcbiAgICBiZWZvcmVEZXN0cm95LFxuICAgIGJlZm9yZVVubW91bnQsXG4gICAgZGVzdHJveWVkLFxuICAgIHVubW91bnRlZCxcbiAgICByZW5kZXIsXG4gICAgcmVuZGVyVHJhY2tlZCxcbiAgICByZW5kZXJUcmlnZ2VyZWQsXG4gICAgZXJyb3JDYXB0dXJlZCxcbiAgICBzZXJ2ZXJQcmVmZXRjaCxcbiAgICAvLyBwdWJsaWMgQVBJXG4gICAgZXhwb3NlLFxuICAgIGluaGVyaXRBdHRycyxcbiAgICAvLyBhc3NldHNcbiAgICBjb21wb25lbnRzLFxuICAgIGRpcmVjdGl2ZXMsXG4gICAgZmlsdGVyc1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSA6IG51bGw7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgY29uc3QgW3Byb3BzT3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XG4gICAgaWYgKHByb3BzT3B0aW9ucykge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHNPcHRpb25zKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIlByb3BzXCIgLyogUFJPUFMgKi8sIGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpbmplY3RPcHRpb25zKSB7XG4gICAgcmVzb2x2ZUluamVjdGlvbnMoaW5qZWN0T3B0aW9ucywgY3R4LCBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMpO1xuICB9XG4gIGlmIChtZXRob2RzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gbWV0aG9kcykge1xuICAgICAgY29uc3QgbWV0aG9kSGFuZGxlciA9IG1ldGhvZHNba2V5XTtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKG1ldGhvZEhhbmRsZXIpKSB7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogbWV0aG9kSGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3R4W2tleV0gPSBtZXRob2RIYW5kbGVyLmJpbmQocHVibGljVGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJNZXRob2RzXCIgLyogTUVUSE9EUyAqLywga2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgTWV0aG9kIFwiJHtrZXl9XCIgaGFzIHR5cGUgXCIke3R5cGVvZiBtZXRob2RIYW5kbGVyfVwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkYXRhT3B0aW9ucykge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFpc0Z1bmN0aW9uKGRhdGFPcHRpb25zKSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgVGhlIGRhdGEgb3B0aW9uIG11c3QgYmUgYSBmdW5jdGlvbi4gUGxhaW4gb2JqZWN0IHVzYWdlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGRhdGFPcHRpb25zLmNhbGwocHVibGljVGhpcywgcHVibGljVGhpcyk7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgaXNQcm9taXNlKGRhdGEpKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGBkYXRhKCkgcmV0dXJuZWQgYSBQcm9taXNlIC0gbm90ZSBkYXRhKCkgY2Fubm90IGJlIGFzeW5jOyBJZiB5b3UgaW50ZW5kIHRvIHBlcmZvcm0gZGF0YSBmZXRjaGluZyBiZWZvcmUgY29tcG9uZW50IHJlbmRlcnMsIHVzZSBhc3luYyBzZXR1cCgpICsgPFN1c3BlbnNlPi5gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHdhcm4kMShgZGF0YSgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS5kYXRhID0gcmVhY3RpdmUoZGF0YSk7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiRGF0YVwiIC8qIERBVEEgKi8sIGtleSk7XG4gICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJlZml4KGtleVswXSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgIGdldDogKCkgPT4gZGF0YVtrZXldLFxuICAgICAgICAgICAgICBzZXQ6IE5PT1BcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBzaG91bGRDYWNoZUFjY2VzcyA9IHRydWU7XG4gIGlmIChjb21wdXRlZE9wdGlvbnMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjb21wdXRlZE9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IG9wdCA9IGNvbXB1dGVkT3B0aW9uc1trZXldO1xuICAgICAgY29uc3QgZ2V0ID0gaXNGdW5jdGlvbihvcHQpID8gb3B0LmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcykgOiBpc0Z1bmN0aW9uKG9wdC5nZXQpID8gb3B0LmdldC5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpIDogTk9PUDtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGdldCA9PT0gTk9PUCkge1xuICAgICAgICB3YXJuJDEoYENvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaGFzIG5vIGdldHRlci5gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNldCA9ICFpc0Z1bmN0aW9uKG9wdCkgJiYgaXNGdW5jdGlvbihvcHQuc2V0KSA/IG9wdC5zZXQuYmluZChwdWJsaWNUaGlzKSA6ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyAoKSA9PiB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgV3JpdGUgb3BlcmF0aW9uIGZhaWxlZDogY29tcHV0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBpcyByZWFkb25seS5gXG4gICAgICAgICk7XG4gICAgICB9IDogTk9PUDtcbiAgICAgIGNvbnN0IGMgPSBjb21wdXRlZCh7XG4gICAgICAgIGdldCxcbiAgICAgICAgc2V0XG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogKCkgPT4gYy52YWx1ZSxcbiAgICAgICAgc2V0OiAodikgPT4gYy52YWx1ZSA9IHZcbiAgICAgIH0pO1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiQ29tcHV0ZWRcIiAvKiBDT01QVVRFRCAqLywga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHdhdGNoT3B0aW9ucykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHdhdGNoT3B0aW9ucykge1xuICAgICAgY3JlYXRlV2F0Y2hlcih3YXRjaE9wdGlvbnNba2V5XSwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpO1xuICAgIH1cbiAgfVxuICBpZiAocHJvdmlkZU9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm92aWRlcyA9IGlzRnVuY3Rpb24ocHJvdmlkZU9wdGlvbnMpID8gcHJvdmlkZU9wdGlvbnMuY2FsbChwdWJsaWNUaGlzKSA6IHByb3ZpZGVPcHRpb25zO1xuICAgIFJlZmxlY3Qub3duS2V5cyhwcm92aWRlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBwcm92aWRlKGtleSwgcHJvdmlkZXNba2V5XSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGNyZWF0ZWQpIHtcbiAgICBjYWxsSG9vayhjcmVhdGVkLCBpbnN0YW5jZSwgXCJjXCIpO1xuICB9XG4gIGZ1bmN0aW9uIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhyZWdpc3RlciwgaG9vaykge1xuICAgIGlmIChpc0FycmF5KGhvb2spKSB7XG4gICAgICBob29rLmZvckVhY2goKF9ob29rKSA9PiByZWdpc3RlcihfaG9vay5iaW5kKHB1YmxpY1RoaXMpKSk7XG4gICAgfSBlbHNlIGlmIChob29rKSB7XG4gICAgICByZWdpc3Rlcihob29rLmJpbmQocHVibGljVGhpcykpO1xuICAgIH1cbiAgfVxuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVNb3VudCwgYmVmb3JlTW91bnQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25Nb3VudGVkLCBtb3VudGVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQmVmb3JlVXBkYXRlLCBiZWZvcmVVcGRhdGUpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25VcGRhdGVkLCB1cGRhdGVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQWN0aXZhdGVkLCBhY3RpdmF0ZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25EZWFjdGl2YXRlZCwgZGVhY3RpdmF0ZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25FcnJvckNhcHR1cmVkLCBlcnJvckNhcHR1cmVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uUmVuZGVyVHJhY2tlZCwgcmVuZGVyVHJhY2tlZCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblJlbmRlclRyaWdnZXJlZCwgcmVuZGVyVHJpZ2dlcmVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQmVmb3JlVW5tb3VudCwgYmVmb3JlVW5tb3VudCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblVubW91bnRlZCwgdW5tb3VudGVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uU2VydmVyUHJlZmV0Y2gsIHNlcnZlclByZWZldGNoKTtcbiAgaWYgKGlzQXJyYXkoZXhwb3NlKSkge1xuICAgIGlmIChleHBvc2UubGVuZ3RoKSB7XG4gICAgICBjb25zdCBleHBvc2VkID0gaW5zdGFuY2UuZXhwb3NlZCB8fCAoaW5zdGFuY2UuZXhwb3NlZCA9IHt9KTtcbiAgICAgIGV4cG9zZS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9zZWQsIGtleSwge1xuICAgICAgICAgIGdldDogKCkgPT4gcHVibGljVGhpc1trZXldLFxuICAgICAgICAgIHNldDogKHZhbCkgPT4gcHVibGljVGhpc1trZXldID0gdmFsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaW5zdGFuY2UuZXhwb3NlZCkge1xuICAgICAgaW5zdGFuY2UuZXhwb3NlZCA9IHt9O1xuICAgIH1cbiAgfVxuICBpZiAocmVuZGVyICYmIGluc3RhbmNlLnJlbmRlciA9PT0gTk9PUCkge1xuICAgIGluc3RhbmNlLnJlbmRlciA9IHJlbmRlcjtcbiAgfVxuICBpZiAoaW5oZXJpdEF0dHJzICE9IG51bGwpIHtcbiAgICBpbnN0YW5jZS5pbmhlcml0QXR0cnMgPSBpbmhlcml0QXR0cnM7XG4gIH1cbiAgaWYgKGNvbXBvbmVudHMpIGluc3RhbmNlLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuICBpZiAoZGlyZWN0aXZlcykgaW5zdGFuY2UuZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXM7XG4gIGlmIChzZXJ2ZXJQcmVmZXRjaCkge1xuICAgIG1hcmtBc3luY0JvdW5kYXJ5KGluc3RhbmNlKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdGlvbnMoaW5qZWN0T3B0aW9ucywgY3R4LCBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMgPSBOT09QKSB7XG4gIGlmIChpc0FycmF5KGluamVjdE9wdGlvbnMpKSB7XG4gICAgaW5qZWN0T3B0aW9ucyA9IG5vcm1hbGl6ZUluamVjdChpbmplY3RPcHRpb25zKTtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBpbmplY3RPcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0ID0gaW5qZWN0T3B0aW9uc1trZXldO1xuICAgIGxldCBpbmplY3RlZDtcbiAgICBpZiAoaXNPYmplY3Qob3B0KSkge1xuICAgICAgaWYgKFwiZGVmYXVsdFwiIGluIG9wdCkge1xuICAgICAgICBpbmplY3RlZCA9IGluamVjdChcbiAgICAgICAgICBvcHQuZnJvbSB8fCBrZXksXG4gICAgICAgICAgb3B0LmRlZmF1bHQsXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5qZWN0ZWQgPSBpbmplY3Qob3B0LmZyb20gfHwga2V5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5qZWN0ZWQgPSBpbmplY3Qob3B0KTtcbiAgICB9XG4gICAgaWYgKGlzUmVmKGluamVjdGVkKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBpbmplY3RlZC52YWx1ZSxcbiAgICAgICAgc2V0OiAodikgPT4gaW5qZWN0ZWQudmFsdWUgPSB2XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4W2tleV0gPSBpbmplY3RlZDtcbiAgICB9XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkluamVjdFwiIC8qIElOSkVDVCAqLywga2V5KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxIb29rKGhvb2ssIGluc3RhbmNlLCB0eXBlKSB7XG4gIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKFxuICAgIGlzQXJyYXkoaG9vaykgPyBob29rLm1hcCgoaCkgPT4gaC5iaW5kKGluc3RhbmNlLnByb3h5KSkgOiBob29rLmJpbmQoaW5zdGFuY2UucHJveHkpLFxuICAgIGluc3RhbmNlLFxuICAgIHR5cGVcbiAgKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIocmF3LCBjdHgsIHB1YmxpY1RoaXMsIGtleSkge1xuICBsZXQgZ2V0dGVyID0ga2V5LmluY2x1ZGVzKFwiLlwiKSA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywga2V5KSA6ICgpID0+IHB1YmxpY1RoaXNba2V5XTtcbiAgaWYgKGlzU3RyaW5nKHJhdykpIHtcbiAgICBjb25zdCBoYW5kbGVyID0gY3R4W3Jhd107XG4gICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICAgIHtcbiAgICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgIHdhcm4kMShgSW52YWxpZCB3YXRjaCBoYW5kbGVyIHNwZWNpZmllZCBieSBrZXkgXCIke3Jhd31cImAsIGhhbmRsZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHJhdykpIHtcbiAgICB7XG4gICAgICB3YXRjaChnZXR0ZXIsIHJhdy5iaW5kKHB1YmxpY1RoaXMpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QocmF3KSkge1xuICAgIGlmIChpc0FycmF5KHJhdykpIHtcbiAgICAgIHJhdy5mb3JFYWNoKChyKSA9PiBjcmVhdGVXYXRjaGVyKHIsIGN0eCwgcHVibGljVGhpcywga2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSBpc0Z1bmN0aW9uKHJhdy5oYW5kbGVyKSA/IHJhdy5oYW5kbGVyLmJpbmQocHVibGljVGhpcykgOiBjdHhbcmF3LmhhbmRsZXJdO1xuICAgICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyLCByYXcpO1xuICAgICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIHdhcm4kMShgSW52YWxpZCB3YXRjaCBoYW5kbGVyIHNwZWNpZmllZCBieSBrZXkgXCIke3Jhdy5oYW5kbGVyfVwiYCwgaGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuJDEoYEludmFsaWQgd2F0Y2ggb3B0aW9uOiBcIiR7a2V5fVwiYCwgcmF3KTtcbiAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpIHtcbiAgY29uc3QgYmFzZSA9IGluc3RhbmNlLnR5cGU7XG4gIGNvbnN0IHsgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gYmFzZTtcbiAgY29uc3Qge1xuICAgIG1peGluczogZ2xvYmFsTWl4aW5zLFxuICAgIG9wdGlvbnNDYWNoZTogY2FjaGUsXG4gICAgY29uZmlnOiB7IG9wdGlvbk1lcmdlU3RyYXRlZ2llcyB9XG4gIH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0O1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoYmFzZSk7XG4gIGxldCByZXNvbHZlZDtcbiAgaWYgKGNhY2hlZCkge1xuICAgIHJlc29sdmVkID0gY2FjaGVkO1xuICB9IGVsc2UgaWYgKCFnbG9iYWxNaXhpbnMubGVuZ3RoICYmICFtaXhpbnMgJiYgIWV4dGVuZHNPcHRpb25zKSB7XG4gICAge1xuICAgICAgcmVzb2x2ZWQgPSBiYXNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXNvbHZlZCA9IHt9O1xuICAgIGlmIChnbG9iYWxNaXhpbnMubGVuZ3RoKSB7XG4gICAgICBnbG9iYWxNaXhpbnMuZm9yRWFjaChcbiAgICAgICAgKG0pID0+IG1lcmdlT3B0aW9ucyhyZXNvbHZlZCwgbSwgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzLCB0cnVlKVxuICAgICAgKTtcbiAgICB9XG4gICAgbWVyZ2VPcHRpb25zKHJlc29sdmVkLCBiYXNlLCBvcHRpb25NZXJnZVN0cmF0ZWdpZXMpO1xuICB9XG4gIGlmIChpc09iamVjdChiYXNlKSkge1xuICAgIGNhY2hlLnNldChiYXNlLCByZXNvbHZlZCk7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVkO1xufVxuZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHRvLCBmcm9tLCBzdHJhdHMsIGFzTWl4aW4gPSBmYWxzZSkge1xuICBjb25zdCB7IG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IGZyb207XG4gIGlmIChleHRlbmRzT3B0aW9ucykge1xuICAgIG1lcmdlT3B0aW9ucyh0bywgZXh0ZW5kc09wdGlvbnMsIHN0cmF0cywgdHJ1ZSk7XG4gIH1cbiAgaWYgKG1peGlucykge1xuICAgIG1peGlucy5mb3JFYWNoKFxuICAgICAgKG0pID0+IG1lcmdlT3B0aW9ucyh0bywgbSwgc3RyYXRzLCB0cnVlKVxuICAgICk7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gZnJvbSkge1xuICAgIGlmIChhc01peGluICYmIGtleSA9PT0gXCJleHBvc2VcIikge1xuICAgICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB3YXJuJDEoXG4gICAgICAgIGBcImV4cG9zZVwiIG9wdGlvbiBpcyBpZ25vcmVkIHdoZW4gZGVjbGFyZWQgaW4gbWl4aW5zIG9yIGV4dGVuZHMuIEl0IHNob3VsZCBvbmx5IGJlIGRlY2xhcmVkIGluIHRoZSBiYXNlIGNvbXBvbmVudCBpdHNlbGYuYFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3RyYXQgPSBpbnRlcm5hbE9wdGlvbk1lcmdlU3RyYXRzW2tleV0gfHwgc3RyYXRzICYmIHN0cmF0c1trZXldO1xuICAgICAgdG9ba2V5XSA9IHN0cmF0ID8gc3RyYXQodG9ba2V5XSwgZnJvbVtrZXldKSA6IGZyb21ba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufVxuY29uc3QgaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0cyA9IHtcbiAgZGF0YTogbWVyZ2VEYXRhRm4sXG4gIHByb3BzOiBtZXJnZUVtaXRzT3JQcm9wc09wdGlvbnMsXG4gIGVtaXRzOiBtZXJnZUVtaXRzT3JQcm9wc09wdGlvbnMsXG4gIC8vIG9iamVjdHNcbiAgbWV0aG9kczogbWVyZ2VPYmplY3RPcHRpb25zLFxuICBjb21wdXRlZDogbWVyZ2VPYmplY3RPcHRpb25zLFxuICAvLyBsaWZlY3ljbGVcbiAgYmVmb3JlQ3JlYXRlOiBtZXJnZUFzQXJyYXksXG4gIGNyZWF0ZWQ6IG1lcmdlQXNBcnJheSxcbiAgYmVmb3JlTW91bnQ6IG1lcmdlQXNBcnJheSxcbiAgbW91bnRlZDogbWVyZ2VBc0FycmF5LFxuICBiZWZvcmVVcGRhdGU6IG1lcmdlQXNBcnJheSxcbiAgdXBkYXRlZDogbWVyZ2VBc0FycmF5LFxuICBiZWZvcmVEZXN0cm95OiBtZXJnZUFzQXJyYXksXG4gIGJlZm9yZVVubW91bnQ6IG1lcmdlQXNBcnJheSxcbiAgZGVzdHJveWVkOiBtZXJnZUFzQXJyYXksXG4gIHVubW91bnRlZDogbWVyZ2VBc0FycmF5LFxuICBhY3RpdmF0ZWQ6IG1lcmdlQXNBcnJheSxcbiAgZGVhY3RpdmF0ZWQ6IG1lcmdlQXNBcnJheSxcbiAgZXJyb3JDYXB0dXJlZDogbWVyZ2VBc0FycmF5LFxuICBzZXJ2ZXJQcmVmZXRjaDogbWVyZ2VBc0FycmF5LFxuICAvLyBhc3NldHNcbiAgY29tcG9uZW50czogbWVyZ2VPYmplY3RPcHRpb25zLFxuICBkaXJlY3RpdmVzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gIC8vIHdhdGNoXG4gIHdhdGNoOiBtZXJnZVdhdGNoT3B0aW9ucyxcbiAgLy8gcHJvdmlkZSAvIGluamVjdFxuICBwcm92aWRlOiBtZXJnZURhdGFGbixcbiAgaW5qZWN0OiBtZXJnZUluamVjdFxufTtcbmZ1bmN0aW9uIG1lcmdlRGF0YUZuKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkge1xuICAgIHJldHVybiB0bztcbiAgfVxuICBpZiAoIXRvKSB7XG4gICAgcmV0dXJuIGZyb207XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbigpIHtcbiAgICByZXR1cm4gKGV4dGVuZCkoXG4gICAgICBpc0Z1bmN0aW9uKHRvKSA/IHRvLmNhbGwodGhpcywgdGhpcykgOiB0byxcbiAgICAgIGlzRnVuY3Rpb24oZnJvbSkgPyBmcm9tLmNhbGwodGhpcywgdGhpcykgOiBmcm9tXG4gICAgKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIG1lcmdlSW5qZWN0KHRvLCBmcm9tKSB7XG4gIHJldHVybiBtZXJnZU9iamVjdE9wdGlvbnMobm9ybWFsaXplSW5qZWN0KHRvKSwgbm9ybWFsaXplSW5qZWN0KGZyb20pKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdChyYXcpIHtcbiAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXNbcmF3W2ldXSA9IHJhd1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICByZXR1cm4gcmF3O1xufVxuZnVuY3Rpb24gbWVyZ2VBc0FycmF5KHRvLCBmcm9tKSB7XG4gIHJldHVybiB0byA/IFsuLi5uZXcgU2V0KFtdLmNvbmNhdCh0bywgZnJvbSkpXSA6IGZyb207XG59XG5mdW5jdGlvbiBtZXJnZU9iamVjdE9wdGlvbnModG8sIGZyb20pIHtcbiAgcmV0dXJuIHRvID8gZXh0ZW5kKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpLCB0bywgZnJvbSkgOiBmcm9tO1xufVxuZnVuY3Rpb24gbWVyZ2VFbWl0c09yUHJvcHNPcHRpb25zKHRvLCBmcm9tKSB7XG4gIGlmICh0bykge1xuICAgIGlmIChpc0FycmF5KHRvKSAmJiBpc0FycmF5KGZyb20pKSB7XG4gICAgICByZXR1cm4gWy4uLi8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFsuLi50bywgLi4uZnJvbV0pXTtcbiAgICB9XG4gICAgcmV0dXJuIGV4dGVuZChcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgbm9ybWFsaXplUHJvcHNPckVtaXRzKHRvKSxcbiAgICAgIG5vcm1hbGl6ZVByb3BzT3JFbWl0cyhmcm9tICE9IG51bGwgPyBmcm9tIDoge30pXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnJvbTtcbiAgfVxufVxuZnVuY3Rpb24gbWVyZ2VXYXRjaE9wdGlvbnModG8sIGZyb20pIHtcbiAgaWYgKCF0bykgcmV0dXJuIGZyb207XG4gIGlmICghZnJvbSkgcmV0dXJuIHRvO1xuICBjb25zdCBtZXJnZWQgPSBleHRlbmQoLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCksIHRvKTtcbiAgZm9yIChjb25zdCBrZXkgaW4gZnJvbSkge1xuICAgIG1lcmdlZFtrZXldID0gbWVyZ2VBc0FycmF5KHRvW2tleV0sIGZyb21ba2V5XSk7XG4gIH1cbiAgcmV0dXJuIG1lcmdlZDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXBwQ29udGV4dCgpIHtcbiAgcmV0dXJuIHtcbiAgICBhcHA6IG51bGwsXG4gICAgY29uZmlnOiB7XG4gICAgICBpc05hdGl2ZVRhZzogTk8sXG4gICAgICBwZXJmb3JtYW5jZTogZmFsc2UsXG4gICAgICBnbG9iYWxQcm9wZXJ0aWVzOiB7fSxcbiAgICAgIG9wdGlvbk1lcmdlU3RyYXRlZ2llczoge30sXG4gICAgICBlcnJvckhhbmRsZXI6IHZvaWQgMCxcbiAgICAgIHdhcm5IYW5kbGVyOiB2b2lkIDAsXG4gICAgICBjb21waWxlck9wdGlvbnM6IHt9XG4gICAgfSxcbiAgICBtaXhpbnM6IFtdLFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIGRpcmVjdGl2ZXM6IHt9LFxuICAgIHByb3ZpZGVzOiAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICBvcHRpb25zQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLFxuICAgIHByb3BzQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLFxuICAgIGVtaXRzQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpXG4gIH07XG59XG5sZXQgdWlkJDEgPSAwO1xuZnVuY3Rpb24gY3JlYXRlQXBwQVBJKHJlbmRlciwgaHlkcmF0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQXBwKHJvb3RDb21wb25lbnQsIHJvb3RQcm9wcyA9IG51bGwpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocm9vdENvbXBvbmVudCkpIHtcbiAgICAgIHJvb3RDb21wb25lbnQgPSBleHRlbmQoe30sIHJvb3RDb21wb25lbnQpO1xuICAgIH1cbiAgICBpZiAocm9vdFByb3BzICE9IG51bGwgJiYgIWlzT2JqZWN0KHJvb3RQcm9wcykpIHtcbiAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgd2FybiQxKGByb290IHByb3BzIHBhc3NlZCB0byBhcHAubW91bnQoKSBtdXN0IGJlIGFuIG9iamVjdC5gKTtcbiAgICAgIHJvb3RQcm9wcyA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVBcHBDb250ZXh0KCk7XG4gICAgY29uc3QgaW5zdGFsbGVkUGx1Z2lucyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpO1xuICAgIGNvbnN0IHBsdWdpbkNsZWFudXBGbnMgPSBbXTtcbiAgICBsZXQgaXNNb3VudGVkID0gZmFsc2U7XG4gICAgY29uc3QgYXBwID0gY29udGV4dC5hcHAgPSB7XG4gICAgICBfdWlkOiB1aWQkMSsrLFxuICAgICAgX2NvbXBvbmVudDogcm9vdENvbXBvbmVudCxcbiAgICAgIF9wcm9wczogcm9vdFByb3BzLFxuICAgICAgX2NvbnRhaW5lcjogbnVsbCxcbiAgICAgIF9jb250ZXh0OiBjb250ZXh0LFxuICAgICAgX2luc3RhbmNlOiBudWxsLFxuICAgICAgdmVyc2lvbixcbiAgICAgIGdldCBjb25maWcoKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmNvbmZpZztcbiAgICAgIH0sXG4gICAgICBzZXQgY29uZmlnKHYpIHtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgYXBwLmNvbmZpZyBjYW5ub3QgYmUgcmVwbGFjZWQuIE1vZGlmeSBpbmRpdmlkdWFsIG9wdGlvbnMgaW5zdGVhZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVzZShwbHVnaW4sIC4uLm9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaGFzKHBsdWdpbikpIHtcbiAgICAgICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHdhcm4kMShgUGx1Z2luIGhhcyBhbHJlYWR5IGJlZW4gYXBwbGllZCB0byB0YXJnZXQgYXBwLmApO1xuICAgICAgICB9IGVsc2UgaWYgKHBsdWdpbiAmJiBpc0Z1bmN0aW9uKHBsdWdpbi5pbnN0YWxsKSkge1xuICAgICAgICAgIGluc3RhbGxlZFBsdWdpbnMuYWRkKHBsdWdpbik7XG4gICAgICAgICAgcGx1Z2luLmluc3RhbGwoYXBwLCAuLi5vcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHBsdWdpbikpIHtcbiAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xuICAgICAgICAgIHBsdWdpbihhcHAsIC4uLm9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgQSBwbHVnaW4gbXVzdCBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgd2l0aCBhbiBcImluc3RhbGxcIiBmdW5jdGlvbi5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgfSxcbiAgICAgIG1peGluKG1peGluKSB7XG4gICAgICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fKSB7XG4gICAgICAgICAgaWYgKCFjb250ZXh0Lm1peGlucy5pbmNsdWRlcyhtaXhpbikpIHtcbiAgICAgICAgICAgIGNvbnRleHQubWl4aW5zLnB1c2gobWl4aW4pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgICBcIk1peGluIGhhcyBhbHJlYWR5IGJlZW4gYXBwbGllZCB0byB0YXJnZXQgYXBwXCIgKyAobWl4aW4ubmFtZSA/IGA6ICR7bWl4aW4ubmFtZX1gIDogXCJcIilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICB3YXJuJDEoXCJNaXhpbnMgYXJlIG9ubHkgYXZhaWxhYmxlIGluIGJ1aWxkcyBzdXBwb3J0aW5nIE9wdGlvbnMgQVBJXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgY29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCkge1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lLCBjb250ZXh0LmNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4gY29udGV4dC5jb21wb25lbnRzW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXSkge1xuICAgICAgICAgIHdhcm4kMShgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBpbiB0YXJnZXQgYXBwLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXSA9IGNvbXBvbmVudDtcbiAgICAgICAgcmV0dXJuIGFwcDtcbiAgICAgIH0sXG4gICAgICBkaXJlY3RpdmUobmFtZSwgZGlyZWN0aXZlKSB7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGlyZWN0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBjb250ZXh0LmRpcmVjdGl2ZXNbbmFtZV0pIHtcbiAgICAgICAgICB3YXJuJDEoYERpcmVjdGl2ZSBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmRpcmVjdGl2ZXNbbmFtZV0gPSBkaXJlY3RpdmU7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgbW91bnQocm9vdENvbnRhaW5lciwgaXNIeWRyYXRlLCBuYW1lc3BhY2UpIHtcbiAgICAgICAgaWYgKCFpc01vdW50ZWQpIHtcbiAgICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiByb290Q29udGFpbmVyLl9fdnVlX2FwcF9fKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIGBUaGVyZSBpcyBhbHJlYWR5IGFuIGFwcCBpbnN0YW5jZSBtb3VudGVkIG9uIHRoZSBob3N0IGNvbnRhaW5lci5cbiBJZiB5b3Ugd2FudCB0byBtb3VudCBhbm90aGVyIGFwcCBvbiB0aGUgc2FtZSBob3N0IGNvbnRhaW5lciwgeW91IG5lZWQgdG8gdW5tb3VudCB0aGUgcHJldmlvdXMgYXBwIGJ5IGNhbGxpbmcgXFxgYXBwLnVubW91bnQoKVxcYCBmaXJzdC5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB2bm9kZSA9IGFwcC5fY2VWTm9kZSB8fCBjcmVhdGVWTm9kZShyb290Q29tcG9uZW50LCByb290UHJvcHMpO1xuICAgICAgICAgIHZub2RlLmFwcENvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgIGlmIChuYW1lc3BhY2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZSA9IFwic3ZnXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChuYW1lc3BhY2UgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBuYW1lc3BhY2UgPSB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlbG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgcmVuZGVyKFxuICAgICAgICAgICAgICAgIGNsb25lVk5vZGUodm5vZGUpLFxuICAgICAgICAgICAgICAgIHJvb3RDb250YWluZXIsXG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNIeWRyYXRlICYmIGh5ZHJhdGUpIHtcbiAgICAgICAgICAgIGh5ZHJhdGUodm5vZGUsIHJvb3RDb250YWluZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW5kZXIodm5vZGUsIHJvb3RDb250YWluZXIsIG5hbWVzcGFjZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzTW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgYXBwLl9jb250YWluZXIgPSByb290Q29udGFpbmVyO1xuICAgICAgICAgIHJvb3RDb250YWluZXIuX192dWVfYXBwX18gPSBhcHA7XG4gICAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICBhcHAuX2luc3RhbmNlID0gdm5vZGUuY29tcG9uZW50O1xuICAgICAgICAgICAgZGV2dG9vbHNJbml0QXBwKGFwcCwgdmVyc2lvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBnZXRDb21wb25lbnRQdWJsaWNJbnN0YW5jZSh2bm9kZS5jb21wb25lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgQXBwIGhhcyBhbHJlYWR5IGJlZW4gbW91bnRlZC5cbklmIHlvdSB3YW50IHRvIHJlbW91bnQgdGhlIHNhbWUgYXBwLCBtb3ZlIHlvdXIgYXBwIGNyZWF0aW9uIGxvZ2ljIGludG8gYSBmYWN0b3J5IGZ1bmN0aW9uIGFuZCBjcmVhdGUgZnJlc2ggYXBwIGluc3RhbmNlcyBmb3IgZWFjaCBtb3VudCAtIGUuZy4gXFxgY29uc3QgY3JlYXRlTXlBcHAgPSAoKSA9PiBjcmVhdGVBcHAoQXBwKVxcYGBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50KGNsZWFudXBGbikge1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB0eXBlb2YgY2xlYW51cEZuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgRXhwZWN0ZWQgZnVuY3Rpb24gYXMgZmlyc3QgYXJndW1lbnQgdG8gYXBwLm9uVW5tb3VudCgpLCBidXQgZ290ICR7dHlwZW9mIGNsZWFudXBGbn1gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBwbHVnaW5DbGVhbnVwRm5zLnB1c2goY2xlYW51cEZuKTtcbiAgICAgIH0sXG4gICAgICB1bm1vdW50KCkge1xuICAgICAgICBpZiAoaXNNb3VudGVkKSB7XG4gICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgICAgICAgICBwbHVnaW5DbGVhbnVwRm5zLFxuICAgICAgICAgICAgYXBwLl9pbnN0YW5jZSxcbiAgICAgICAgICAgIDE2XG4gICAgICAgICAgKTtcbiAgICAgICAgICByZW5kZXIobnVsbCwgYXBwLl9jb250YWluZXIpO1xuICAgICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgYXBwLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICBkZXZ0b29sc1VubW91bnRBcHAoYXBwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIGFwcC5fY29udGFpbmVyLl9fdnVlX2FwcF9fO1xuICAgICAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICB3YXJuJDEoYENhbm5vdCB1bm1vdW50IGFuIGFwcCB0aGF0IGlzIG5vdCBtb3VudGVkLmApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvdmlkZShrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGtleSBpbiBjb250ZXh0LnByb3ZpZGVzKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYEFwcCBhbHJlYWR5IHByb3ZpZGVzIHByb3BlcnR5IHdpdGgga2V5IFwiJHtTdHJpbmcoa2V5KX1cIi4gSXQgd2lsbCBiZSBvdmVyd3JpdHRlbiB3aXRoIHRoZSBuZXcgdmFsdWUuYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5wcm92aWRlc1trZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgcnVuV2l0aENvbnRleHQoZm4pIHtcbiAgICAgICAgY29uc3QgbGFzdEFwcCA9IGN1cnJlbnRBcHA7XG4gICAgICAgIGN1cnJlbnRBcHAgPSBhcHA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgY3VycmVudEFwcCA9IGxhc3RBcHA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhcHA7XG4gIH07XG59XG5sZXQgY3VycmVudEFwcCA9IG51bGw7XG5cbmZ1bmN0aW9uIHByb3ZpZGUoa2V5LCB2YWx1ZSkge1xuICBpZiAoIWN1cnJlbnRJbnN0YW5jZSkge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICB3YXJuJDEoYHByb3ZpZGUoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpLmApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgcHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucHJvdmlkZXM7XG4gICAgY29uc3QgcGFyZW50UHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucGFyZW50ICYmIGN1cnJlbnRJbnN0YW5jZS5wYXJlbnQucHJvdmlkZXM7XG4gICAgaWYgKHBhcmVudFByb3ZpZGVzID09PSBwcm92aWRlcykge1xuICAgICAgcHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucHJvdmlkZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFByb3ZpZGVzKTtcbiAgICB9XG4gICAgcHJvdmlkZXNba2V5XSA9IHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBpbmplY3Qoa2V5LCBkZWZhdWx0VmFsdWUsIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSA9IGZhbHNlKSB7XG4gIGNvbnN0IGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKGluc3RhbmNlIHx8IGN1cnJlbnRBcHApIHtcbiAgICBjb25zdCBwcm92aWRlcyA9IGN1cnJlbnRBcHAgPyBjdXJyZW50QXBwLl9jb250ZXh0LnByb3ZpZGVzIDogaW5zdGFuY2UgPyBpbnN0YW5jZS5wYXJlbnQgPT0gbnVsbCA/IGluc3RhbmNlLnZub2RlLmFwcENvbnRleHQgJiYgaW5zdGFuY2Uudm5vZGUuYXBwQ29udGV4dC5wcm92aWRlcyA6IGluc3RhbmNlLnBhcmVudC5wcm92aWRlcyA6IHZvaWQgMDtcbiAgICBpZiAocHJvdmlkZXMgJiYga2V5IGluIHByb3ZpZGVzKSB7XG4gICAgICByZXR1cm4gcHJvdmlkZXNba2V5XTtcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gdHJlYXREZWZhdWx0QXNGYWN0b3J5ICYmIGlzRnVuY3Rpb24oZGVmYXVsdFZhbHVlKSA/IGRlZmF1bHRWYWx1ZS5jYWxsKGluc3RhbmNlICYmIGluc3RhbmNlLnByb3h5KSA6IGRlZmF1bHRWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgIHdhcm4kMShgaW5qZWN0aW9uIFwiJHtTdHJpbmcoa2V5KX1cIiBub3QgZm91bmQuYCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuJDEoYGluamVjdCgpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHNldHVwKCkgb3IgZnVuY3Rpb25hbCBjb21wb25lbnRzLmApO1xuICB9XG59XG5mdW5jdGlvbiBoYXNJbmplY3Rpb25Db250ZXh0KCkge1xuICByZXR1cm4gISEoY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSB8fCBjdXJyZW50QXBwKTtcbn1cblxuY29uc3QgaW50ZXJuYWxPYmplY3RQcm90byA9IHt9O1xuY29uc3QgY3JlYXRlSW50ZXJuYWxPYmplY3QgPSAoKSA9PiBPYmplY3QuY3JlYXRlKGludGVybmFsT2JqZWN0UHJvdG8pO1xuY29uc3QgaXNJbnRlcm5hbE9iamVjdCA9IChvYmopID0+IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBpbnRlcm5hbE9iamVjdFByb3RvO1xuXG5mdW5jdGlvbiBpbml0UHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBpc1N0YXRlZnVsLCBpc1NTUiA9IGZhbHNlKSB7XG4gIGNvbnN0IHByb3BzID0ge307XG4gIGNvbnN0IGF0dHJzID0gY3JlYXRlSW50ZXJuYWxPYmplY3QoKTtcbiAgaW5zdGFuY2UucHJvcHNEZWZhdWx0cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpO1xuICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5wcm9wc09wdGlvbnNbMF0pIHtcbiAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XG4gICAgICBwcm9wc1trZXldID0gdm9pZCAwO1xuICAgIH1cbiAgfVxuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIHZhbGlkYXRlUHJvcHMocmF3UHJvcHMgfHwge30sIHByb3BzLCBpbnN0YW5jZSk7XG4gIH1cbiAgaWYgKGlzU3RhdGVmdWwpIHtcbiAgICBpbnN0YW5jZS5wcm9wcyA9IGlzU1NSID8gcHJvcHMgOiBzaGFsbG93UmVhY3RpdmUocHJvcHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW5zdGFuY2UudHlwZS5wcm9wcykge1xuICAgICAgaW5zdGFuY2UucHJvcHMgPSBhdHRycztcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UucHJvcHMgPSBwcm9wcztcbiAgICB9XG4gIH1cbiAgaW5zdGFuY2UuYXR0cnMgPSBhdHRycztcbn1cbmZ1bmN0aW9uIGlzSW5IbXJDb250ZXh0KGluc3RhbmNlKSB7XG4gIHdoaWxlIChpbnN0YW5jZSkge1xuICAgIGlmIChpbnN0YW5jZS50eXBlLl9faG1ySWQpIHJldHVybiB0cnVlO1xuICAgIGluc3RhbmNlID0gaW5zdGFuY2UucGFyZW50O1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHJhd1ByZXZQcm9wcywgb3B0aW1pemVkKSB7XG4gIGNvbnN0IHtcbiAgICBwcm9wcyxcbiAgICBhdHRycyxcbiAgICB2bm9kZTogeyBwYXRjaEZsYWcgfVxuICB9ID0gaW5zdGFuY2U7XG4gIGNvbnN0IHJhd0N1cnJlbnRQcm9wcyA9IHRvUmF3KHByb3BzKTtcbiAgY29uc3QgW29wdGlvbnNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xuICBsZXQgaGFzQXR0cnNDaGFuZ2VkID0gZmFsc2U7XG4gIGlmIChcbiAgICAvLyBhbHdheXMgZm9yY2UgZnVsbCBkaWZmIGluIGRldlxuICAgIC8vIC0gIzE5NDIgaWYgaG1yIGlzIGVuYWJsZWQgd2l0aCBzZmMgY29tcG9uZW50XG4gICAgLy8gLSB2aXRlIzg3MiBub24tc2ZjIGNvbXBvbmVudCB1c2VkIGJ5IHNmYyBjb21wb25lbnRcbiAgICAhKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgaXNJbkhtckNvbnRleHQoaW5zdGFuY2UpKSAmJiAob3B0aW1pemVkIHx8IHBhdGNoRmxhZyA+IDApICYmICEocGF0Y2hGbGFnICYgMTYpXG4gICkge1xuICAgIGlmIChwYXRjaEZsYWcgJiA4KSB7XG4gICAgICBjb25zdCBwcm9wc1RvVXBkYXRlID0gaW5zdGFuY2Uudm5vZGUuZHluYW1pY1Byb3BzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xuICAgICAgICBpZiAoaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSByYXdQcm9wc1trZXldO1xuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIGlmIChoYXNPd24oYXR0cnMsIGtleSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgICAgICBwcm9wc1tjYW1lbGl6ZWRLZXldID0gcmVzb2x2ZVByb3BWYWx1ZShcbiAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgcmF3Q3VycmVudFByb3BzLFxuICAgICAgICAgICAgICBjYW1lbGl6ZWRLZXksXG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycykpIHtcbiAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICAgIGxldCBrZWJhYktleTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdDdXJyZW50UHJvcHMpIHtcbiAgICAgIGlmICghcmF3UHJvcHMgfHwgLy8gZm9yIGNhbWVsQ2FzZVxuICAgICAgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiAvLyBpdCdzIHBvc3NpYmxlIHRoZSBvcmlnaW5hbCBwcm9wcyB3YXMgcGFzc2VkIGluIGFzIGtlYmFiLWNhc2VcbiAgICAgIC8vIGFuZCBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlICgjOTU1KVxuICAgICAgKChrZWJhYktleSA9IGh5cGhlbmF0ZShrZXkpKSA9PT0ga2V5IHx8ICFoYXNPd24ocmF3UHJvcHMsIGtlYmFiS2V5KSkpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAocmF3UHJldlByb3BzICYmIC8vIGZvciBjYW1lbENhc2VcbiAgICAgICAgICAocmF3UHJldlByb3BzW2tleV0gIT09IHZvaWQgMCB8fCAvLyBmb3Iga2ViYWItY2FzZVxuICAgICAgICAgIHJhd1ByZXZQcm9wc1trZWJhYktleV0gIT09IHZvaWQgMCkpIHtcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKFxuICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICByYXdDdXJyZW50UHJvcHMsXG4gICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGF0dHJzICE9PSByYXdDdXJyZW50UHJvcHMpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGlmICghcmF3UHJvcHMgfHwgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiB0cnVlKSB7XG4gICAgICAgICAgZGVsZXRlIGF0dHJzW2tleV07XG4gICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaGFzQXR0cnNDaGFuZ2VkKSB7XG4gICAgdHJpZ2dlcihpbnN0YW5jZS5hdHRycywgXCJzZXRcIiwgXCJcIik7XG4gIH1cbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB2YWxpZGF0ZVByb3BzKHJhd1Byb3BzIHx8IHt9LCBwcm9wcywgaW5zdGFuY2UpO1xuICB9XG59XG5mdW5jdGlvbiBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpIHtcbiAgY29uc3QgW29wdGlvbnMsIG5lZWRDYXN0S2V5c10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XG4gIGxldCBoYXNBdHRyc0NoYW5nZWQgPSBmYWxzZTtcbiAgbGV0IHJhd0Nhc3RWYWx1ZXM7XG4gIGlmIChyYXdQcm9wcykge1xuICAgIGZvciAobGV0IGtleSBpbiByYXdQcm9wcykge1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZSA9IHJhd1Byb3BzW2tleV07XG4gICAgICBsZXQgY2FtZWxLZXk7XG4gICAgICBpZiAob3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgY2FtZWxLZXkgPSBjYW1lbGl6ZShrZXkpKSkge1xuICAgICAgICBpZiAoIW5lZWRDYXN0S2V5cyB8fCAhbmVlZENhc3RLZXlzLmluY2x1ZGVzKGNhbWVsS2V5KSkge1xuICAgICAgICAgIHByb3BzW2NhbWVsS2V5XSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIChyYXdDYXN0VmFsdWVzIHx8IChyYXdDYXN0VmFsdWVzID0ge30pKVtjYW1lbEtleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBhdHRycykgfHwgdmFsdWUgIT09IGF0dHJzW2tleV0pIHtcbiAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAobmVlZENhc3RLZXlzKSB7XG4gICAgY29uc3QgcmF3Q3VycmVudFByb3BzID0gdG9SYXcocHJvcHMpO1xuICAgIGNvbnN0IGNhc3RWYWx1ZXMgPSByYXdDYXN0VmFsdWVzIHx8IEVNUFRZX09CSjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5lZWRDYXN0S2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gbmVlZENhc3RLZXlzW2ldO1xuICAgICAgcHJvcHNba2V5XSA9IHJlc29sdmVQcm9wVmFsdWUoXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIHJhd0N1cnJlbnRQcm9wcyxcbiAgICAgICAga2V5LFxuICAgICAgICBjYXN0VmFsdWVzW2tleV0sXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICAhaGFzT3duKGNhc3RWYWx1ZXMsIGtleSlcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBoYXNBdHRyc0NoYW5nZWQ7XG59XG5mdW5jdGlvbiByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHByb3BzLCBrZXksIHZhbHVlLCBpbnN0YW5jZSwgaXNBYnNlbnQpIHtcbiAgY29uc3Qgb3B0ID0gb3B0aW9uc1trZXldO1xuICBpZiAob3B0ICE9IG51bGwpIHtcbiAgICBjb25zdCBoYXNEZWZhdWx0ID0gaGFzT3duKG9wdCwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChoYXNEZWZhdWx0ICYmIHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IG9wdC5kZWZhdWx0O1xuICAgICAgaWYgKG9wdC50eXBlICE9PSBGdW5jdGlvbiAmJiAhb3B0LnNraXBGYWN0b3J5ICYmIGlzRnVuY3Rpb24oZGVmYXVsdFZhbHVlKSkge1xuICAgICAgICBjb25zdCB7IHByb3BzRGVmYXVsdHMgfSA9IGluc3RhbmNlO1xuICAgICAgICBpZiAoa2V5IGluIHByb3BzRGVmYXVsdHMpIHtcbiAgICAgICAgICB2YWx1ZSA9IHByb3BzRGVmYXVsdHNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCByZXNldCA9IHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgICAgdmFsdWUgPSBwcm9wc0RlZmF1bHRzW2tleV0gPSBkZWZhdWx0VmFsdWUuY2FsbChcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwcm9wc1xuICAgICAgICAgICk7XG4gICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5zdGFuY2UuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UuY2UuX3NldFByb3Aoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRbMCAvKiBzaG91bGRDYXN0ICovXSkge1xuICAgICAgaWYgKGlzQWJzZW50ICYmICFoYXNEZWZhdWx0KSB7XG4gICAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKG9wdFsxIC8qIHNob3VsZENhc3RUcnVlICovXSAmJiAodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmNvbnN0IG1peGluUHJvcHNDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xuICBjb25zdCBjYWNoZSA9IF9fVlVFX09QVElPTlNfQVBJX18gJiYgYXNNaXhpbiA/IG1peGluUHJvcHNDYWNoZSA6IGFwcENvbnRleHQucHJvcHNDYWNoZTtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGNvbXApO1xuICBpZiAoY2FjaGVkKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuICBjb25zdCByYXcgPSBjb21wLnByb3BzO1xuICBjb25zdCBub3JtYWxpemVkID0ge307XG4gIGNvbnN0IG5lZWRDYXN0S2V5cyA9IFtdO1xuICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xuICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xuICAgIGNvbnN0IGV4dGVuZFByb3BzID0gKHJhdzIpID0+IHtcbiAgICAgIGhhc0V4dGVuZHMgPSB0cnVlO1xuICAgICAgY29uc3QgW3Byb3BzLCBrZXlzXSA9IG5vcm1hbGl6ZVByb3BzT3B0aW9ucyhyYXcyLCBhcHBDb250ZXh0LCB0cnVlKTtcbiAgICAgIGV4dGVuZChub3JtYWxpemVkLCBwcm9wcyk7XG4gICAgICBpZiAoa2V5cykgbmVlZENhc3RLZXlzLnB1c2goLi4ua2V5cyk7XG4gICAgfTtcbiAgICBpZiAoIWFzTWl4aW4gJiYgYXBwQ29udGV4dC5taXhpbnMubGVuZ3RoKSB7XG4gICAgICBhcHBDb250ZXh0Lm1peGlucy5mb3JFYWNoKGV4dGVuZFByb3BzKTtcbiAgICB9XG4gICAgaWYgKGNvbXAuZXh0ZW5kcykge1xuICAgICAgZXh0ZW5kUHJvcHMoY29tcC5leHRlbmRzKTtcbiAgICB9XG4gICAgaWYgKGNvbXAubWl4aW5zKSB7XG4gICAgICBjb21wLm1peGlucy5mb3JFYWNoKGV4dGVuZFByb3BzKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFyYXcgJiYgIWhhc0V4dGVuZHMpIHtcbiAgICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICAgIGNhY2hlLnNldChjb21wLCBFTVBUWV9BUlIpO1xuICAgIH1cbiAgICByZXR1cm4gRU1QVFlfQVJSO1xuICB9XG4gIGlmIChpc0FycmF5KHJhdykpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhdy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIWlzU3RyaW5nKHJhd1tpXSkpIHtcbiAgICAgICAgd2FybiQxKGBwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguYCwgcmF3W2ldKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShyYXdbaV0pO1xuICAgICAgaWYgKHZhbGlkYXRlUHJvcE5hbWUobm9ybWFsaXplZEtleSkpIHtcbiAgICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9IEVNUFRZX09CSjtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAocmF3KSB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIWlzT2JqZWN0KHJhdykpIHtcbiAgICAgIHdhcm4kMShgaW52YWxpZCBwcm9wcyBvcHRpb25zYCwgcmF3KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmF3KSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIGlmICh2YWxpZGF0ZVByb3BOYW1lKG5vcm1hbGl6ZWRLZXkpKSB7XG4gICAgICAgIGNvbnN0IG9wdCA9IHJhd1trZXldO1xuICAgICAgICBjb25zdCBwcm9wID0gbm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9IGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkgPyB7IHR5cGU6IG9wdCB9IDogZXh0ZW5kKHt9LCBvcHQpO1xuICAgICAgICBjb25zdCBwcm9wVHlwZSA9IHByb3AudHlwZTtcbiAgICAgICAgbGV0IHNob3VsZENhc3QgPSBmYWxzZTtcbiAgICAgICAgbGV0IHNob3VsZENhc3RUcnVlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGlzQXJyYXkocHJvcFR5cGUpKSB7XG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHByb3BUeXBlLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHByb3BUeXBlW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVOYW1lID0gaXNGdW5jdGlvbih0eXBlKSAmJiB0eXBlLm5hbWU7XG4gICAgICAgICAgICBpZiAodHlwZU5hbWUgPT09IFwiQm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgIHNob3VsZENhc3QgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZU5hbWUgPT09IFwiU3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgc2hvdWxkQ2FzdFRydWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hvdWxkQ2FzdCA9IGlzRnVuY3Rpb24ocHJvcFR5cGUpICYmIHByb3BUeXBlLm5hbWUgPT09IFwiQm9vbGVhblwiO1xuICAgICAgICB9XG4gICAgICAgIHByb3BbMCAvKiBzaG91bGRDYXN0ICovXSA9IHNob3VsZENhc3Q7XG4gICAgICAgIHByb3BbMSAvKiBzaG91bGRDYXN0VHJ1ZSAqL10gPSBzaG91bGRDYXN0VHJ1ZTtcbiAgICAgICAgaWYgKHNob3VsZENhc3QgfHwgaGFzT3duKHByb3AsIFwiZGVmYXVsdFwiKSkge1xuICAgICAgICAgIG5lZWRDYXN0S2V5cy5wdXNoKG5vcm1hbGl6ZWRLZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlcyA9IFtub3JtYWxpemVkLCBuZWVkQ2FzdEtleXNdO1xuICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICBjYWNoZS5zZXQoY29tcCwgcmVzKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wTmFtZShrZXkpIHtcbiAgaWYgKGtleVswXSAhPT0gXCIkXCIgJiYgIWlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgd2FybiQxKGBJbnZhbGlkIHByb3AgbmFtZTogXCIke2tleX1cIiBpcyBhIHJlc2VydmVkIHByb3BlcnR5LmApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldFR5cGUoY3Rvcikge1xuICBpZiAoY3RvciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBcIm51bGxcIjtcbiAgfVxuICBpZiAodHlwZW9mIGN0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBjdG9yLm5hbWUgfHwgXCJcIjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY3RvciA9PT0gXCJvYmplY3RcIikge1xuICAgIGNvbnN0IG5hbWUgPSBjdG9yLmNvbnN0cnVjdG9yICYmIGN0b3IuY29uc3RydWN0b3IubmFtZTtcbiAgICByZXR1cm4gbmFtZSB8fCBcIlwiO1xuICB9XG4gIHJldHVybiBcIlwiO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhyYXdQcm9wcywgcHJvcHMsIGluc3RhbmNlKSB7XG4gIGNvbnN0IHJlc29sdmVkVmFsdWVzID0gdG9SYXcocHJvcHMpO1xuICBjb25zdCBvcHRpb25zID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdO1xuICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zKSB7XG4gICAgbGV0IG9wdCA9IG9wdGlvbnNba2V5XTtcbiAgICBpZiAob3B0ID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhbGlkYXRlUHJvcChcbiAgICAgIGtleSxcbiAgICAgIHJlc29sdmVkVmFsdWVzW2tleV0sXG4gICAgICBvcHQsXG4gICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gc2hhbGxvd1JlYWRvbmx5KHJlc29sdmVkVmFsdWVzKSA6IHJlc29sdmVkVmFsdWVzLFxuICAgICAgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiAhaGFzT3duKHJhd1Byb3BzLCBoeXBoZW5hdGUoa2V5KSlcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AobmFtZSwgdmFsdWUsIHByb3AsIHByb3BzLCBpc0Fic2VudCkge1xuICBjb25zdCB7IHR5cGUsIHJlcXVpcmVkLCB2YWxpZGF0b3IsIHNraXBDaGVjayB9ID0gcHJvcDtcbiAgaWYgKHJlcXVpcmVkICYmIGlzQWJzZW50KSB7XG4gICAgd2FybiQxKCdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXJlcXVpcmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlICE9IG51bGwgJiYgdHlwZSAhPT0gdHJ1ZSAmJiAhc2tpcENoZWNrKSB7XG4gICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcbiAgICBjb25zdCB0eXBlcyA9IGlzQXJyYXkodHlwZSkgPyB0eXBlIDogW3R5cGVdO1xuICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aCAmJiAhaXNWYWxpZDsgaSsrKSB7XG4gICAgICBjb25zdCB7IHZhbGlkLCBleHBlY3RlZFR5cGUgfSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVzW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChleHBlY3RlZFR5cGUgfHwgXCJcIik7XG4gICAgICBpc1ZhbGlkID0gdmFsaWQ7XG4gICAgfVxuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgd2FybiQxKGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAodmFsaWRhdG9yICYmICF2YWxpZGF0b3IodmFsdWUsIHByb3BzKSkge1xuICAgIHdhcm4kMSgnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicpO1xuICB9XG59XG5jb25zdCBpc1NpbXBsZVR5cGUgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgXCJTdHJpbmcsTnVtYmVyLEJvb2xlYW4sRnVuY3Rpb24sU3ltYm9sLEJpZ0ludFwiXG4pO1xuZnVuY3Rpb24gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZSkge1xuICBsZXQgdmFsaWQ7XG4gIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFwibnVsbFwiKSB7XG4gICAgdmFsaWQgPSB2YWx1ZSA9PT0gbnVsbDtcbiAgfSBlbHNlIGlmIChpc1NpbXBsZVR5cGUoZXhwZWN0ZWRUeXBlKSkge1xuICAgIGNvbnN0IHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IFwiT2JqZWN0XCIpIHtcbiAgICB2YWxpZCA9IGlzT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IFwiQXJyYXlcIikge1xuICAgIHZhbGlkID0gaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gYFByb3AgdHlwZSBbXSBmb3IgcHJvcCBcIiR7bmFtZX1cIiB3b24ndCBtYXRjaCBhbnl0aGluZy4gRGlkIHlvdSBtZWFuIHRvIHVzZSB0eXBlIEFycmF5IGluc3RlYWQ/YDtcbiAgfVxuICBsZXQgbWVzc2FnZSA9IGBJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJHtuYW1lfVwiLiBFeHBlY3RlZCAke2V4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oXCIgfCBcIil9YDtcbiAgY29uc3QgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcbiAgY29uc3QgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgY29uc3QgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIGNvbnN0IHJlY2VpdmVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpO1xuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiYgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiYgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IGAgd2l0aCB2YWx1ZSAke2V4cGVjdGVkVmFsdWV9YDtcbiAgfVxuICBtZXNzYWdlICs9IGAsIGdvdCAke3JlY2VpdmVkVHlwZX0gYDtcbiAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBgd2l0aCB2YWx1ZSAke3JlY2VpdmVkVmFsdWV9LmA7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2U7XG59XG5mdW5jdGlvbiBzdHlsZVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSBcIlN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGBcIiR7dmFsdWV9XCJgO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiTnVtYmVyXCIpIHtcbiAgICByZXR1cm4gYCR7TnVtYmVyKHZhbHVlKX1gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHt2YWx1ZX1gO1xuICB9XG59XG5mdW5jdGlvbiBpc0V4cGxpY2FibGUodHlwZSkge1xuICBjb25zdCBleHBsaWNpdFR5cGVzID0gW1wic3RyaW5nXCIsIFwibnVtYmVyXCIsIFwiYm9vbGVhblwiXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZSgoZWxlbSkgPT4gdHlwZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtKTtcbn1cbmZ1bmN0aW9uIGlzQm9vbGVhbiguLi5hcmdzKSB7XG4gIHJldHVybiBhcmdzLnNvbWUoKGVsZW0pID0+IGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gXCJib29sZWFuXCIpO1xufVxuXG5jb25zdCBpc0ludGVybmFsS2V5ID0gKGtleSkgPT4ga2V5WzBdID09PSBcIl9cIiB8fCBrZXkgPT09IFwiJHN0YWJsZVwiO1xuY29uc3Qgbm9ybWFsaXplU2xvdFZhbHVlID0gKHZhbHVlKSA9PiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWTm9kZSkgOiBbbm9ybWFsaXplVk5vZGUodmFsdWUpXTtcbmNvbnN0IG5vcm1hbGl6ZVNsb3QgPSAoa2V5LCByYXdTbG90LCBjdHgpID0+IHtcbiAgaWYgKHJhd1Nsb3QuX24pIHtcbiAgICByZXR1cm4gcmF3U2xvdDtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkID0gd2l0aEN0eCgoLi4uYXJncykgPT4ge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGN1cnJlbnRJbnN0YW5jZSAmJiAoIWN0eCB8fCBjdHgucm9vdCA9PT0gY3VycmVudEluc3RhbmNlLnJvb3QpKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGBTbG90IFwiJHtrZXl9XCIgaW52b2tlZCBvdXRzaWRlIG9mIHRoZSByZW5kZXIgZnVuY3Rpb246IHRoaXMgd2lsbCBub3QgdHJhY2sgZGVwZW5kZW5jaWVzIHVzZWQgaW4gdGhlIHNsb3QuIEludm9rZSB0aGUgc2xvdCBmdW5jdGlvbiBpbnNpZGUgdGhlIHJlbmRlciBmdW5jdGlvbiBpbnN0ZWFkLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVTbG90VmFsdWUocmF3U2xvdCguLi5hcmdzKSk7XG4gIH0sIGN0eCk7XG4gIG5vcm1hbGl6ZWQuX2MgPSBmYWxzZTtcbiAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59O1xuY29uc3Qgbm9ybWFsaXplT2JqZWN0U2xvdHMgPSAocmF3U2xvdHMsIHNsb3RzLCBpbnN0YW5jZSkgPT4ge1xuICBjb25zdCBjdHggPSByYXdTbG90cy5fY3R4O1xuICBmb3IgKGNvbnN0IGtleSBpbiByYXdTbG90cykge1xuICAgIGlmIChpc0ludGVybmFsS2V5KGtleSkpIGNvbnRpbnVlO1xuICAgIGNvbnN0IHZhbHVlID0gcmF3U2xvdHNba2V5XTtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHNsb3RzW2tleV0gPSBub3JtYWxpemVTbG90KGtleSwgdmFsdWUsIGN0eCk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB0cnVlKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBzbG90IFwiJHtrZXl9XCIuIFByZWZlciBmdW5jdGlvbiBzbG90cyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVTbG90VmFsdWUodmFsdWUpO1xuICAgICAgc2xvdHNba2V5XSA9ICgpID0+IG5vcm1hbGl6ZWQ7XG4gICAgfVxuICB9XG59O1xuY29uc3Qgbm9ybWFsaXplVk5vZGVTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4pID0+IHtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIWlzS2VlcEFsaXZlKGluc3RhbmNlLnZub2RlKSAmJiB0cnVlKSB7XG4gICAgd2FybiQxKFxuICAgICAgYE5vbi1mdW5jdGlvbiB2YWx1ZSBlbmNvdW50ZXJlZCBmb3IgZGVmYXVsdCBzbG90LiBQcmVmZXIgZnVuY3Rpb24gc2xvdHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5gXG4gICAgKTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKGNoaWxkcmVuKTtcbiAgaW5zdGFuY2Uuc2xvdHMuZGVmYXVsdCA9ICgpID0+IG5vcm1hbGl6ZWQ7XG59O1xuY29uc3QgYXNzaWduU2xvdHMgPSAoc2xvdHMsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpID0+IHtcbiAgZm9yIChjb25zdCBrZXkgaW4gY2hpbGRyZW4pIHtcbiAgICBpZiAob3B0aW1pemVkIHx8IGtleSAhPT0gXCJfXCIpIHtcbiAgICAgIHNsb3RzW2tleV0gPSBjaGlsZHJlbltrZXldO1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IGluaXRTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4sIG9wdGltaXplZCkgPT4ge1xuICBjb25zdCBzbG90cyA9IGluc3RhbmNlLnNsb3RzID0gY3JlYXRlSW50ZXJuYWxPYmplY3QoKTtcbiAgaWYgKGluc3RhbmNlLnZub2RlLnNoYXBlRmxhZyAmIDMyKSB7XG4gICAgY29uc3QgdHlwZSA9IGNoaWxkcmVuLl87XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIGFzc2lnblNsb3RzKHNsb3RzLCBjaGlsZHJlbiwgb3B0aW1pemVkKTtcbiAgICAgIGlmIChvcHRpbWl6ZWQpIHtcbiAgICAgICAgZGVmKHNsb3RzLCBcIl9cIiwgdHlwZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vcm1hbGl6ZU9iamVjdFNsb3RzKGNoaWxkcmVuLCBzbG90cyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNoaWxkcmVuKSB7XG4gICAgbm9ybWFsaXplVk5vZGVTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xuICB9XG59O1xuY29uc3QgdXBkYXRlU2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpID0+IHtcbiAgY29uc3QgeyB2bm9kZSwgc2xvdHMgfSA9IGluc3RhbmNlO1xuICBsZXQgbmVlZERlbGV0aW9uQ2hlY2sgPSB0cnVlO1xuICBsZXQgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0gRU1QVFlfT0JKO1xuICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMzIpIHtcbiAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcbiAgICBpZiAodHlwZSkge1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgaXNIbXJVcGRhdGluZykge1xuICAgICAgICBhc3NpZ25TbG90cyhzbG90cywgY2hpbGRyZW4sIG9wdGltaXplZCk7XG4gICAgICAgIHRyaWdnZXIoaW5zdGFuY2UsIFwic2V0XCIsIFwiJHNsb3RzXCIpO1xuICAgICAgfSBlbHNlIGlmIChvcHRpbWl6ZWQgJiYgdHlwZSA9PT0gMSkge1xuICAgICAgICBuZWVkRGVsZXRpb25DaGVjayA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXNzaWduU2xvdHMoc2xvdHMsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuZWVkRGVsZXRpb25DaGVjayA9ICFjaGlsZHJlbi4kc3RhYmxlO1xuICAgICAgbm9ybWFsaXplT2JqZWN0U2xvdHMoY2hpbGRyZW4sIHNsb3RzKTtcbiAgICB9XG4gICAgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0gY2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW4pIHtcbiAgICBub3JtYWxpemVWTm9kZVNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XG4gICAgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0geyBkZWZhdWx0OiAxIH07XG4gIH1cbiAgaWYgKG5lZWREZWxldGlvbkNoZWNrKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2xvdHMpIHtcbiAgICAgIGlmICghaXNJbnRlcm5hbEtleShrZXkpICYmIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldFtrZXldID09IG51bGwpIHtcbiAgICAgICAgZGVsZXRlIHNsb3RzW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5sZXQgc3VwcG9ydGVkO1xubGV0IHBlcmY7XG5mdW5jdGlvbiBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIHR5cGUpIHtcbiAgaWYgKGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnBlcmZvcm1hbmNlICYmIGlzU3VwcG9ydGVkKCkpIHtcbiAgICBwZXJmLm1hcmsoYHZ1ZS0ke3R5cGV9LSR7aW5zdGFuY2UudWlkfWApO1xuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgIGRldnRvb2xzUGVyZlN0YXJ0KGluc3RhbmNlLCB0eXBlLCBpc1N1cHBvcnRlZCgpID8gcGVyZi5ub3coKSA6IERhdGUubm93KCkpO1xuICB9XG59XG5mdW5jdGlvbiBlbmRNZWFzdXJlKGluc3RhbmNlLCB0eXBlKSB7XG4gIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5wZXJmb3JtYW5jZSAmJiBpc1N1cHBvcnRlZCgpKSB7XG4gICAgY29uc3Qgc3RhcnRUYWcgPSBgdnVlLSR7dHlwZX0tJHtpbnN0YW5jZS51aWR9YDtcbiAgICBjb25zdCBlbmRUYWcgPSBzdGFydFRhZyArIGA6ZW5kYDtcbiAgICBwZXJmLm1hcmsoZW5kVGFnKTtcbiAgICBwZXJmLm1lYXN1cmUoXG4gICAgICBgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgaW5zdGFuY2UudHlwZSl9PiAke3R5cGV9YCxcbiAgICAgIHN0YXJ0VGFnLFxuICAgICAgZW5kVGFnXG4gICAgKTtcbiAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgIGRldnRvb2xzUGVyZkVuZChpbnN0YW5jZSwgdHlwZSwgaXNTdXBwb3J0ZWQoKSA/IHBlcmYubm93KCkgOiBEYXRlLm5vdygpKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XG4gIGlmIChzdXBwb3J0ZWQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiBzdXBwb3J0ZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LnBlcmZvcm1hbmNlKSB7XG4gICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICBwZXJmID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICB9IGVsc2Uge1xuICAgIHN1cHBvcnRlZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiBzdXBwb3J0ZWQ7XG59XG5cbmZ1bmN0aW9uIGluaXRGZWF0dXJlRmxhZ3MoKSB7XG4gIGNvbnN0IG5lZWRXYXJuID0gW107XG4gIGlmICh0eXBlb2YgX19WVUVfT1BUSU9OU19BUElfXyAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIG5lZWRXYXJuLnB1c2goYF9fVlVFX09QVElPTlNfQVBJX19gKTtcbiAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfT1BUSU9OU19BUElfXyA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBfX1ZVRV9QUk9EX0RFVlRPT0xTX18gIT09IFwiYm9vbGVhblwiKSB7XG4gICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBuZWVkV2Fybi5wdXNoKGBfX1ZVRV9QUk9EX0RFVlRPT0xTX19gKTtcbiAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfUFJPRF9ERVZUT09MU19fID0gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBfX1ZVRV9QUk9EX0hZRFJBVElPTl9NSVNNQVRDSF9ERVRBSUxTX18gIT09IFwiYm9vbGVhblwiKSB7XG4gICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBuZWVkV2Fybi5wdXNoKGBfX1ZVRV9QUk9EX0hZRFJBVElPTl9NSVNNQVRDSF9ERVRBSUxTX19gKTtcbiAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfUFJPRF9IWURSQVRJT05fTUlTTUFUQ0hfREVUQUlMU19fID0gZmFsc2U7XG4gIH1cbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgbmVlZFdhcm4ubGVuZ3RoKSB7XG4gICAgY29uc3QgbXVsdGkgPSBuZWVkV2Fybi5sZW5ndGggPiAxO1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIGBGZWF0dXJlIGZsYWcke211bHRpID8gYHNgIDogYGB9ICR7bmVlZFdhcm4uam9pbihcIiwgXCIpfSAke211bHRpID8gYGFyZWAgOiBgaXNgfSBub3QgZXhwbGljaXRseSBkZWZpbmVkLiBZb3UgYXJlIHJ1bm5pbmcgdGhlIGVzbS1idW5kbGVyIGJ1aWxkIG9mIFZ1ZSwgd2hpY2ggZXhwZWN0cyB0aGVzZSBjb21waWxlLXRpbWUgZmVhdHVyZSBmbGFncyB0byBiZSBnbG9iYWxseSBpbmplY3RlZCB2aWEgdGhlIGJ1bmRsZXIgY29uZmlnIGluIG9yZGVyIHRvIGdldCBiZXR0ZXIgdHJlZS1zaGFraW5nIGluIHRoZSBwcm9kdWN0aW9uIGJ1bmRsZS5cblxuRm9yIG1vcmUgZGV0YWlscywgc2VlIGh0dHBzOi8vbGluay52dWVqcy5vcmcvZmVhdHVyZS1mbGFncy5gXG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QgPSBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSA7XG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJlcihvcHRpb25zKSB7XG4gIHJldHVybiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucyk7XG59XG5mdW5jdGlvbiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihvcHRpb25zKSB7XG4gIHJldHVybiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucywgY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zKTtcbn1cbmZ1bmN0aW9uIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zLCBjcmVhdGVIeWRyYXRpb25GbnMpIHtcbiAge1xuICAgIGluaXRGZWF0dXJlRmxhZ3MoKTtcbiAgfVxuICBjb25zdCB0YXJnZXQgPSBnZXRHbG9iYWxUaGlzKCk7XG4gIHRhcmdldC5fX1ZVRV9fID0gdHJ1ZTtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgc2V0RGV2dG9vbHNIb29rJDEodGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18sIHRhcmdldCk7XG4gIH1cbiAgY29uc3Qge1xuICAgIGluc2VydDogaG9zdEluc2VydCxcbiAgICByZW1vdmU6IGhvc3RSZW1vdmUsXG4gICAgcGF0Y2hQcm9wOiBob3N0UGF0Y2hQcm9wLFxuICAgIGNyZWF0ZUVsZW1lbnQ6IGhvc3RDcmVhdGVFbGVtZW50LFxuICAgIGNyZWF0ZVRleHQ6IGhvc3RDcmVhdGVUZXh0LFxuICAgIGNyZWF0ZUNvbW1lbnQ6IGhvc3RDcmVhdGVDb21tZW50LFxuICAgIHNldFRleHQ6IGhvc3RTZXRUZXh0LFxuICAgIHNldEVsZW1lbnRUZXh0OiBob3N0U2V0RWxlbWVudFRleHQsXG4gICAgcGFyZW50Tm9kZTogaG9zdFBhcmVudE5vZGUsXG4gICAgbmV4dFNpYmxpbmc6IGhvc3ROZXh0U2libGluZyxcbiAgICBzZXRTY29wZUlkOiBob3N0U2V0U2NvcGVJZCA9IE5PT1AsXG4gICAgaW5zZXJ0U3RhdGljQ29udGVudDogaG9zdEluc2VydFN0YXRpY0NvbnRlbnRcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHBhdGNoID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IgPSBudWxsLCBwYXJlbnRDb21wb25lbnQgPSBudWxsLCBwYXJlbnRTdXNwZW5zZSA9IG51bGwsIG5hbWVzcGFjZSA9IHZvaWQgMCwgc2xvdFNjb3BlSWRzID0gbnVsbCwgb3B0aW1pemVkID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBpc0htclVwZGF0aW5nID8gZmFsc2UgOiAhIW4yLmR5bmFtaWNDaGlsZHJlbikgPT4ge1xuICAgIGlmIChuMSA9PT0gbjIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG4xICYmICFpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xuICAgICAgYW5jaG9yID0gZ2V0TmV4dEhvc3ROb2RlKG4xKTtcbiAgICAgIHVubW91bnQobjEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgbjEgPSBudWxsO1xuICAgIH1cbiAgICBpZiAobjIucGF0Y2hGbGFnID09PSAtMikge1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICBuMi5keW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnIH0gPSBuMjtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgVGV4dDpcbiAgICAgICAgcHJvY2Vzc1RleHQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDb21tZW50OlxuICAgICAgICBwcm9jZXNzQ29tbWVudE5vZGUobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTdGF0aWM6XG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICAgICAgbW91bnRTdGF0aWNOb2RlKG4yLCBjb250YWluZXIsIGFuY2hvciwgbmFtZXNwYWNlKTtcbiAgICAgICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgcGF0Y2hTdGF0aWNOb2RlKG4xLCBuMiwgY29udGFpbmVyLCBuYW1lc3BhY2UpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBGcmFnbWVudDpcbiAgICAgICAgcHJvY2Vzc0ZyYWdtZW50KFxuICAgICAgICAgIG4xLFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEpIHtcbiAgICAgICAgICBwcm9jZXNzRWxlbWVudChcbiAgICAgICAgICAgIG4xLFxuICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVGbGFnICYgNikge1xuICAgICAgICAgIHByb2Nlc3NDb21wb25lbnQoXG4gICAgICAgICAgICBuMSxcbiAgICAgICAgICAgIG4yLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDY0KSB7XG4gICAgICAgICAgdHlwZS5wcm9jZXNzKFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICAgICAgaW50ZXJuYWxzXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgICAgICB0eXBlLnByb2Nlc3MoXG4gICAgICAgICAgICBuMSxcbiAgICAgICAgICAgIG4yLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWQsXG4gICAgICAgICAgICBpbnRlcm5hbHNcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICB3YXJuJDEoXCJJbnZhbGlkIFZOb2RlIHR5cGU6XCIsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlZiAhPSBudWxsICYmIHBhcmVudENvbXBvbmVudCkge1xuICAgICAgc2V0UmVmKHJlZiwgbjEgJiYgbjEucmVmLCBwYXJlbnRTdXNwZW5zZSwgbjIgfHwgbjEsICFuMik7XG4gICAgfVxuICB9O1xuICBjb25zdCBwcm9jZXNzVGV4dCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIGhvc3RJbnNlcnQoXG4gICAgICAgIG4yLmVsID0gaG9zdENyZWF0ZVRleHQobjIuY2hpbGRyZW4pLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvclxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZWwgPSBuMi5lbCA9IG4xLmVsO1xuICAgICAgaWYgKG4yLmNoaWxkcmVuICE9PSBuMS5jaGlsZHJlbikge1xuICAgICAgICBob3N0U2V0VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0NvbW1lbnROb2RlID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpID0+IHtcbiAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgaG9zdEluc2VydChcbiAgICAgICAgbjIuZWwgPSBob3N0Q3JlYXRlQ29tbWVudChuMi5jaGlsZHJlbiB8fCBcIlwiKSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3JcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudFN0YXRpY05vZGUgPSAobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBuYW1lc3BhY2UpID0+IHtcbiAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChcbiAgICAgIG4yLmNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgYW5jaG9yLFxuICAgICAgbmFtZXNwYWNlLFxuICAgICAgbjIuZWwsXG4gICAgICBuMi5hbmNob3JcbiAgICApO1xuICB9O1xuICBjb25zdCBwYXRjaFN0YXRpY05vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIG5hbWVzcGFjZSkgPT4ge1xuICAgIGlmIChuMi5jaGlsZHJlbiAhPT0gbjEuY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IGFuY2hvciA9IGhvc3ROZXh0U2libGluZyhuMS5hbmNob3IpO1xuICAgICAgcmVtb3ZlU3RhdGljTm9kZShuMSk7XG4gICAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChcbiAgICAgICAgbjIuY2hpbGRyZW4sXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBuYW1lc3BhY2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICBuMi5hbmNob3IgPSBuMS5hbmNob3I7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3ZlU3RhdGljTm9kZSA9ICh7IGVsLCBhbmNob3IgfSwgY29udGFpbmVyLCBuZXh0U2libGluZykgPT4ge1xuICAgIGxldCBuZXh0O1xuICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gYW5jaG9yKSB7XG4gICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGVsKTtcbiAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpO1xuICAgICAgZWwgPSBuZXh0O1xuICAgIH1cbiAgICBob3N0SW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBuZXh0U2libGluZyk7XG4gIH07XG4gIGNvbnN0IHJlbW92ZVN0YXRpY05vZGUgPSAoeyBlbCwgYW5jaG9yIH0pID0+IHtcbiAgICBsZXQgbmV4dDtcbiAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xuICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhlbCk7XG4gICAgICBob3N0UmVtb3ZlKGVsKTtcbiAgICAgIGVsID0gbmV4dDtcbiAgICB9XG4gICAgaG9zdFJlbW92ZShhbmNob3IpO1xuICB9O1xuICBjb25zdCBwcm9jZXNzRWxlbWVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgaWYgKG4yLnR5cGUgPT09IFwic3ZnXCIpIHtcbiAgICAgIG5hbWVzcGFjZSA9IFwic3ZnXCI7XG4gICAgfSBlbHNlIGlmIChuMi50eXBlID09PSBcIm1hdGhcIikge1xuICAgICAgbmFtZXNwYWNlID0gXCJtYXRobWxcIjtcbiAgICB9XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIG1vdW50RWxlbWVudChcbiAgICAgICAgbjIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRjaEVsZW1lbnQoXG4gICAgICAgIG4xLFxuICAgICAgICBuMixcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG1vdW50RWxlbWVudCA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBsZXQgZWw7XG4gICAgbGV0IHZub2RlSG9vaztcbiAgICBjb25zdCB7IHByb3BzLCBzaGFwZUZsYWcsIHRyYW5zaXRpb24sIGRpcnMgfSA9IHZub2RlO1xuICAgIGVsID0gdm5vZGUuZWwgPSBob3N0Q3JlYXRlRWxlbWVudChcbiAgICAgIHZub2RlLnR5cGUsXG4gICAgICBuYW1lc3BhY2UsXG4gICAgICBwcm9wcyAmJiBwcm9wcy5pcyxcbiAgICAgIHByb3BzXG4gICAgKTtcbiAgICBpZiAoc2hhcGVGbGFnICYgOCkge1xuICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCB2bm9kZS5jaGlsZHJlbik7XG4gICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgbW91bnRDaGlsZHJlbihcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4sXG4gICAgICAgIGVsLFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICByZXNvbHZlQ2hpbGRyZW5OYW1lc3BhY2Uodm5vZGUsIG5hbWVzcGFjZSksXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZGlycykge1xuICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImNyZWF0ZWRcIik7XG4gICAgfVxuICAgIHNldFNjb3BlSWQoZWwsIHZub2RlLCB2bm9kZS5zY29wZUlkLCBzbG90U2NvcGVJZHMsIHBhcmVudENvbXBvbmVudCk7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoa2V5ICE9PSBcInZhbHVlXCIgJiYgIWlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIG51bGwsIHByb3BzW2tleV0sIG5hbWVzcGFjZSwgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFwidmFsdWVcIiBpbiBwcm9wcykge1xuICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBcInZhbHVlXCIsIG51bGwsIHByb3BzLnZhbHVlLCBuYW1lc3BhY2UpO1xuICAgICAgfVxuICAgICAgaWYgKHZub2RlSG9vayA9IHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkge1xuICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICBkZWYoZWwsIFwiX192bm9kZVwiLCB2bm9kZSwgdHJ1ZSk7XG4gICAgICBkZWYoZWwsIFwiX192dWVQYXJlbnRDb21wb25lbnRcIiwgcGFyZW50Q29tcG9uZW50LCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGRpcnMpIHtcbiAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgXCJiZWZvcmVNb3VudFwiKTtcbiAgICB9XG4gICAgY29uc3QgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSBuZWVkVHJhbnNpdGlvbihwYXJlbnRTdXNwZW5zZSwgdHJhbnNpdGlvbik7XG4gICAgaWYgKG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzKSB7XG4gICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcbiAgICB9XG4gICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8IG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzIHx8IGRpcnMpIHtcbiAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgJiYgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcIm1vdW50ZWRcIik7XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRTY29wZUlkID0gKGVsLCB2bm9kZSwgc2NvcGVJZCwgc2xvdFNjb3BlSWRzLCBwYXJlbnRDb21wb25lbnQpID0+IHtcbiAgICBpZiAoc2NvcGVJZCkge1xuICAgICAgaG9zdFNldFNjb3BlSWQoZWwsIHNjb3BlSWQpO1xuICAgIH1cbiAgICBpZiAoc2xvdFNjb3BlSWRzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsb3RTY29wZUlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBob3N0U2V0U2NvcGVJZChlbCwgc2xvdFNjb3BlSWRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmVudENvbXBvbmVudCkge1xuICAgICAgbGV0IHN1YlRyZWUgPSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZTtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHN1YlRyZWUucGF0Y2hGbGFnID4gMCAmJiBzdWJUcmVlLnBhdGNoRmxhZyAmIDIwNDgpIHtcbiAgICAgICAgc3ViVHJlZSA9IGZpbHRlclNpbmdsZVJvb3Qoc3ViVHJlZS5jaGlsZHJlbikgfHwgc3ViVHJlZTtcbiAgICAgIH1cbiAgICAgIGlmICh2bm9kZSA9PT0gc3ViVHJlZSB8fCBpc1N1c3BlbnNlKHN1YlRyZWUudHlwZSkgJiYgKHN1YlRyZWUuc3NDb250ZW50ID09PSB2bm9kZSB8fCBzdWJUcmVlLnNzRmFsbGJhY2sgPT09IHZub2RlKSkge1xuICAgICAgICBjb25zdCBwYXJlbnRWTm9kZSA9IHBhcmVudENvbXBvbmVudC52bm9kZTtcbiAgICAgICAgc2V0U2NvcGVJZChcbiAgICAgICAgICBlbCxcbiAgICAgICAgICBwYXJlbnRWTm9kZSxcbiAgICAgICAgICBwYXJlbnRWTm9kZS5zY29wZUlkLFxuICAgICAgICAgIHBhcmVudFZOb2RlLnNsb3RTY29wZUlkcyxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQucGFyZW50XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudENoaWxkcmVuID0gKGNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgc3RhcnQgPSAwKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV0gPSBvcHRpbWl6ZWQgPyBjbG9uZUlmTW91bnRlZChjaGlsZHJlbltpXSkgOiBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSk7XG4gICAgICBwYXRjaChcbiAgICAgICAgbnVsbCxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcGF0Y2hFbGVtZW50ID0gKG4xLCBuMiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIGNvbnN0IGVsID0gbjIuZWwgPSBuMS5lbDtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgIGVsLl9fdm5vZGUgPSBuMjtcbiAgICB9XG4gICAgbGV0IHsgcGF0Y2hGbGFnLCBkeW5hbWljQ2hpbGRyZW4sIGRpcnMgfSA9IG4yO1xuICAgIHBhdGNoRmxhZyB8PSBuMS5wYXRjaEZsYWcgJiAxNjtcbiAgICBjb25zdCBvbGRQcm9wcyA9IG4xLnByb3BzIHx8IEVNUFRZX09CSjtcbiAgICBjb25zdCBuZXdQcm9wcyA9IG4yLnByb3BzIHx8IEVNUFRZX09CSjtcbiAgICBsZXQgdm5vZGVIb29rO1xuICAgIHBhcmVudENvbXBvbmVudCAmJiB0b2dnbGVSZWN1cnNlKHBhcmVudENvbXBvbmVudCwgZmFsc2UpO1xuICAgIGlmICh2bm9kZUhvb2sgPSBuZXdQcm9wcy5vblZub2RlQmVmb3JlVXBkYXRlKSB7XG4gICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIG4yLCBuMSk7XG4gICAgfVxuICAgIGlmIChkaXJzKSB7XG4gICAgICBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCBcImJlZm9yZVVwZGF0ZVwiKTtcbiAgICB9XG4gICAgcGFyZW50Q29tcG9uZW50ICYmIHRvZ2dsZVJlY3Vyc2UocGFyZW50Q29tcG9uZW50LCB0cnVlKTtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICBwYXRjaEZsYWcgPSAwO1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBpZiAob2xkUHJvcHMuaW5uZXJIVE1MICYmIG5ld1Byb3BzLmlubmVySFRNTCA9PSBudWxsIHx8IG9sZFByb3BzLnRleHRDb250ZW50ICYmIG5ld1Byb3BzLnRleHRDb250ZW50ID09IG51bGwpIHtcbiAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChlbCwgXCJcIik7XG4gICAgfVxuICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihcbiAgICAgICAgbjEuZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICBkeW5hbWljQ2hpbGRyZW4sXG4gICAgICAgIGVsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICByZXNvbHZlQ2hpbGRyZW5OYW1lc3BhY2UobjIsIG5hbWVzcGFjZSksXG4gICAgICAgIHNsb3RTY29wZUlkc1xuICAgICAgKTtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFvcHRpbWl6ZWQpIHtcbiAgICAgIHBhdGNoQ2hpbGRyZW4oXG4gICAgICAgIG4xLFxuICAgICAgICBuMixcbiAgICAgICAgZWwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIHJlc29sdmVDaGlsZHJlbk5hbWVzcGFjZShuMiwgbmFtZXNwYWNlKSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcbiAgICAgIGlmIChwYXRjaEZsYWcgJiAxNikge1xuICAgICAgICBwYXRjaFByb3BzKGVsLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgbmFtZXNwYWNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiAyKSB7XG4gICAgICAgICAgaWYgKG9sZFByb3BzLmNsYXNzICE9PSBuZXdQcm9wcy5jbGFzcykge1xuICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgXCJjbGFzc1wiLCBudWxsLCBuZXdQcm9wcy5jbGFzcywgbmFtZXNwYWNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDQpIHtcbiAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBcInN0eWxlXCIsIG9sZFByb3BzLnN0eWxlLCBuZXdQcm9wcy5zdHlsZSwgbmFtZXNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0Y2hGbGFnICYgOCkge1xuICAgICAgICAgIGNvbnN0IHByb3BzVG9VcGRhdGUgPSBuMi5keW5hbWljUHJvcHM7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IG9sZFByb3BzW2tleV07XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV3UHJvcHNba2V5XTtcbiAgICAgICAgICAgIGlmIChuZXh0ICE9PSBwcmV2IHx8IGtleSA9PT0gXCJ2YWx1ZVwiKSB7XG4gICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgcHJldiwgbmV4dCwgbmFtZXNwYWNlLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhdGNoRmxhZyAmIDEpIHtcbiAgICAgICAgaWYgKG4xLmNoaWxkcmVuICE9PSBuMi5jaGlsZHJlbikge1xuICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghb3B0aW1pemVkICYmIGR5bmFtaWNDaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICBwYXRjaFByb3BzKGVsLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgbmFtZXNwYWNlKTtcbiAgICB9XG4gICAgaWYgKCh2bm9kZUhvb2sgPSBuZXdQcm9wcy5vblZub2RlVXBkYXRlZCkgfHwgZGlycykge1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgbjIsIG4xKTtcbiAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCBcInVwZGF0ZWRcIik7XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwYXRjaEJsb2NrQ2hpbGRyZW4gPSAob2xkQ2hpbGRyZW4sIG5ld0NoaWxkcmVuLCBmYWxsYmFja0NvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2ldO1xuICAgICAgY29uc3QgbmV3Vk5vZGUgPSBuZXdDaGlsZHJlbltpXTtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IChcbiAgICAgICAgLy8gb2xkVk5vZGUgbWF5IGJlIGFuIGVycm9yZWQgYXN5bmMgc2V0dXAoKSBjb21wb25lbnQgaW5zaWRlIFN1c3BlbnNlXG4gICAgICAgIC8vIHdoaWNoIHdpbGwgbm90IGhhdmUgYSBtb3VudGVkIGVsZW1lbnRcbiAgICAgICAgb2xkVk5vZGUuZWwgJiYgLy8gLSBJbiB0aGUgY2FzZSBvZiBhIEZyYWdtZW50LCB3ZSBuZWVkIHRvIHByb3ZpZGUgdGhlIGFjdHVhbCBwYXJlbnRcbiAgICAgICAgLy8gb2YgdGhlIEZyYWdtZW50IGl0c2VsZiBzbyBpdCBjYW4gbW92ZSBpdHMgY2hpbGRyZW4uXG4gICAgICAgIChvbGRWTm9kZS50eXBlID09PSBGcmFnbWVudCB8fCAvLyAtIEluIHRoZSBjYXNlIG9mIGRpZmZlcmVudCBub2RlcywgdGhlcmUgaXMgZ29pbmcgdG8gYmUgYSByZXBsYWNlbWVudFxuICAgICAgICAvLyB3aGljaCBhbHNvIHJlcXVpcmVzIHRoZSBjb3JyZWN0IHBhcmVudCBjb250YWluZXJcbiAgICAgICAgIWlzU2FtZVZOb2RlVHlwZShvbGRWTm9kZSwgbmV3Vk5vZGUpIHx8IC8vIC0gSW4gdGhlIGNhc2Ugb2YgYSBjb21wb25lbnQsIGl0IGNvdWxkIGNvbnRhaW4gYW55dGhpbmcuXG4gICAgICAgIG9sZFZOb2RlLnNoYXBlRmxhZyAmICg2IHwgNjQpKSA/IGhvc3RQYXJlbnROb2RlKG9sZFZOb2RlLmVsKSA6IChcbiAgICAgICAgICAvLyBJbiBvdGhlciBjYXNlcywgdGhlIHBhcmVudCBjb250YWluZXIgaXMgbm90IGFjdHVhbGx5IHVzZWQgc28gd2VcbiAgICAgICAgICAvLyBqdXN0IHBhc3MgdGhlIGJsb2NrIGVsZW1lbnQgaGVyZSB0byBhdm9pZCBhIERPTSBwYXJlbnROb2RlIGNhbGwuXG4gICAgICAgICAgZmFsbGJhY2tDb250YWluZXJcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIHBhdGNoKFxuICAgICAgICBvbGRWTm9kZSxcbiAgICAgICAgbmV3Vk5vZGUsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwYXRjaFByb3BzID0gKGVsLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgbmFtZXNwYWNlKSA9PiB7XG4gICAgaWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcykge1xuICAgICAgaWYgKG9sZFByb3BzICE9PSBFTVBUWV9PQkopIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcm9wKGtleSkgJiYgIShrZXkgaW4gbmV3UHJvcHMpKSB7XG4gICAgICAgICAgICBob3N0UGF0Y2hQcm9wKFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICBvbGRQcm9wc1trZXldLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1Byb3BzKSB7XG4gICAgICAgIGlmIChpc1Jlc2VydmVkUHJvcChrZXkpKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XG4gICAgICAgIGNvbnN0IHByZXYgPSBvbGRQcm9wc1trZXldO1xuICAgICAgICBpZiAobmV4dCAhPT0gcHJldiAmJiBrZXkgIT09IFwidmFsdWVcIikge1xuICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgcHJldiwgbmV4dCwgbmFtZXNwYWNlLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIG5ld1Byb3BzKSB7XG4gICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIFwidmFsdWVcIiwgb2xkUHJvcHMudmFsdWUsIG5ld1Byb3BzLnZhbHVlLCBuYW1lc3BhY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0ZyYWdtZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCBmcmFnbWVudFN0YXJ0QW5jaG9yID0gbjIuZWwgPSBuMSA/IG4xLmVsIDogaG9zdENyZWF0ZVRleHQoXCJcIik7XG4gICAgY29uc3QgZnJhZ21lbnRFbmRBbmNob3IgPSBuMi5hbmNob3IgPSBuMSA/IG4xLmFuY2hvciA6IGhvc3RDcmVhdGVUZXh0KFwiXCIpO1xuICAgIGxldCB7IHBhdGNoRmxhZywgZHluYW1pY0NoaWxkcmVuLCBzbG90U2NvcGVJZHM6IGZyYWdtZW50U2xvdFNjb3BlSWRzIH0gPSBuMjtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAvLyAjNTUyMyBkZXYgcm9vdCBmcmFnbWVudCBtYXkgaW5oZXJpdCBkaXJlY3RpdmVzXG4gICAgKGlzSG1yVXBkYXRpbmcgfHwgcGF0Y2hGbGFnICYgMjA0OCkpIHtcbiAgICAgIHBhdGNoRmxhZyA9IDA7XG4gICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgfVxuICAgIGlmIChmcmFnbWVudFNsb3RTY29wZUlkcykge1xuICAgICAgc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzID8gc2xvdFNjb3BlSWRzLmNvbmNhdChmcmFnbWVudFNsb3RTY29wZUlkcykgOiBmcmFnbWVudFNsb3RTY29wZUlkcztcbiAgICB9XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRTdGFydEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgaG9zdEluc2VydChmcmFnbWVudEVuZEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgbW91bnRDaGlsZHJlbihcbiAgICAgICAgLy8gIzEwMDA3XG4gICAgICAgIC8vIHN1Y2ggZnJhZ21lbnQgbGlrZSBgPD48Lz5gIHdpbGwgYmUgY29tcGlsZWQgaW50b1xuICAgICAgICAvLyBhIGZyYWdtZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSBhIGNoaWxkcmVuLlxuICAgICAgICAvLyBJbiB0aGlzIGNhc2UgZmFsbGJhY2sgdG8gYW4gZW1wdHkgYXJyYXlcbiAgICAgICAgbjIuY2hpbGRyZW4gfHwgW10sXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgZnJhZ21lbnRFbmRBbmNob3IsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXRjaEZsYWcgPiAwICYmIHBhdGNoRmxhZyAmIDY0ICYmIGR5bmFtaWNDaGlsZHJlbiAmJiAvLyAjMjcxNSB0aGUgcHJldmlvdXMgZnJhZ21lbnQgY291bGQndmUgYmVlbiBhIEJBSUxlZCBvbmUgYXMgYSByZXN1bHRcbiAgICAgIC8vIG9mIHJlbmRlclNsb3QoKSB3aXRoIG5vIHZhbGlkIGNoaWxkcmVuXG4gICAgICBuMS5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKFxuICAgICAgICAgIG4xLmR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4sXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzXG4gICAgICAgICk7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIC8vICMyMDgwIGlmIHRoZSBzdGFibGUgZnJhZ21lbnQgaGFzIGEga2V5LCBpdCdzIGEgPHRlbXBsYXRlIHYtZm9yPiB0aGF0IG1heVxuICAgICAgICAgIC8vICBnZXQgbW92ZWQgYXJvdW5kLiBNYWtlIHN1cmUgYWxsIHJvb3QgbGV2ZWwgdm5vZGVzIGluaGVyaXQgZWwuXG4gICAgICAgICAgLy8gIzIxMzQgb3IgaWYgaXQncyBhIGNvbXBvbmVudCByb290LCBpdCBtYXkgYWxzbyBnZXQgbW92ZWQgYXJvdW5kXG4gICAgICAgICAgLy8gYXMgdGhlIGNvbXBvbmVudCBpcyBiZWluZyBtb3ZlZC5cbiAgICAgICAgICBuMi5rZXkgIT0gbnVsbCB8fCBwYXJlbnRDb21wb25lbnQgJiYgbjIgPT09IHBhcmVudENvbXBvbmVudC5zdWJUcmVlXG4gICAgICAgICkge1xuICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4oXG4gICAgICAgICAgICBuMSxcbiAgICAgICAgICAgIG4yLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgLyogc2hhbGxvdyAqL1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdGNoQ2hpbGRyZW4oXG4gICAgICAgICAgbjEsXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGZyYWdtZW50RW5kQW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0NvbXBvbmVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgbjIuc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzO1xuICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICBpZiAobjIuc2hhcGVGbGFnICYgNTEyKSB7XG4gICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguYWN0aXZhdGUoXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb3VudENvbXBvbmVudChcbiAgICAgICAgICBuMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudENvbXBvbmVudCA9IChpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIG9wdGltaXplZCkgPT4ge1xuICAgIGNvbnN0IGluc3RhbmNlID0gKGluaXRpYWxWTm9kZS5jb21wb25lbnQgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZShcbiAgICAgIGluaXRpYWxWTm9kZSxcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIHBhcmVudFN1c3BlbnNlXG4gICAgKSk7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgaW5zdGFuY2UudHlwZS5fX2htcklkKSB7XG4gICAgICByZWdpc3RlckhNUihpbnN0YW5jZSk7XG4gICAgfVxuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICBwdXNoV2FybmluZ0NvbnRleHQoaW5pdGlhbFZOb2RlKTtcbiAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XG4gICAgfVxuICAgIGlmIChpc0tlZXBBbGl2ZShpbml0aWFsVk5vZGUpKSB7XG4gICAgICBpbnN0YW5jZS5jdHgucmVuZGVyZXIgPSBpbnRlcm5hbHM7XG4gICAgfVxuICAgIHtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGluaXRgKTtcbiAgICAgIH1cbiAgICAgIHNldHVwQ29tcG9uZW50KGluc3RhbmNlLCBmYWxzZSwgb3B0aW1pemVkKTtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBpbml0YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbnN0YW5jZS5hc3luY0RlcCkge1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgaXNIbXJVcGRhdGluZykgaW5pdGlhbFZOb2RlLmVsID0gbnVsbDtcbiAgICAgIHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCwgb3B0aW1pemVkKTtcbiAgICAgIGlmICghaW5pdGlhbFZOb2RlLmVsKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gaW5zdGFuY2Uuc3ViVHJlZSA9IGNyZWF0ZVZOb2RlKENvbW1lbnQpO1xuICAgICAgICBwcm9jZXNzQ29tbWVudE5vZGUobnVsbCwgcGxhY2Vob2xkZXIsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICBpbml0aWFsVk5vZGUsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XG4gICAgfVxuICB9O1xuICBjb25zdCB1cGRhdGVDb21wb25lbnQgPSAobjEsIG4yLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IG4yLmNvbXBvbmVudCA9IG4xLmNvbXBvbmVudDtcbiAgICBpZiAoc2hvdWxkVXBkYXRlQ29tcG9uZW50KG4xLCBuMiwgb3B0aW1pemVkKSkge1xuICAgICAgaWYgKGluc3RhbmNlLmFzeW5jRGVwICYmICFpbnN0YW5jZS5hc3luY1Jlc29sdmVkKSB7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG4yKTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG4yLCBvcHRpbWl6ZWQpO1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zdGFuY2UubmV4dCA9IG4yO1xuICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbjIuZWwgPSBuMS5lbDtcbiAgICAgIGluc3RhbmNlLnZub2RlID0gbjI7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXR1cFJlbmRlckVmZmVjdCA9IChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50VXBkYXRlRm4gPSAoKSA9PiB7XG4gICAgICBpZiAoIWluc3RhbmNlLmlzTW91bnRlZCkge1xuICAgICAgICBsZXQgdm5vZGVIb29rO1xuICAgICAgICBjb25zdCB7IGVsLCBwcm9wcyB9ID0gaW5pdGlhbFZOb2RlO1xuICAgICAgICBjb25zdCB7IGJtLCBtLCBwYXJlbnQsIHJvb3QsIHR5cGUgfSA9IGluc3RhbmNlO1xuICAgICAgICBjb25zdCBpc0FzeW5jV3JhcHBlclZOb2RlID0gaXNBc3luY1dyYXBwZXIoaW5pdGlhbFZOb2RlKTtcbiAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgZmFsc2UpO1xuICAgICAgICBpZiAoYm0pIHtcbiAgICAgICAgICBpbnZva2VBcnJheUZucyhibSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FzeW5jV3JhcHBlclZOb2RlICYmICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpKSB7XG4gICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBpbml0aWFsVk5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIHRydWUpO1xuICAgICAgICBpZiAoZWwgJiYgaHlkcmF0ZU5vZGUpIHtcbiAgICAgICAgICBjb25zdCBoeWRyYXRlU3ViVHJlZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5zdGFuY2Uuc3ViVHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xuICAgICAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgaHlkcmF0ZWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHlkcmF0ZU5vZGUoXG4gICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICBpbnN0YW5jZS5zdWJUcmVlLFxuICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaHlkcmF0ZWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKGlzQXN5bmNXcmFwcGVyVk5vZGUgJiYgdHlwZS5fX2FzeW5jSHlkcmF0ZSkge1xuICAgICAgICAgICAgdHlwZS5fX2FzeW5jSHlkcmF0ZShcbiAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgICBoeWRyYXRlU3ViVHJlZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaHlkcmF0ZVN1YlRyZWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHJvb3QuY2UpIHtcbiAgICAgICAgICAgIHJvb3QuY2UuX2luamVjdENoaWxkU3R5bGUodHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc3ViVHJlZSA9IGluc3RhbmNlLnN1YlRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKTtcbiAgICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgc3ViVHJlZSxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2VcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5pdGlhbFZOb2RlLmVsID0gc3ViVHJlZS5lbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobSkge1xuICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChtLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FzeW5jV3JhcHBlclZOb2RlICYmICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkpIHtcbiAgICAgICAgICBjb25zdCBzY29wZWRJbml0aWFsVk5vZGUgPSBpbml0aWFsVk5vZGU7XG4gICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KFxuICAgICAgICAgICAgKCkgPT4gaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBzY29wZWRJbml0aWFsVk5vZGUpLFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2VcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbml0aWFsVk5vZGUuc2hhcGVGbGFnICYgMjU2IHx8IHBhcmVudCAmJiBpc0FzeW5jV3JhcHBlcihwYXJlbnQudm5vZGUpICYmIHBhcmVudC52bm9kZS5zaGFwZUZsYWcgJiAyNTYpIHtcbiAgICAgICAgICBpbnN0YW5jZS5hICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChpbnN0YW5jZS5hLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UuaXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5pdGlhbFZOb2RlID0gY29udGFpbmVyID0gYW5jaG9yID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCB7IG5leHQsIGJ1LCB1LCBwYXJlbnQsIHZub2RlIH0gPSBpbnN0YW5jZTtcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IG5vbkh5ZHJhdGVkQXN5bmNSb290ID0gbG9jYXRlTm9uSHlkcmF0ZWRBc3luY1Jvb3QoaW5zdGFuY2UpO1xuICAgICAgICAgIGlmIChub25IeWRyYXRlZEFzeW5jUm9vdCkge1xuICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgbmV4dC5lbCA9IHZub2RlLmVsO1xuICAgICAgICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG5leHQsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub25IeWRyYXRlZEFzeW5jUm9vdC5hc3luY0RlcC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFpbnN0YW5jZS5pc1VubW91bnRlZCkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudFVwZGF0ZUZuKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgb3JpZ2luTmV4dCA9IG5leHQ7XG4gICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG5leHQgfHwgaW5zdGFuY2Uudm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIGZhbHNlKTtcbiAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICBuZXh0LmVsID0gdm5vZGUuZWw7XG4gICAgICAgICAgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyKGluc3RhbmNlLCBuZXh0LCBvcHRpbWl6ZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQgPSB2bm9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnUpIHtcbiAgICAgICAgICBpbnZva2VBcnJheUZucyhidSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlQmVmb3JlVXBkYXRlKSB7XG4gICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBuZXh0LCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dFRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKTtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldlRyZWUgPSBpbnN0YW5jZS5zdWJUcmVlO1xuICAgICAgICBpbnN0YW5jZS5zdWJUcmVlID0gbmV4dFRyZWU7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgfVxuICAgICAgICBwYXRjaChcbiAgICAgICAgICBwcmV2VHJlZSxcbiAgICAgICAgICBuZXh0VHJlZSxcbiAgICAgICAgICAvLyBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBpZiBpdCdzIGluIGEgdGVsZXBvcnRcbiAgICAgICAgICBob3N0UGFyZW50Tm9kZShwcmV2VHJlZS5lbCksXG4gICAgICAgICAgLy8gYW5jaG9yIG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIGZyYWdtZW50XG4gICAgICAgICAgZ2V0TmV4dEhvc3ROb2RlKHByZXZUcmVlKSxcbiAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2VcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0LmVsID0gbmV4dFRyZWUuZWw7XG4gICAgICAgIGlmIChvcmlnaW5OZXh0ID09PSBudWxsKSB7XG4gICAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCBuZXh0VHJlZS5lbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QodSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2bm9kZUhvb2sgPSBuZXh0LnByb3BzICYmIG5leHQucHJvcHMub25Wbm9kZVVwZGF0ZWQpIHtcbiAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoXG4gICAgICAgICAgICAoKSA9PiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIG5leHQsIHZub2RlKSxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgaW5zdGFuY2Uuc2NvcGUub24oKTtcbiAgICBjb25zdCBlZmZlY3QgPSBpbnN0YW5jZS5lZmZlY3QgPSBuZXcgUmVhY3RpdmVFZmZlY3QoY29tcG9uZW50VXBkYXRlRm4pO1xuICAgIGluc3RhbmNlLnNjb3BlLm9mZigpO1xuICAgIGNvbnN0IHVwZGF0ZSA9IGluc3RhbmNlLnVwZGF0ZSA9IGVmZmVjdC5ydW4uYmluZChlZmZlY3QpO1xuICAgIGNvbnN0IGpvYiA9IGluc3RhbmNlLmpvYiA9IGVmZmVjdC5ydW5JZkRpcnR5LmJpbmQoZWZmZWN0KTtcbiAgICBqb2IuaSA9IGluc3RhbmNlO1xuICAgIGpvYi5pZCA9IGluc3RhbmNlLnVpZDtcbiAgICBlZmZlY3Quc2NoZWR1bGVyID0gKCkgPT4gcXVldWVKb2Ioam9iKTtcbiAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCB0cnVlKTtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgZWZmZWN0Lm9uVHJhY2sgPSBpbnN0YW5jZS5ydGMgPyAoZSkgPT4gaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UucnRjLCBlKSA6IHZvaWQgMDtcbiAgICAgIGVmZmVjdC5vblRyaWdnZXIgPSBpbnN0YW5jZS5ydGcgPyAoZSkgPT4gaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UucnRnLCBlKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgdXBkYXRlKCk7XG4gIH07XG4gIGNvbnN0IHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlciA9IChpbnN0YW5jZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBuZXh0Vk5vZGUuY29tcG9uZW50ID0gaW5zdGFuY2U7XG4gICAgY29uc3QgcHJldlByb3BzID0gaW5zdGFuY2Uudm5vZGUucHJvcHM7XG4gICAgaW5zdGFuY2Uudm5vZGUgPSBuZXh0Vk5vZGU7XG4gICAgaW5zdGFuY2UubmV4dCA9IG51bGw7XG4gICAgdXBkYXRlUHJvcHMoaW5zdGFuY2UsIG5leHRWTm9kZS5wcm9wcywgcHJldlByb3BzLCBvcHRpbWl6ZWQpO1xuICAgIHVwZGF0ZVNsb3RzKGluc3RhbmNlLCBuZXh0Vk5vZGUuY2hpbGRyZW4sIG9wdGltaXplZCk7XG4gICAgcGF1c2VUcmFja2luZygpO1xuICAgIGZsdXNoUHJlRmx1c2hDYnMoaW5zdGFuY2UpO1xuICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgfTtcbiAgY29uc3QgcGF0Y2hDaGlsZHJlbiA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCBjMSA9IG4xICYmIG4xLmNoaWxkcmVuO1xuICAgIGNvbnN0IHByZXZTaGFwZUZsYWcgPSBuMSA/IG4xLnNoYXBlRmxhZyA6IDA7XG4gICAgY29uc3QgYzIgPSBuMi5jaGlsZHJlbjtcbiAgICBjb25zdCB7IHBhdGNoRmxhZywgc2hhcGVGbGFnIH0gPSBuMjtcbiAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xuICAgICAgaWYgKHBhdGNoRmxhZyAmIDEyOCkge1xuICAgICAgICBwYXRjaEtleWVkQ2hpbGRyZW4oXG4gICAgICAgICAgYzEsXG4gICAgICAgICAgYzIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChwYXRjaEZsYWcgJiAyNTYpIHtcbiAgICAgICAgcGF0Y2hVbmtleWVkQ2hpbGRyZW4oXG4gICAgICAgICAgYzEsXG4gICAgICAgICAgYzIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgOCkge1xuICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNikge1xuICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgfVxuICAgICAgaWYgKGMyICE9PSBjMSkge1xuICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCBjMik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgMTYpIHtcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICAgICAgcGF0Y2hLZXllZENoaWxkcmVuKFxuICAgICAgICAgICAgYzEsXG4gICAgICAgICAgICBjMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDgpIHtcbiAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgICAgICBtb3VudENoaWxkcmVuKFxuICAgICAgICAgICAgYzIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHBhdGNoVW5rZXllZENoaWxkcmVuID0gKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjMSA9IGMxIHx8IEVNUFRZX0FSUjtcbiAgICBjMiA9IGMyIHx8IEVNUFRZX0FSUjtcbiAgICBjb25zdCBvbGRMZW5ndGggPSBjMS5sZW5ndGg7XG4gICAgY29uc3QgbmV3TGVuZ3RoID0gYzIubGVuZ3RoO1xuICAgIGNvbnN0IGNvbW1vbkxlbmd0aCA9IE1hdGgubWluKG9sZExlbmd0aCwgbmV3TGVuZ3RoKTtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgY29tbW9uTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG5leHRDaGlsZCA9IGMyW2ldID0gb3B0aW1pemVkID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pO1xuICAgICAgcGF0Y2goXG4gICAgICAgIGMxW2ldLFxuICAgICAgICBuZXh0Q2hpbGQsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG9sZExlbmd0aCA+IG5ld0xlbmd0aCkge1xuICAgICAgdW5tb3VudENoaWxkcmVuKFxuICAgICAgICBjMSxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGNvbW1vbkxlbmd0aFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW91bnRDaGlsZHJlbihcbiAgICAgICAgYzIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICBjb21tb25MZW5ndGhcbiAgICAgICk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwYXRjaEtleWVkQ2hpbGRyZW4gPSAoYzEsIGMyLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBsMiA9IGMyLmxlbmd0aDtcbiAgICBsZXQgZTEgPSBjMS5sZW5ndGggLSAxO1xuICAgIGxldCBlMiA9IGwyIC0gMTtcbiAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XG4gICAgICBjb25zdCBuMSA9IGMxW2ldO1xuICAgICAgY29uc3QgbjIgPSBjMltpXSA9IG9wdGltaXplZCA/IGNsb25lSWZNb3VudGVkKGMyW2ldKSA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKTtcbiAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xuICAgICAgICBwYXRjaChcbiAgICAgICAgICBuMSxcbiAgICAgICAgICBuMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH1cbiAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XG4gICAgICBjb25zdCBuMSA9IGMxW2UxXTtcbiAgICAgIGNvbnN0IG4yID0gYzJbZTJdID0gb3B0aW1pemVkID8gY2xvbmVJZk1vdW50ZWQoYzJbZTJdKSA6IG5vcm1hbGl6ZVZOb2RlKGMyW2UyXSk7XG4gICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbjEsXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGUxLS07XG4gICAgICBlMi0tO1xuICAgIH1cbiAgICBpZiAoaSA+IGUxKSB7XG4gICAgICBpZiAoaSA8PSBlMikge1xuICAgICAgICBjb25zdCBuZXh0UG9zID0gZTIgKyAxO1xuICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0UG9zIDwgbDIgPyBjMltuZXh0UG9zXS5lbCA6IHBhcmVudEFuY2hvcjtcbiAgICAgICAgd2hpbGUgKGkgPD0gZTIpIHtcbiAgICAgICAgICBwYXRjaChcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBjMltpXSA9IG9wdGltaXplZCA/IGNsb25lSWZNb3VudGVkKGMyW2ldKSA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGkgPiBlMikge1xuICAgICAgd2hpbGUgKGkgPD0gZTEpIHtcbiAgICAgICAgdW5tb3VudChjMVtpXSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgczEgPSBpO1xuICAgICAgY29uc3QgczIgPSBpO1xuICAgICAgY29uc3Qga2V5VG9OZXdJbmRleE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICBmb3IgKGkgPSBzMjsgaSA8PSBlMjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IGMyW2ldID0gb3B0aW1pemVkID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pO1xuICAgICAgICBpZiAobmV4dENoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYga2V5VG9OZXdJbmRleE1hcC5oYXMobmV4dENoaWxkLmtleSkpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYER1cGxpY2F0ZSBrZXlzIGZvdW5kIGR1cmluZyB1cGRhdGU6YCxcbiAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkobmV4dENoaWxkLmtleSksXG4gICAgICAgICAgICAgIGBNYWtlIHN1cmUga2V5cyBhcmUgdW5pcXVlLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleVRvTmV3SW5kZXhNYXAuc2V0KG5leHRDaGlsZC5rZXksIGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgajtcbiAgICAgIGxldCBwYXRjaGVkID0gMDtcbiAgICAgIGNvbnN0IHRvQmVQYXRjaGVkID0gZTIgLSBzMiArIDE7XG4gICAgICBsZXQgbW92ZWQgPSBmYWxzZTtcbiAgICAgIGxldCBtYXhOZXdJbmRleFNvRmFyID0gMDtcbiAgICAgIGNvbnN0IG5ld0luZGV4VG9PbGRJbmRleE1hcCA9IG5ldyBBcnJheSh0b0JlUGF0Y2hlZCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdG9CZVBhdGNoZWQ7IGkrKykgbmV3SW5kZXhUb09sZEluZGV4TWFwW2ldID0gMDtcbiAgICAgIGZvciAoaSA9IHMxOyBpIDw9IGUxOyBpKyspIHtcbiAgICAgICAgY29uc3QgcHJldkNoaWxkID0gYzFbaV07XG4gICAgICAgIGlmIChwYXRjaGVkID49IHRvQmVQYXRjaGVkKSB7XG4gICAgICAgICAgdW5tb3VudChwcmV2Q2hpbGQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuZXdJbmRleDtcbiAgICAgICAgaWYgKHByZXZDaGlsZC5rZXkgIT0gbnVsbCkge1xuICAgICAgICAgIG5ld0luZGV4ID0ga2V5VG9OZXdJbmRleE1hcC5nZXQocHJldkNoaWxkLmtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChqID0gczI7IGogPD0gZTI7IGorKykge1xuICAgICAgICAgICAgaWYgKG5ld0luZGV4VG9PbGRJbmRleE1hcFtqIC0gczJdID09PSAwICYmIGlzU2FtZVZOb2RlVHlwZShwcmV2Q2hpbGQsIGMyW2pdKSkge1xuICAgICAgICAgICAgICBuZXdJbmRleCA9IGo7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3SW5kZXggPT09IHZvaWQgMCkge1xuICAgICAgICAgIHVubW91bnQocHJldkNoaWxkLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdJbmRleFRvT2xkSW5kZXhNYXBbbmV3SW5kZXggLSBzMl0gPSBpICsgMTtcbiAgICAgICAgICBpZiAobmV3SW5kZXggPj0gbWF4TmV3SW5kZXhTb0Zhcikge1xuICAgICAgICAgICAgbWF4TmV3SW5kZXhTb0ZhciA9IG5ld0luZGV4O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhdGNoKFxuICAgICAgICAgICAgcHJldkNoaWxkLFxuICAgICAgICAgICAgYzJbbmV3SW5kZXhdLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBwYXRjaGVkKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlID0gbW92ZWQgPyBnZXRTZXF1ZW5jZShuZXdJbmRleFRvT2xkSW5kZXhNYXApIDogRU1QVFlfQVJSO1xuICAgICAgaiA9IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKGkgPSB0b0JlUGF0Y2hlZCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IG5leHRJbmRleCA9IHMyICsgaTtcbiAgICAgICAgY29uc3QgbmV4dENoaWxkID0gYzJbbmV4dEluZGV4XTtcbiAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dEluZGV4ICsgMSA8IGwyID8gYzJbbmV4dEluZGV4ICsgMV0uZWwgOiBwYXJlbnRBbmNob3I7XG4gICAgICAgIGlmIChuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPT09IDApIHtcbiAgICAgICAgICBwYXRjaChcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBuZXh0Q2hpbGQsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAobW92ZWQpIHtcbiAgICAgICAgICBpZiAoaiA8IDAgfHwgaSAhPT0gaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2Vbal0pIHtcbiAgICAgICAgICAgIG1vdmUobmV4dENoaWxkLCBjb250YWluZXIsIGFuY2hvciwgMik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGotLTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IG1vdmUgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSwgcGFyZW50U3VzcGVuc2UgPSBudWxsKSA9PiB7XG4gICAgY29uc3QgeyBlbCwgdHlwZSwgdHJhbnNpdGlvbiwgY2hpbGRyZW4sIHNoYXBlRmxhZyB9ID0gdm5vZGU7XG4gICAgaWYgKHNoYXBlRmxhZyAmIDYpIHtcbiAgICAgIG1vdmUodm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgIHZub2RlLnN1c3BlbnNlLm1vdmUoY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHNoYXBlRmxhZyAmIDY0KSB7XG4gICAgICB0eXBlLm1vdmUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnRlcm5hbHMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbW92ZShjaGlsZHJlbltpXSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcbiAgICAgIH1cbiAgICAgIGhvc3RJbnNlcnQodm5vZGUuYW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBTdGF0aWMpIHtcbiAgICAgIG1vdmVTdGF0aWNOb2RlKHZub2RlLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5lZWRUcmFuc2l0aW9uMiA9IG1vdmVUeXBlICE9PSAyICYmIHNoYXBlRmxhZyAmIDEgJiYgdHJhbnNpdGlvbjtcbiAgICBpZiAobmVlZFRyYW5zaXRpb24yKSB7XG4gICAgICBpZiAobW92ZVR5cGUgPT09IDApIHtcbiAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHRyYW5zaXRpb24uZW50ZXIoZWwpLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7IGxlYXZlLCBkZWxheUxlYXZlLCBhZnRlckxlYXZlIH0gPSB0cmFuc2l0aW9uO1xuICAgICAgICBjb25zdCByZW1vdmUyID0gKCkgPT4gaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICBjb25zdCBwZXJmb3JtTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgbGVhdmUoZWwsICgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZTIoKTtcbiAgICAgICAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgICAgICAgIGRlbGF5TGVhdmUoZWwsIHJlbW92ZTIsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVyZm9ybUxlYXZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdW5tb3VudCA9ICh2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0eXBlLFxuICAgICAgcHJvcHMsXG4gICAgICByZWYsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGR5bmFtaWNDaGlsZHJlbixcbiAgICAgIHNoYXBlRmxhZyxcbiAgICAgIHBhdGNoRmxhZyxcbiAgICAgIGRpcnMsXG4gICAgICBjYWNoZUluZGV4XG4gICAgfSA9IHZub2RlO1xuICAgIGlmIChwYXRjaEZsYWcgPT09IC0yKSB7XG4gICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUsIHRydWUpO1xuICAgIH1cbiAgICBpZiAoY2FjaGVJbmRleCAhPSBudWxsKSB7XG4gICAgICBwYXJlbnRDb21wb25lbnQucmVuZGVyQ2FjaGVbY2FjaGVJbmRleF0gPSB2b2lkIDA7XG4gICAgfVxuICAgIGlmIChzaGFwZUZsYWcgJiAyNTYpIHtcbiAgICAgIHBhcmVudENvbXBvbmVudC5jdHguZGVhY3RpdmF0ZSh2bm9kZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNob3VsZEludm9rZURpcnMgPSBzaGFwZUZsYWcgJiAxICYmIGRpcnM7XG4gICAgY29uc3Qgc2hvdWxkSW52b2tlVm5vZGVIb29rID0gIWlzQXN5bmNXcmFwcGVyKHZub2RlKTtcbiAgICBsZXQgdm5vZGVIb29rO1xuICAgIGlmIChzaG91bGRJbnZva2VWbm9kZUhvb2sgJiYgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVVbm1vdW50KSkge1xuICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgfVxuICAgIGlmIChzaGFwZUZsYWcgJiA2KSB7XG4gICAgICB1bm1vdW50Q29tcG9uZW50KHZub2RlLmNvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNoYXBlRmxhZyAmIDEyOCkge1xuICAgICAgICB2bm9kZS5zdXNwZW5zZS51bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRJbnZva2VEaXJzKSB7XG4gICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgXCJiZWZvcmVVbm1vdW50XCIpO1xuICAgICAgfVxuICAgICAgaWYgKHNoYXBlRmxhZyAmIDY0KSB7XG4gICAgICAgIHZub2RlLnR5cGUucmVtb3ZlKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBpbnRlcm5hbHMsXG4gICAgICAgICAgZG9SZW1vdmVcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoZHluYW1pY0NoaWxkcmVuICYmIC8vICM1MTU0XG4gICAgICAvLyB3aGVuIHYtb25jZSBpcyB1c2VkIGluc2lkZSBhIGJsb2NrLCBzZXRCbG9ja1RyYWNraW5nKC0xKSBtYXJrcyB0aGVcbiAgICAgIC8vIHBhcmVudCBibG9jayB3aXRoIGhhc09uY2U6IHRydWVcbiAgICAgIC8vIHNvIHRoYXQgaXQgZG9lc24ndCB0YWtlIHRoZSBmYXN0IHBhdGggZHVyaW5nIHVubW91bnQgLSBvdGhlcndpc2VcbiAgICAgIC8vIGNvbXBvbmVudHMgbmVzdGVkIGluIHYtb25jZSBhcmUgbmV2ZXIgdW5tb3VudGVkLlxuICAgICAgIWR5bmFtaWNDaGlsZHJlbi5oYXNPbmNlICYmIC8vICMxMTUzOiBmYXN0IHBhdGggc2hvdWxkIG5vdCBiZSB0YWtlbiBmb3Igbm9uLXN0YWJsZSAodi1mb3IpIGZyYWdtZW50c1xuICAgICAgKHR5cGUgIT09IEZyYWdtZW50IHx8IHBhdGNoRmxhZyA+IDAgJiYgcGF0Y2hGbGFnICYgNjQpKSB7XG4gICAgICAgIHVubW91bnRDaGlsZHJlbihcbiAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4sXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gRnJhZ21lbnQgJiYgcGF0Y2hGbGFnICYgKDEyOCB8IDI1NikgfHwgIW9wdGltaXplZCAmJiBzaGFwZUZsYWcgJiAxNikge1xuICAgICAgICB1bm1vdW50Q2hpbGRyZW4oY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgfVxuICAgICAgaWYgKGRvUmVtb3ZlKSB7XG4gICAgICAgIHJlbW92ZSh2bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzaG91bGRJbnZva2VWbm9kZUhvb2sgJiYgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVVbm1vdW50ZWQpIHx8IHNob3VsZEludm9rZURpcnMpIHtcbiAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgc2hvdWxkSW52b2tlRGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwidW5tb3VudGVkXCIpO1xuICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcmVtb3ZlID0gKHZub2RlKSA9PiB7XG4gICAgY29uc3QgeyB0eXBlLCBlbCwgYW5jaG9yLCB0cmFuc2l0aW9uIH0gPSB2bm9kZTtcbiAgICBpZiAodHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHZub2RlLnBhdGNoRmxhZyA+IDAgJiYgdm5vZGUucGF0Y2hGbGFnICYgMjA0OCAmJiB0cmFuc2l0aW9uICYmICF0cmFuc2l0aW9uLnBlcnNpc3RlZCkge1xuICAgICAgICB2bm9kZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBDb21tZW50KSB7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKGNoaWxkLmVsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVtb3ZlKGNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVtb3ZlRnJhZ21lbnQoZWwsIGFuY2hvcik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBTdGF0aWMpIHtcbiAgICAgIHJlbW92ZVN0YXRpY05vZGUodm5vZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwZXJmb3JtUmVtb3ZlID0gKCkgPT4ge1xuICAgICAgaG9zdFJlbW92ZShlbCk7XG4gICAgICBpZiAodHJhbnNpdGlvbiAmJiAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQgJiYgdHJhbnNpdGlvbi5hZnRlckxlYXZlKSB7XG4gICAgICAgIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEgJiYgdHJhbnNpdGlvbiAmJiAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQpIHtcbiAgICAgIGNvbnN0IHsgbGVhdmUsIGRlbGF5TGVhdmUgfSA9IHRyYW5zaXRpb247XG4gICAgICBjb25zdCBwZXJmb3JtTGVhdmUgPSAoKSA9PiBsZWF2ZShlbCwgcGVyZm9ybVJlbW92ZSk7XG4gICAgICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgICAgICBkZWxheUxlYXZlKHZub2RlLmVsLCBwZXJmb3JtUmVtb3ZlLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVyZm9ybUxlYXZlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlcmZvcm1SZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHJlbW92ZUZyYWdtZW50ID0gKGN1ciwgZW5kKSA9PiB7XG4gICAgbGV0IG5leHQ7XG4gICAgd2hpbGUgKGN1ciAhPT0gZW5kKSB7XG4gICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGN1cik7XG4gICAgICBob3N0UmVtb3ZlKGN1cik7XG4gICAgICBjdXIgPSBuZXh0O1xuICAgIH1cbiAgICBob3N0UmVtb3ZlKGVuZCk7XG4gIH07XG4gIGNvbnN0IHVubW91bnRDb21wb25lbnQgPSAoaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkgPT4ge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGluc3RhbmNlLnR5cGUuX19obXJJZCkge1xuICAgICAgdW5yZWdpc3RlckhNUihpbnN0YW5jZSk7XG4gICAgfVxuICAgIGNvbnN0IHsgYnVtLCBzY29wZSwgam9iLCBzdWJUcmVlLCB1bSwgbSwgYSB9ID0gaW5zdGFuY2U7XG4gICAgaW52YWxpZGF0ZU1vdW50KG0pO1xuICAgIGludmFsaWRhdGVNb3VudChhKTtcbiAgICBpZiAoYnVtKSB7XG4gICAgICBpbnZva2VBcnJheUZucyhidW0pO1xuICAgIH1cbiAgICBzY29wZS5zdG9wKCk7XG4gICAgaWYgKGpvYikge1xuICAgICAgam9iLmZsYWdzIHw9IDg7XG4gICAgICB1bm1vdW50KHN1YlRyZWUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xuICAgIH1cbiAgICBpZiAodW0pIHtcbiAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCh1bSwgcGFyZW50U3VzcGVuc2UpO1xuICAgIH1cbiAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgaW5zdGFuY2UuaXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICBpZiAocGFyZW50U3VzcGVuc2UgJiYgcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJiAhcGFyZW50U3VzcGVuc2UuaXNVbm1vdW50ZWQgJiYgaW5zdGFuY2UuYXN5bmNEZXAgJiYgIWluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgJiYgaW5zdGFuY2Uuc3VzcGVuc2VJZCA9PT0gcGFyZW50U3VzcGVuc2UucGVuZGluZ0lkKSB7XG4gICAgICBwYXJlbnRTdXNwZW5zZS5kZXBzLS07XG4gICAgICBpZiAocGFyZW50U3VzcGVuc2UuZGVwcyA9PT0gMCkge1xuICAgICAgICBwYXJlbnRTdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkKGluc3RhbmNlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHVubW91bnRDaGlsZHJlbiA9IChjaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UsIHN0YXJ0ID0gMCkgPT4ge1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB1bm1vdW50KGNoaWxkcmVuW2ldLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSwgb3B0aW1pemVkKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGdldE5leHRIb3N0Tm9kZSA9ICh2bm9kZSkgPT4ge1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2KSB7XG4gICAgICByZXR1cm4gZ2V0TmV4dEhvc3ROb2RlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEyOCkge1xuICAgICAgcmV0dXJuIHZub2RlLnN1c3BlbnNlLm5leHQoKTtcbiAgICB9XG4gICAgY29uc3QgZWwgPSBob3N0TmV4dFNpYmxpbmcodm5vZGUuYW5jaG9yIHx8IHZub2RlLmVsKTtcbiAgICBjb25zdCB0ZWxlcG9ydEVuZCA9IGVsICYmIGVsW1RlbGVwb3J0RW5kS2V5XTtcbiAgICByZXR1cm4gdGVsZXBvcnRFbmQgPyBob3N0TmV4dFNpYmxpbmcodGVsZXBvcnRFbmQpIDogZWw7XG4gIH07XG4gIGxldCBpc0ZsdXNoaW5nID0gZmFsc2U7XG4gIGNvbnN0IHJlbmRlciA9ICh2bm9kZSwgY29udGFpbmVyLCBuYW1lc3BhY2UpID0+IHtcbiAgICBpZiAodm5vZGUgPT0gbnVsbCkge1xuICAgICAgaWYgKGNvbnRhaW5lci5fdm5vZGUpIHtcbiAgICAgICAgdW5tb3VudChjb250YWluZXIuX3Zub2RlLCBudWxsLCBudWxsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGF0Y2goXG4gICAgICAgIGNvbnRhaW5lci5fdm5vZGUgfHwgbnVsbCxcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbmFtZXNwYWNlXG4gICAgICApO1xuICAgIH1cbiAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XG4gICAgaWYgKCFpc0ZsdXNoaW5nKSB7XG4gICAgICBpc0ZsdXNoaW5nID0gdHJ1ZTtcbiAgICAgIGZsdXNoUHJlRmx1c2hDYnMoKTtcbiAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XG4gICAgICBpc0ZsdXNoaW5nID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBjb25zdCBpbnRlcm5hbHMgPSB7XG4gICAgcDogcGF0Y2gsXG4gICAgdW06IHVubW91bnQsXG4gICAgbTogbW92ZSxcbiAgICByOiByZW1vdmUsXG4gICAgbXQ6IG1vdW50Q29tcG9uZW50LFxuICAgIG1jOiBtb3VudENoaWxkcmVuLFxuICAgIHBjOiBwYXRjaENoaWxkcmVuLFxuICAgIHBiYzogcGF0Y2hCbG9ja0NoaWxkcmVuLFxuICAgIG46IGdldE5leHRIb3N0Tm9kZSxcbiAgICBvOiBvcHRpb25zXG4gIH07XG4gIGxldCBoeWRyYXRlO1xuICBsZXQgaHlkcmF0ZU5vZGU7XG4gIGlmIChjcmVhdGVIeWRyYXRpb25GbnMpIHtcbiAgICBbaHlkcmF0ZSwgaHlkcmF0ZU5vZGVdID0gY3JlYXRlSHlkcmF0aW9uRm5zKFxuICAgICAgaW50ZXJuYWxzXG4gICAgKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHJlbmRlcixcbiAgICBoeWRyYXRlLFxuICAgIGNyZWF0ZUFwcDogY3JlYXRlQXBwQVBJKHJlbmRlciwgaHlkcmF0ZSlcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDaGlsZHJlbk5hbWVzcGFjZSh7IHR5cGUsIHByb3BzIH0sIGN1cnJlbnROYW1lc3BhY2UpIHtcbiAgcmV0dXJuIGN1cnJlbnROYW1lc3BhY2UgPT09IFwic3ZnXCIgJiYgdHlwZSA9PT0gXCJmb3JlaWduT2JqZWN0XCIgfHwgY3VycmVudE5hbWVzcGFjZSA9PT0gXCJtYXRobWxcIiAmJiB0eXBlID09PSBcImFubm90YXRpb24teG1sXCIgJiYgcHJvcHMgJiYgcHJvcHMuZW5jb2RpbmcgJiYgcHJvcHMuZW5jb2RpbmcuaW5jbHVkZXMoXCJodG1sXCIpID8gdm9pZCAwIDogY3VycmVudE5hbWVzcGFjZTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZVJlY3Vyc2UoeyBlZmZlY3QsIGpvYiB9LCBhbGxvd2VkKSB7XG4gIGlmIChhbGxvd2VkKSB7XG4gICAgZWZmZWN0LmZsYWdzIHw9IDMyO1xuICAgIGpvYi5mbGFncyB8PSA0O1xuICB9IGVsc2Uge1xuICAgIGVmZmVjdC5mbGFncyAmPSB+MzI7XG4gICAgam9iLmZsYWdzICY9IH40O1xuICB9XG59XG5mdW5jdGlvbiBuZWVkVHJhbnNpdGlvbihwYXJlbnRTdXNwZW5zZSwgdHJhbnNpdGlvbikge1xuICByZXR1cm4gKCFwYXJlbnRTdXNwZW5zZSB8fCBwYXJlbnRTdXNwZW5zZSAmJiAhcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCkgJiYgdHJhbnNpdGlvbiAmJiAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQ7XG59XG5mdW5jdGlvbiB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgc2hhbGxvdyA9IGZhbHNlKSB7XG4gIGNvbnN0IGNoMSA9IG4xLmNoaWxkcmVuO1xuICBjb25zdCBjaDIgPSBuMi5jaGlsZHJlbjtcbiAgaWYgKGlzQXJyYXkoY2gxKSAmJiBpc0FycmF5KGNoMikpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoMS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYzEgPSBjaDFbaV07XG4gICAgICBsZXQgYzIgPSBjaDJbaV07XG4gICAgICBpZiAoYzIuc2hhcGVGbGFnICYgMSAmJiAhYzIuZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgIGlmIChjMi5wYXRjaEZsYWcgPD0gMCB8fCBjMi5wYXRjaEZsYWcgPT09IDMyKSB7XG4gICAgICAgICAgYzIgPSBjaDJbaV0gPSBjbG9uZUlmTW91bnRlZChjaDJbaV0pO1xuICAgICAgICAgIGMyLmVsID0gYzEuZWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaGFsbG93ICYmIGMyLnBhdGNoRmxhZyAhPT0gLTIpXG4gICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihjMSwgYzIpO1xuICAgICAgfVxuICAgICAgaWYgKGMyLnR5cGUgPT09IFRleHQpIHtcbiAgICAgICAgYzIuZWwgPSBjMS5lbDtcbiAgICAgIH1cbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGMyLnR5cGUgPT09IENvbW1lbnQgJiYgIWMyLmVsKSB7XG4gICAgICAgIGMyLmVsID0gYzEuZWw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRTZXF1ZW5jZShhcnIpIHtcbiAgY29uc3QgcCA9IGFyci5zbGljZSgpO1xuICBjb25zdCByZXN1bHQgPSBbMF07XG4gIGxldCBpLCBqLCB1LCB2LCBjO1xuICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBhcnJJID0gYXJyW2ldO1xuICAgIGlmIChhcnJJICE9PSAwKSB7XG4gICAgICBqID0gcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChhcnJbal0gPCBhcnJJKSB7XG4gICAgICAgIHBbaV0gPSBqO1xuICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB1ID0gMDtcbiAgICAgIHYgPSByZXN1bHQubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlICh1IDwgdikge1xuICAgICAgICBjID0gdSArIHYgPj4gMTtcbiAgICAgICAgaWYgKGFycltyZXN1bHRbY11dIDwgYXJySSkge1xuICAgICAgICAgIHUgPSBjICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2ID0gYztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFyckkgPCBhcnJbcmVzdWx0W3VdXSkge1xuICAgICAgICBpZiAodSA+IDApIHtcbiAgICAgICAgICBwW2ldID0gcmVzdWx0W3UgLSAxXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbdV0gPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB1ID0gcmVzdWx0Lmxlbmd0aDtcbiAgdiA9IHJlc3VsdFt1IC0gMV07XG4gIHdoaWxlICh1LS0gPiAwKSB7XG4gICAgcmVzdWx0W3VdID0gdjtcbiAgICB2ID0gcFt2XTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbG9jYXRlTm9uSHlkcmF0ZWRBc3luY1Jvb3QoaW5zdGFuY2UpIHtcbiAgY29uc3Qgc3ViQ29tcG9uZW50ID0gaW5zdGFuY2Uuc3ViVHJlZS5jb21wb25lbnQ7XG4gIGlmIChzdWJDb21wb25lbnQpIHtcbiAgICBpZiAoc3ViQ29tcG9uZW50LmFzeW5jRGVwICYmICFzdWJDb21wb25lbnQuYXN5bmNSZXNvbHZlZCkge1xuICAgICAgcmV0dXJuIHN1YkNvbXBvbmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxvY2F0ZU5vbkh5ZHJhdGVkQXN5bmNSb290KHN1YkNvbXBvbmVudCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBpbnZhbGlkYXRlTW91bnQoaG9va3MpIHtcbiAgaWYgKGhvb2tzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKylcbiAgICAgIGhvb2tzW2ldLmZsYWdzIHw9IDg7XG4gIH1cbn1cblxuY29uc3Qgc3NyQ29udGV4dEtleSA9IFN5bWJvbC5mb3IoXCJ2LXNjeFwiKTtcbmNvbnN0IHVzZVNTUkNvbnRleHQgPSAoKSA9PiB7XG4gIHtcbiAgICBjb25zdCBjdHggPSBpbmplY3Qoc3NyQ29udGV4dEtleSk7XG4gICAgaWYgKCFjdHgpIHtcbiAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgd2FybiQxKFxuICAgICAgICBgU2VydmVyIHJlbmRlcmluZyBjb250ZXh0IG5vdCBwcm92aWRlZC4gTWFrZSBzdXJlIHRvIG9ubHkgY2FsbCB1c2VTU1JDb250ZXh0KCkgY29uZGl0aW9uYWxseSBpbiB0aGUgc2VydmVyIGJ1aWxkLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjdHg7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHdhdGNoRWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xuICByZXR1cm4gZG9XYXRjaChlZmZlY3QsIG51bGwsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gd2F0Y2hQb3N0RWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xuICByZXR1cm4gZG9XYXRjaChcbiAgICBlZmZlY3QsXG4gICAgbnVsbCxcbiAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gZXh0ZW5kKHt9LCBvcHRpb25zLCB7IGZsdXNoOiBcInBvc3RcIiB9KSA6IHsgZmx1c2g6IFwicG9zdFwiIH1cbiAgKTtcbn1cbmZ1bmN0aW9uIHdhdGNoU3luY0VmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGRvV2F0Y2goXG4gICAgZWZmZWN0LFxuICAgIG51bGwsXG4gICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IGV4dGVuZCh7fSwgb3B0aW9ucywgeyBmbHVzaDogXCJzeW5jXCIgfSkgOiB7IGZsdXNoOiBcInN5bmNcIiB9XG4gICk7XG59XG5mdW5jdGlvbiB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zKSB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFpc0Z1bmN0aW9uKGNiKSkge1xuICAgIHdhcm4kMShcbiAgICAgIGBcXGB3YXRjaChmbiwgb3B0aW9ucz8pXFxgIHNpZ25hdHVyZSBoYXMgYmVlbiBtb3ZlZCB0byBhIHNlcGFyYXRlIEFQSS4gVXNlIFxcYHdhdGNoRWZmZWN0KGZuLCBvcHRpb25zPylcXGAgaW5zdGVhZC4gXFxgd2F0Y2hcXGAgbm93IG9ubHkgc3VwcG9ydHMgXFxgd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucz8pIHNpZ25hdHVyZS5gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gZG9XYXRjaChzb3VyY2UsIGNiLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGRvV2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucyA9IEVNUFRZX09CSikge1xuICBjb25zdCB7IGltbWVkaWF0ZSwgZGVlcCwgZmx1c2gsIG9uY2UgfSA9IG9wdGlvbnM7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFjYikge1xuICAgIGlmIChpbW1lZGlhdGUgIT09IHZvaWQgMCkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgd2F0Y2goKSBcImltbWVkaWF0ZVwiIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIHRoZSB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmBcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChkZWVwICE9PSB2b2lkIDApIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYHdhdGNoKCkgXCJkZWVwXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG9uY2UgIT09IHZvaWQgMCkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgd2F0Y2goKSBcIm9uY2VcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgd2F0Y2goc291cmNlLCBjYWxsYmFjaywgb3B0aW9ucz8pIHNpZ25hdHVyZS5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCBiYXNlV2F0Y2hPcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIGJhc2VXYXRjaE9wdGlvbnMub25XYXJuID0gd2FybiQxO1xuICBsZXQgc3NyQ2xlYW51cDtcbiAgaWYgKGlzSW5TU1JDb21wb25lbnRTZXR1cCkge1xuICAgIGlmIChmbHVzaCA9PT0gXCJzeW5jXCIpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHVzZVNTUkNvbnRleHQoKTtcbiAgICAgIHNzckNsZWFudXAgPSBjdHguX193YXRjaGVySGFuZGxlcyB8fCAoY3R4Ll9fd2F0Y2hlckhhbmRsZXMgPSBbXSk7XG4gICAgfSBlbHNlIGlmICghY2IgfHwgaW1tZWRpYXRlKSB7XG4gICAgICBiYXNlV2F0Y2hPcHRpb25zLm9uY2UgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB3YXRjaFN0b3BIYW5kbGUgPSAoKSA9PiB7XG4gICAgICB9O1xuICAgICAgd2F0Y2hTdG9wSGFuZGxlLnN0b3AgPSBOT09QO1xuICAgICAgd2F0Y2hTdG9wSGFuZGxlLnJlc3VtZSA9IE5PT1A7XG4gICAgICB3YXRjaFN0b3BIYW5kbGUucGF1c2UgPSBOT09QO1xuICAgICAgcmV0dXJuIHdhdGNoU3RvcEhhbmRsZTtcbiAgICB9XG4gIH1cbiAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2U7XG4gIGJhc2VXYXRjaE9wdGlvbnMuY2FsbCA9IChmbiwgdHlwZSwgYXJncykgPT4gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKTtcbiAgbGV0IGlzUHJlID0gZmFsc2U7XG4gIGlmIChmbHVzaCA9PT0gXCJwb3N0XCIpIHtcbiAgICBiYXNlV2F0Y2hPcHRpb25zLnNjaGVkdWxlciA9IChqb2IpID0+IHtcbiAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChqb2IsIGluc3RhbmNlICYmIGluc3RhbmNlLnN1c3BlbnNlKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKGZsdXNoICE9PSBcInN5bmNcIikge1xuICAgIGlzUHJlID0gdHJ1ZTtcbiAgICBiYXNlV2F0Y2hPcHRpb25zLnNjaGVkdWxlciA9IChqb2IsIGlzRmlyc3RSdW4pID0+IHtcbiAgICAgIGlmIChpc0ZpcnN0UnVuKSB7XG4gICAgICAgIGpvYigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVKb2Ioam9iKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGJhc2VXYXRjaE9wdGlvbnMuYXVnbWVudEpvYiA9IChqb2IpID0+IHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGpvYi5mbGFncyB8PSA0O1xuICAgIH1cbiAgICBpZiAoaXNQcmUpIHtcbiAgICAgIGpvYi5mbGFncyB8PSAyO1xuICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIGpvYi5pZCA9IGluc3RhbmNlLnVpZDtcbiAgICAgICAgam9iLmkgPSBpbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHdhdGNoSGFuZGxlID0gd2F0Y2gkMShzb3VyY2UsIGNiLCBiYXNlV2F0Y2hPcHRpb25zKTtcbiAgaWYgKHNzckNsZWFudXApIHNzckNsZWFudXAucHVzaCh3YXRjaEhhbmRsZSk7XG4gIHJldHVybiB3YXRjaEhhbmRsZTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlV2F0Y2goc291cmNlLCB2YWx1ZSwgb3B0aW9ucykge1xuICBjb25zdCBwdWJsaWNUaGlzID0gdGhpcy5wcm94eTtcbiAgY29uc3QgZ2V0dGVyID0gaXNTdHJpbmcoc291cmNlKSA/IHNvdXJjZS5pbmNsdWRlcyhcIi5cIikgPyBjcmVhdGVQYXRoR2V0dGVyKHB1YmxpY1RoaXMsIHNvdXJjZSkgOiAoKSA9PiBwdWJsaWNUaGlzW3NvdXJjZV0gOiBzb3VyY2UuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKTtcbiAgbGV0IGNiO1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICBjYiA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGNiID0gdmFsdWUuaGFuZGxlcjtcbiAgICBvcHRpb25zID0gdmFsdWU7XG4gIH1cbiAgY29uc3QgcmVzZXQgPSBzZXRDdXJyZW50SW5zdGFuY2UodGhpcyk7XG4gIGNvbnN0IHJlcyA9IGRvV2F0Y2goZ2V0dGVyLCBjYi5iaW5kKHB1YmxpY1RoaXMpLCBvcHRpb25zKTtcbiAgcmVzZXQoKTtcbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGhHZXR0ZXIoY3R4LCBwYXRoKSB7XG4gIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi5cIik7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgbGV0IGN1ciA9IGN0eDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aCAmJiBjdXI7IGkrKykge1xuICAgICAgY3VyID0gY3VyW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlTW9kZWwocHJvcHMsIG5hbWUsIG9wdGlvbnMgPSBFTVBUWV9PQkopIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhaSkge1xuICAgIHdhcm4kMShgdXNlTW9kZWwoKSBjYWxsZWQgd2l0aG91dCBhY3RpdmUgaW5zdGFuY2UuYCk7XG4gICAgcmV0dXJuIHJlZigpO1xuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFpLnByb3BzT3B0aW9uc1swXVtuYW1lXSkge1xuICAgIHdhcm4kMShgdXNlTW9kZWwoKSBjYWxsZWQgd2l0aCBwcm9wIFwiJHtuYW1lfVwiIHdoaWNoIGlzIG5vdCBkZWNsYXJlZC5gKTtcbiAgICByZXR1cm4gcmVmKCk7XG4gIH1cbiAgY29uc3QgY2FtZWxpemVkTmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICBjb25zdCBoeXBoZW5hdGVkTmFtZSA9IGh5cGhlbmF0ZShuYW1lKTtcbiAgY29uc3QgbW9kaWZpZXJzID0gZ2V0TW9kZWxNb2RpZmllcnMocHJvcHMsIG5hbWUpO1xuICBjb25zdCByZXMgPSBjdXN0b21SZWYoKHRyYWNrLCB0cmlnZ2VyKSA9PiB7XG4gICAgbGV0IGxvY2FsVmFsdWU7XG4gICAgbGV0IHByZXZTZXRWYWx1ZSA9IEVNUFRZX09CSjtcbiAgICBsZXQgcHJldkVtaXR0ZWRWYWx1ZTtcbiAgICB3YXRjaFN5bmNFZmZlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbbmFtZV07XG4gICAgICBpZiAoaGFzQ2hhbmdlZChsb2NhbFZhbHVlLCBwcm9wVmFsdWUpKSB7XG4gICAgICAgIGxvY2FsVmFsdWUgPSBwcm9wVmFsdWU7XG4gICAgICAgIHRyaWdnZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0KCkge1xuICAgICAgICB0cmFjaygpO1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5nZXQgPyBvcHRpb25zLmdldChsb2NhbFZhbHVlKSA6IGxvY2FsVmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGVtaXR0ZWRWYWx1ZSA9IG9wdGlvbnMuc2V0ID8gb3B0aW9ucy5zZXQodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIGlmICghaGFzQ2hhbmdlZChlbWl0dGVkVmFsdWUsIGxvY2FsVmFsdWUpICYmICEocHJldlNldFZhbHVlICE9PSBFTVBUWV9PQkogJiYgaGFzQ2hhbmdlZCh2YWx1ZSwgcHJldlNldFZhbHVlKSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmF3UHJvcHMgPSBpLnZub2RlLnByb3BzO1xuICAgICAgICBpZiAoIShyYXdQcm9wcyAmJiAvLyBjaGVjayBpZiBwYXJlbnQgaGFzIHBhc3NlZCB2LW1vZGVsXG4gICAgICAgIChuYW1lIGluIHJhd1Byb3BzIHx8IGNhbWVsaXplZE5hbWUgaW4gcmF3UHJvcHMgfHwgaHlwaGVuYXRlZE5hbWUgaW4gcmF3UHJvcHMpICYmIChgb25VcGRhdGU6JHtuYW1lfWAgaW4gcmF3UHJvcHMgfHwgYG9uVXBkYXRlOiR7Y2FtZWxpemVkTmFtZX1gIGluIHJhd1Byb3BzIHx8IGBvblVwZGF0ZToke2h5cGhlbmF0ZWROYW1lfWAgaW4gcmF3UHJvcHMpKSkge1xuICAgICAgICAgIGxvY2FsVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICB0cmlnZ2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaS5lbWl0KGB1cGRhdGU6JHtuYW1lfWAsIGVtaXR0ZWRWYWx1ZSk7XG4gICAgICAgIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBlbWl0dGVkVmFsdWUpICYmIGhhc0NoYW5nZWQodmFsdWUsIHByZXZTZXRWYWx1ZSkgJiYgIWhhc0NoYW5nZWQoZW1pdHRlZFZhbHVlLCBwcmV2RW1pdHRlZFZhbHVlKSkge1xuICAgICAgICAgIHRyaWdnZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2U2V0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcHJldkVtaXR0ZWRWYWx1ZSA9IGVtaXR0ZWRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgcmVzW1N5bWJvbC5pdGVyYXRvcl0gPSAoKSA9PiB7XG4gICAgbGV0IGkyID0gMDtcbiAgICByZXR1cm4ge1xuICAgICAgbmV4dCgpIHtcbiAgICAgICAgaWYgKGkyIDwgMikge1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBpMisrID8gbW9kaWZpZXJzIHx8IEVNUFRZX09CSiA6IHJlcywgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICByZXR1cm4gcmVzO1xufVxuY29uc3QgZ2V0TW9kZWxNb2RpZmllcnMgPSAocHJvcHMsIG1vZGVsTmFtZSkgPT4ge1xuICByZXR1cm4gbW9kZWxOYW1lID09PSBcIm1vZGVsVmFsdWVcIiB8fCBtb2RlbE5hbWUgPT09IFwibW9kZWwtdmFsdWVcIiA/IHByb3BzLm1vZGVsTW9kaWZpZXJzIDogcHJvcHNbYCR7bW9kZWxOYW1lfU1vZGlmaWVyc2BdIHx8IHByb3BzW2Ake2NhbWVsaXplKG1vZGVsTmFtZSl9TW9kaWZpZXJzYF0gfHwgcHJvcHNbYCR7aHlwaGVuYXRlKG1vZGVsTmFtZSl9TW9kaWZpZXJzYF07XG59O1xuXG5mdW5jdGlvbiBlbWl0KGluc3RhbmNlLCBldmVudCwgLi4ucmF3QXJncykge1xuICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQpIHJldHVybjtcbiAgY29uc3QgcHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcyB8fCBFTVBUWV9PQko7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgY29uc3Qge1xuICAgICAgZW1pdHNPcHRpb25zLFxuICAgICAgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXVxuICAgIH0gPSBpbnN0YW5jZTtcbiAgICBpZiAoZW1pdHNPcHRpb25zKSB7XG4gICAgICBpZiAoIShldmVudCBpbiBlbWl0c09wdGlvbnMpICYmIHRydWUpIHtcbiAgICAgICAgaWYgKCFwcm9wc09wdGlvbnMgfHwgISh0b0hhbmRsZXJLZXkoY2FtZWxpemUoZXZlbnQpKSBpbiBwcm9wc09wdGlvbnMpKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYENvbXBvbmVudCBlbWl0dGVkIGV2ZW50IFwiJHtldmVudH1cIiBidXQgaXQgaXMgbmVpdGhlciBkZWNsYXJlZCBpbiB0aGUgZW1pdHMgb3B0aW9uIG5vciBhcyBhbiBcIiR7dG9IYW5kbGVyS2V5KGNhbWVsaXplKGV2ZW50KSl9XCIgcHJvcC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gZW1pdHNPcHRpb25zW2V2ZW50XTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsaWRhdG9yKSkge1xuICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0b3IoLi4ucmF3QXJncyk7XG4gICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIGBJbnZhbGlkIGV2ZW50IGFyZ3VtZW50czogZXZlbnQgdmFsaWRhdGlvbiBmYWlsZWQgZm9yIGV2ZW50IFwiJHtldmVudH1cIi5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBsZXQgYXJncyA9IHJhd0FyZ3M7XG4gIGNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IGV2ZW50LnN0YXJ0c1dpdGgoXCJ1cGRhdGU6XCIpO1xuICBjb25zdCBtb2RpZmllcnMgPSBpc01vZGVsTGlzdGVuZXIgJiYgZ2V0TW9kZWxNb2RpZmllcnMocHJvcHMsIGV2ZW50LnNsaWNlKDcpKTtcbiAgaWYgKG1vZGlmaWVycykge1xuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgYXJncyA9IHJhd0FyZ3MubWFwKChhKSA9PiBpc1N0cmluZyhhKSA/IGEudHJpbSgpIDogYSk7XG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICBhcmdzID0gcmF3QXJncy5tYXAobG9vc2VUb051bWJlcik7XG4gICAgfVxuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgIGRldnRvb2xzQ29tcG9uZW50RW1pdChpbnN0YW5jZSwgZXZlbnQsIGFyZ3MpO1xuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgY29uc3QgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgcHJvcHNbdG9IYW5kbGVyS2V5KGxvd2VyQ2FzZUV2ZW50KV0pIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYEV2ZW50IFwiJHtsb3dlckNhc2VFdmVudH1cIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCAke2Zvcm1hdENvbXBvbmVudE5hbWUoXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgaW5zdGFuY2UudHlwZVxuICAgICAgICApfSBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXCIke2V2ZW50fVwiLiBOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSB2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXCIke2h5cGhlbmF0ZShcbiAgICAgICAgICBldmVudFxuICAgICAgICApfVwiIGluc3RlYWQgb2YgXCIke2V2ZW50fVwiLmBcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGxldCBoYW5kbGVyTmFtZTtcbiAgbGV0IGhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShldmVudCldIHx8IC8vIGFsc28gdHJ5IGNhbWVsQ2FzZSBldmVudCBoYW5kbGVyICgjMjI0OSlcbiAgcHJvcHNbaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoY2FtZWxpemUoZXZlbnQpKV07XG4gIGlmICghaGFuZGxlciAmJiBpc01vZGVsTGlzdGVuZXIpIHtcbiAgICBoYW5kbGVyID0gcHJvcHNbaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoaHlwaGVuYXRlKGV2ZW50KSldO1xuICB9XG4gIGlmIChoYW5kbGVyKSB7XG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgICBoYW5kbGVyLFxuICAgICAgaW5zdGFuY2UsXG4gICAgICA2LFxuICAgICAgYXJnc1xuICAgICk7XG4gIH1cbiAgY29uc3Qgb25jZUhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZSArIGBPbmNlYF07XG4gIGlmIChvbmNlSGFuZGxlcikge1xuICAgIGlmICghaW5zdGFuY2UuZW1pdHRlZCkge1xuICAgICAgaW5zdGFuY2UuZW1pdHRlZCA9IHt9O1xuICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UuZW1pdHRlZFtoYW5kbGVyTmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5zdGFuY2UuZW1pdHRlZFtoYW5kbGVyTmFtZV0gPSB0cnVlO1xuICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKFxuICAgICAgb25jZUhhbmRsZXIsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDYsXG4gICAgICBhcmdzXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gbm9ybWFsaXplRW1pdHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xuICBjb25zdCBjYWNoZSA9IGFwcENvbnRleHQuZW1pdHNDYWNoZTtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGNvbXApO1xuICBpZiAoY2FjaGVkICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG4gIGNvbnN0IHJhdyA9IGNvbXAuZW1pdHM7XG4gIGxldCBub3JtYWxpemVkID0ge307XG4gIGxldCBoYXNFeHRlbmRzID0gZmFsc2U7XG4gIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fICYmICFpc0Z1bmN0aW9uKGNvbXApKSB7XG4gICAgY29uc3QgZXh0ZW5kRW1pdHMgPSAocmF3MikgPT4ge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEZyb21FeHRlbmQgPSBub3JtYWxpemVFbWl0c09wdGlvbnMocmF3MiwgYXBwQ29udGV4dCwgdHJ1ZSk7XG4gICAgICBpZiAobm9ybWFsaXplZEZyb21FeHRlbmQpIHtcbiAgICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XG4gICAgICAgIGV4dGVuZChub3JtYWxpemVkLCBub3JtYWxpemVkRnJvbUV4dGVuZCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoIWFzTWl4aW4gJiYgYXBwQ29udGV4dC5taXhpbnMubGVuZ3RoKSB7XG4gICAgICBhcHBDb250ZXh0Lm1peGlucy5mb3JFYWNoKGV4dGVuZEVtaXRzKTtcbiAgICB9XG4gICAgaWYgKGNvbXAuZXh0ZW5kcykge1xuICAgICAgZXh0ZW5kRW1pdHMoY29tcC5leHRlbmRzKTtcbiAgICB9XG4gICAgaWYgKGNvbXAubWl4aW5zKSB7XG4gICAgICBjb21wLm1peGlucy5mb3JFYWNoKGV4dGVuZEVtaXRzKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFyYXcgJiYgIWhhc0V4dGVuZHMpIHtcbiAgICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICAgIGNhY2hlLnNldChjb21wLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgIHJhdy5mb3JFYWNoKChrZXkpID0+IG5vcm1hbGl6ZWRba2V5XSA9IG51bGwpO1xuICB9IGVsc2Uge1xuICAgIGV4dGVuZChub3JtYWxpemVkLCByYXcpO1xuICB9XG4gIGlmIChpc09iamVjdChjb21wKSkge1xuICAgIGNhY2hlLnNldChjb21wLCBub3JtYWxpemVkKTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZDtcbn1cbmZ1bmN0aW9uIGlzRW1pdExpc3RlbmVyKG9wdGlvbnMsIGtleSkge1xuICBpZiAoIW9wdGlvbnMgfHwgIWlzT24oa2V5KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBrZXkgPSBrZXkuc2xpY2UoMikucmVwbGFjZSgvT25jZSQvLCBcIlwiKTtcbiAgcmV0dXJuIGhhc093bihvcHRpb25zLCBrZXlbMF0udG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgxKSkgfHwgaGFzT3duKG9wdGlvbnMsIGh5cGhlbmF0ZShrZXkpKSB8fCBoYXNPd24ob3B0aW9ucywga2V5KTtcbn1cblxubGV0IGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcbmZ1bmN0aW9uIG1hcmtBdHRyc0FjY2Vzc2VkKCkge1xuICBhY2Nlc3NlZEF0dHJzID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpIHtcbiAgY29uc3Qge1xuICAgIHR5cGU6IENvbXBvbmVudCxcbiAgICB2bm9kZSxcbiAgICBwcm94eSxcbiAgICB3aXRoUHJveHksXG4gICAgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSxcbiAgICBzbG90cyxcbiAgICBhdHRycyxcbiAgICBlbWl0LFxuICAgIHJlbmRlcixcbiAgICByZW5kZXJDYWNoZSxcbiAgICBwcm9wcyxcbiAgICBkYXRhLFxuICAgIHNldHVwU3RhdGUsXG4gICAgY3R4LFxuICAgIGluaGVyaXRBdHRyc1xuICB9ID0gaW5zdGFuY2U7XG4gIGNvbnN0IHByZXYgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpO1xuICBsZXQgcmVzdWx0O1xuICBsZXQgZmFsbHRocm91Z2hBdHRycztcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICBhY2Nlc3NlZEF0dHJzID0gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgNCkge1xuICAgICAgY29uc3QgcHJveHlUb1VzZSA9IHdpdGhQcm94eSB8fCBwcm94eTtcbiAgICAgIGNvbnN0IHRoaXNQcm94eSA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgc2V0dXBTdGF0ZS5fX2lzU2NyaXB0U2V0dXAgPyBuZXcgUHJveHkocHJveHlUb1VzZSwge1xuICAgICAgICBnZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYFByb3BlcnR5ICcke1N0cmluZyhcbiAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICApfScgd2FzIGFjY2Vzc2VkIHZpYSAndGhpcycuIEF2b2lkIHVzaW5nICd0aGlzJyBpbiB0ZW1wbGF0ZXMuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcik7XG4gICAgICAgIH1cbiAgICAgIH0pIDogcHJveHlUb1VzZTtcbiAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKFxuICAgICAgICByZW5kZXIuY2FsbChcbiAgICAgICAgICB0aGlzUHJveHksXG4gICAgICAgICAgcHJveHlUb1VzZSxcbiAgICAgICAgICByZW5kZXJDYWNoZSxcbiAgICAgICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gc2hhbGxvd1JlYWRvbmx5KHByb3BzKSA6IHByb3BzLFxuICAgICAgICAgIHNldHVwU3RhdGUsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBjdHhcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBhdHRycztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVuZGVyMiA9IENvbXBvbmVudDtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGF0dHJzID09PSBwcm9wcykge1xuICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gbm9ybWFsaXplVk5vZGUoXG4gICAgICAgIHJlbmRlcjIubGVuZ3RoID4gMSA/IHJlbmRlcjIoXG4gICAgICAgICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IHNoYWxsb3dSZWFkb25seShwcm9wcykgOiBwcm9wcyxcbiAgICAgICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8ge1xuICAgICAgICAgICAgZ2V0IGF0dHJzKCkge1xuICAgICAgICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xuICAgICAgICAgICAgICByZXR1cm4gc2hhbGxvd1JlYWRvbmx5KGF0dHJzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbG90cyxcbiAgICAgICAgICAgIGVtaXRcbiAgICAgICAgICB9IDogeyBhdHRycywgc2xvdHMsIGVtaXQgfVxuICAgICAgICApIDogcmVuZGVyMihcbiAgICAgICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gc2hhbGxvd1JlYWRvbmx5KHByb3BzKSA6IHByb3BzLFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBDb21wb25lbnQucHJvcHMgPyBhdHRycyA6IGdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaChhdHRycyk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBibG9ja1N0YWNrLmxlbmd0aCA9IDA7XG4gICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMSk7XG4gICAgcmVzdWx0ID0gY3JlYXRlVk5vZGUoQ29tbWVudCk7XG4gIH1cbiAgbGV0IHJvb3QgPSByZXN1bHQ7XG4gIGxldCBzZXRSb290ID0gdm9pZCAwO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiByZXN1bHQucGF0Y2hGbGFnID4gMCAmJiByZXN1bHQucGF0Y2hGbGFnICYgMjA0OCkge1xuICAgIFtyb290LCBzZXRSb290XSA9IGdldENoaWxkUm9vdChyZXN1bHQpO1xuICB9XG4gIGlmIChmYWxsdGhyb3VnaEF0dHJzICYmIGluaGVyaXRBdHRycyAhPT0gZmFsc2UpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmFsbHRocm91Z2hBdHRycyk7XG4gICAgY29uc3QgeyBzaGFwZUZsYWcgfSA9IHJvb3Q7XG4gICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICBpZiAoc2hhcGVGbGFnICYgKDEgfCA2KSkge1xuICAgICAgICBpZiAocHJvcHNPcHRpb25zICYmIGtleXMuc29tZShpc01vZGVsTGlzdGVuZXIpKSB7XG4gICAgICAgICAgZmFsbHRocm91Z2hBdHRycyA9IGZpbHRlck1vZGVsTGlzdGVuZXJzKFxuICAgICAgICAgICAgZmFsbHRocm91Z2hBdHRycyxcbiAgICAgICAgICAgIHByb3BzT3B0aW9uc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcm9vdCA9IGNsb25lVk5vZGUocm9vdCwgZmFsbHRocm91Z2hBdHRycywgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFhY2Nlc3NlZEF0dHJzICYmIHJvb3QudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICBjb25zdCBhbGxBdHRycyA9IE9iamVjdC5rZXlzKGF0dHJzKTtcbiAgICAgICAgY29uc3QgZXZlbnRBdHRycyA9IFtdO1xuICAgICAgICBjb25zdCBleHRyYUF0dHJzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYWxsQXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gYWxsQXR0cnNbaV07XG4gICAgICAgICAgaWYgKGlzT24oa2V5KSkge1xuICAgICAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSkge1xuICAgICAgICAgICAgICBldmVudEF0dHJzLnB1c2goa2V5WzJdLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleHRyYUF0dHJzLnB1c2goa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dHJhQXR0cnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYEV4dHJhbmVvdXMgbm9uLXByb3BzIGF0dHJpYnV0ZXMgKCR7ZXh0cmFBdHRycy5qb2luKFwiLCBcIil9KSB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnRBdHRycy5sZW5ndGgpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgRXh0cmFuZW91cyBub24tZW1pdHMgZXZlbnQgbGlzdGVuZXJzICgke2V2ZW50QXR0cnMuam9pbihcIiwgXCIpfSkgd2VyZSBwYXNzZWQgdG8gY29tcG9uZW50IGJ1dCBjb3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgYmVjYXVzZSBjb21wb25lbnQgcmVuZGVycyBmcmFnbWVudCBvciB0ZXh0IHJvb3Qgbm9kZXMuIElmIHRoZSBsaXN0ZW5lciBpcyBpbnRlbmRlZCB0byBiZSBhIGNvbXBvbmVudCBjdXN0b20gZXZlbnQgbGlzdGVuZXIgb25seSwgZGVjbGFyZSBpdCB1c2luZyB0aGUgXCJlbWl0c1wiIG9wdGlvbi5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodm5vZGUuZGlycykge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFpc0VsZW1lbnRSb290KHJvb3QpKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGBSdW50aW1lIGRpcmVjdGl2ZSB1c2VkIG9uIGNvbXBvbmVudCB3aXRoIG5vbi1lbGVtZW50IHJvb3Qgbm9kZS4gVGhlIGRpcmVjdGl2ZXMgd2lsbCBub3QgZnVuY3Rpb24gYXMgaW50ZW5kZWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgcm9vdCA9IGNsb25lVk5vZGUocm9vdCwgbnVsbCwgZmFsc2UsIHRydWUpO1xuICAgIHJvb3QuZGlycyA9IHJvb3QuZGlycyA/IHJvb3QuZGlycy5jb25jYXQodm5vZGUuZGlycykgOiB2bm9kZS5kaXJzO1xuICB9XG4gIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYENvbXBvbmVudCBpbnNpZGUgPFRyYW5zaXRpb24+IHJlbmRlcnMgbm9uLWVsZW1lbnQgcm9vdCBub2RlIHRoYXQgY2Fubm90IGJlIGFuaW1hdGVkLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHNldFRyYW5zaXRpb25Ib29rcyhyb290LCB2bm9kZS50cmFuc2l0aW9uKTtcbiAgfVxuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBzZXRSb290KSB7XG4gICAgc2V0Um9vdChyb290KTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSByb290O1xuICB9XG4gIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IGdldENoaWxkUm9vdCA9ICh2bm9kZSkgPT4ge1xuICBjb25zdCByYXdDaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICBjb25zdCBkeW5hbWljQ2hpbGRyZW4gPSB2bm9kZS5keW5hbWljQ2hpbGRyZW47XG4gIGNvbnN0IGNoaWxkUm9vdCA9IGZpbHRlclNpbmdsZVJvb3QocmF3Q2hpbGRyZW4sIGZhbHNlKTtcbiAgaWYgKCFjaGlsZFJvb3QpIHtcbiAgICByZXR1cm4gW3Zub2RlLCB2b2lkIDBdO1xuICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgY2hpbGRSb290LnBhdGNoRmxhZyA+IDAgJiYgY2hpbGRSb290LnBhdGNoRmxhZyAmIDIwNDgpIHtcbiAgICByZXR1cm4gZ2V0Q2hpbGRSb290KGNoaWxkUm9vdCk7XG4gIH1cbiAgY29uc3QgaW5kZXggPSByYXdDaGlsZHJlbi5pbmRleE9mKGNoaWxkUm9vdCk7XG4gIGNvbnN0IGR5bmFtaWNJbmRleCA9IGR5bmFtaWNDaGlsZHJlbiA/IGR5bmFtaWNDaGlsZHJlbi5pbmRleE9mKGNoaWxkUm9vdCkgOiAtMTtcbiAgY29uc3Qgc2V0Um9vdCA9ICh1cGRhdGVkUm9vdCkgPT4ge1xuICAgIHJhd0NoaWxkcmVuW2luZGV4XSA9IHVwZGF0ZWRSb290O1xuICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgIGlmIChkeW5hbWljSW5kZXggPiAtMSkge1xuICAgICAgICBkeW5hbWljQ2hpbGRyZW5bZHluYW1pY0luZGV4XSA9IHVwZGF0ZWRSb290O1xuICAgICAgfSBlbHNlIGlmICh1cGRhdGVkUm9vdC5wYXRjaEZsYWcgPiAwKSB7XG4gICAgICAgIHZub2RlLmR5bmFtaWNDaGlsZHJlbiA9IFsuLi5keW5hbWljQ2hpbGRyZW4sIHVwZGF0ZWRSb290XTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBbbm9ybWFsaXplVk5vZGUoY2hpbGRSb290KSwgc2V0Um9vdF07XG59O1xuZnVuY3Rpb24gZmlsdGVyU2luZ2xlUm9vdChjaGlsZHJlbiwgcmVjdXJzZSA9IHRydWUpIHtcbiAgbGV0IHNpbmdsZVJvb3Q7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1ZOb2RlKGNoaWxkKSkge1xuICAgICAgaWYgKGNoaWxkLnR5cGUgIT09IENvbW1lbnQgfHwgY2hpbGQuY2hpbGRyZW4gPT09IFwidi1pZlwiKSB7XG4gICAgICAgIGlmIChzaW5nbGVSb290KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNpbmdsZVJvb3QgPSBjaGlsZDtcbiAgICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiByZWN1cnNlICYmIHNpbmdsZVJvb3QucGF0Y2hGbGFnID4gMCAmJiBzaW5nbGVSb290LnBhdGNoRmxhZyAmIDIwNDgpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJTaW5nbGVSb290KHNpbmdsZVJvb3QuY2hpbGRyZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIHJldHVybiBzaW5nbGVSb290O1xufVxuY29uc3QgZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoID0gKGF0dHJzKSA9PiB7XG4gIGxldCByZXM7XG4gIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgaWYgKGtleSA9PT0gXCJjbGFzc1wiIHx8IGtleSA9PT0gXCJzdHlsZVwiIHx8IGlzT24oa2V5KSkge1xuICAgICAgKHJlcyB8fCAocmVzID0ge30pKVtrZXldID0gYXR0cnNba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5jb25zdCBmaWx0ZXJNb2RlbExpc3RlbmVycyA9IChhdHRycywgcHJvcHMpID0+IHtcbiAgY29uc3QgcmVzID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSB8fCAhKGtleS5zbGljZSg5KSBpbiBwcm9wcykpIHtcbiAgICAgIHJlc1trZXldID0gYXR0cnNba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5jb25zdCBpc0VsZW1lbnRSb290ID0gKHZub2RlKSA9PiB7XG4gIHJldHVybiB2bm9kZS5zaGFwZUZsYWcgJiAoNiB8IDEpIHx8IHZub2RlLnR5cGUgPT09IENvbW1lbnQ7XG59O1xuZnVuY3Rpb24gc2hvdWxkVXBkYXRlQ29tcG9uZW50KHByZXZWTm9kZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpIHtcbiAgY29uc3QgeyBwcm9wczogcHJldlByb3BzLCBjaGlsZHJlbjogcHJldkNoaWxkcmVuLCBjb21wb25lbnQgfSA9IHByZXZWTm9kZTtcbiAgY29uc3QgeyBwcm9wczogbmV4dFByb3BzLCBjaGlsZHJlbjogbmV4dENoaWxkcmVuLCBwYXRjaEZsYWcgfSA9IG5leHRWTm9kZTtcbiAgY29uc3QgZW1pdHMgPSBjb21wb25lbnQuZW1pdHNPcHRpb25zO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAocHJldkNoaWxkcmVuIHx8IG5leHRDaGlsZHJlbikgJiYgaXNIbXJVcGRhdGluZykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChuZXh0Vk5vZGUuZGlycyB8fCBuZXh0Vk5vZGUudHJhbnNpdGlvbikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChvcHRpbWl6ZWQgJiYgcGF0Y2hGbGFnID49IDApIHtcbiAgICBpZiAocGF0Y2hGbGFnICYgMTAyNCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChwYXRjaEZsYWcgJiAxNikge1xuICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuICEhbmV4dFByb3BzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHMpO1xuICAgIH0gZWxzZSBpZiAocGF0Y2hGbGFnICYgOCkge1xuICAgICAgY29uc3QgZHluYW1pY1Byb3BzID0gbmV4dFZOb2RlLmR5bmFtaWNQcm9wcztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Byb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGR5bmFtaWNQcm9wc1tpXTtcbiAgICAgICAgaWYgKG5leHRQcm9wc1trZXldICE9PSBwcmV2UHJvcHNba2V5XSAmJiAhaXNFbWl0TGlzdGVuZXIoZW1pdHMsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAocHJldkNoaWxkcmVuIHx8IG5leHRDaGlsZHJlbikge1xuICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gfHwgIW5leHRDaGlsZHJlbi4kc3RhYmxlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJldlByb3BzID09PSBuZXh0UHJvcHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFwcmV2UHJvcHMpIHtcbiAgICAgIHJldHVybiAhIW5leHRQcm9wcztcbiAgICB9XG4gICAgaWYgKCFuZXh0UHJvcHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0cyk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0c09wdGlvbnMpIHtcbiAgY29uc3QgbmV4dEtleXMgPSBPYmplY3Qua2V5cyhuZXh0UHJvcHMpO1xuICBpZiAobmV4dEtleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhwcmV2UHJvcHMpLmxlbmd0aCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbmV4dEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSBuZXh0S2V5c1tpXTtcbiAgICBpZiAobmV4dFByb3BzW2tleV0gIT09IHByZXZQcm9wc1trZXldICYmICFpc0VtaXRMaXN0ZW5lcihlbWl0c09wdGlvbnMsIGtleSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiB1cGRhdGVIT0NIb3N0RWwoeyB2bm9kZSwgcGFyZW50IH0sIGVsKSB7XG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBjb25zdCByb290ID0gcGFyZW50LnN1YlRyZWU7XG4gICAgaWYgKHJvb3Quc3VzcGVuc2UgJiYgcm9vdC5zdXNwZW5zZS5hY3RpdmVCcmFuY2ggPT09IHZub2RlKSB7XG4gICAgICByb290LmVsID0gdm5vZGUuZWw7XG4gICAgfVxuICAgIGlmIChyb290ID09PSB2bm9kZSkge1xuICAgICAgKHZub2RlID0gcGFyZW50LnZub2RlKS5lbCA9IGVsO1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IGlzU3VzcGVuc2UgPSAodHlwZSkgPT4gdHlwZS5fX2lzU3VzcGVuc2U7XG5sZXQgc3VzcGVuc2VJZCA9IDA7XG5jb25zdCBTdXNwZW5zZUltcGwgPSB7XG4gIG5hbWU6IFwiU3VzcGVuc2VcIixcbiAgLy8gSW4gb3JkZXIgdG8gbWFrZSBTdXNwZW5zZSB0cmVlLXNoYWthYmxlLCB3ZSBuZWVkIHRvIGF2b2lkIGltcG9ydGluZyBpdFxuICAvLyBkaXJlY3RseSBpbiB0aGUgcmVuZGVyZXIuIFRoZSByZW5kZXJlciBjaGVja3MgZm9yIHRoZSBfX2lzU3VzcGVuc2UgZmxhZ1xuICAvLyBvbiBhIHZub2RlJ3MgdHlwZSBhbmQgY2FsbHMgdGhlIGBwcm9jZXNzYCBtZXRob2QsIHBhc3NpbmcgaW4gcmVuZGVyZXJcbiAgLy8gaW50ZXJuYWxzLlxuICBfX2lzU3VzcGVuc2U6IHRydWUsXG4gIHByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpIHtcbiAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgbW91bnRTdXNwZW5zZShcbiAgICAgICAgbjIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICByZW5kZXJlckludGVybmFsc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLmRlcHMgPiAwICYmICFuMS5zdXNwZW5zZS5pc0luRmFsbGJhY2spIHtcbiAgICAgICAgbjIuc3VzcGVuc2UgPSBuMS5zdXNwZW5zZTtcbiAgICAgICAgbjIuc3VzcGVuc2Uudm5vZGUgPSBuMjtcbiAgICAgICAgbjIuZWwgPSBuMS5lbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGF0Y2hTdXNwZW5zZShcbiAgICAgICAgbjEsXG4gICAgICAgIG4yLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICByZW5kZXJlckludGVybmFsc1xuICAgICAgKTtcbiAgICB9XG4gIH0sXG4gIGh5ZHJhdGU6IGh5ZHJhdGVTdXNwZW5zZSxcbiAgbm9ybWFsaXplOiBub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuXG59O1xuY29uc3QgU3VzcGVuc2UgPSBTdXNwZW5zZUltcGwgO1xuZnVuY3Rpb24gdHJpZ2dlckV2ZW50KHZub2RlLCBuYW1lKSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wc1tuYW1lXTtcbiAgaWYgKGlzRnVuY3Rpb24oZXZlbnRMaXN0ZW5lcikpIHtcbiAgICBldmVudExpc3RlbmVyKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIG1vdW50U3VzcGVuc2Uodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscykge1xuICBjb25zdCB7XG4gICAgcDogcGF0Y2gsXG4gICAgbzogeyBjcmVhdGVFbGVtZW50IH1cbiAgfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xuICBjb25zdCBoaWRkZW5Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBzdXNwZW5zZSA9IHZub2RlLnN1c3BlbnNlID0gY3JlYXRlU3VzcGVuc2VCb3VuZGFyeShcbiAgICB2bm9kZSxcbiAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgY29udGFpbmVyLFxuICAgIGhpZGRlbkNvbnRhaW5lcixcbiAgICBhbmNob3IsXG4gICAgbmFtZXNwYWNlLFxuICAgIHNsb3RTY29wZUlkcyxcbiAgICBvcHRpbWl6ZWQsXG4gICAgcmVuZGVyZXJJbnRlcm5hbHNcbiAgKTtcbiAgcGF0Y2goXG4gICAgbnVsbCxcbiAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gdm5vZGUuc3NDb250ZW50LFxuICAgIGhpZGRlbkNvbnRhaW5lcixcbiAgICBudWxsLFxuICAgIHBhcmVudENvbXBvbmVudCxcbiAgICBzdXNwZW5zZSxcbiAgICBuYW1lc3BhY2UsXG4gICAgc2xvdFNjb3BlSWRzXG4gICk7XG4gIGlmIChzdXNwZW5zZS5kZXBzID4gMCkge1xuICAgIHRyaWdnZXJFdmVudCh2bm9kZSwgXCJvblBlbmRpbmdcIik7XG4gICAgdHJpZ2dlckV2ZW50KHZub2RlLCBcIm9uRmFsbGJhY2tcIik7XG4gICAgcGF0Y2goXG4gICAgICBudWxsLFxuICAgICAgdm5vZGUuc3NGYWxsYmFjayxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGFuY2hvcixcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIG51bGwsXG4gICAgICAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgbmFtZXNwYWNlLFxuICAgICAgc2xvdFNjb3BlSWRzXG4gICAgKTtcbiAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIHZub2RlLnNzRmFsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHN1c3BlbnNlLnJlc29sdmUoZmFsc2UsIHRydWUpO1xuICB9XG59XG5mdW5jdGlvbiBwYXRjaFN1c3BlbnNlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgeyBwOiBwYXRjaCwgdW06IHVubW91bnQsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0pIHtcbiAgY29uc3Qgc3VzcGVuc2UgPSBuMi5zdXNwZW5zZSA9IG4xLnN1c3BlbnNlO1xuICBzdXNwZW5zZS52bm9kZSA9IG4yO1xuICBuMi5lbCA9IG4xLmVsO1xuICBjb25zdCBuZXdCcmFuY2ggPSBuMi5zc0NvbnRlbnQ7XG4gIGNvbnN0IG5ld0ZhbGxiYWNrID0gbjIuc3NGYWxsYmFjaztcbiAgY29uc3QgeyBhY3RpdmVCcmFuY2gsIHBlbmRpbmdCcmFuY2gsIGlzSW5GYWxsYmFjaywgaXNIeWRyYXRpbmcgfSA9IHN1c3BlbnNlO1xuICBpZiAocGVuZGluZ0JyYW5jaCkge1xuICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBuZXdCcmFuY2g7XG4gICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIHBlbmRpbmdCcmFuY2gpKSB7XG4gICAgICBwYXRjaChcbiAgICAgICAgcGVuZGluZ0JyYW5jaCxcbiAgICAgICAgbmV3QnJhbmNoLFxuICAgICAgICBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNJbkZhbGxiYWNrKSB7XG4gICAgICAgIGlmICghaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgICBwYXRjaChcbiAgICAgICAgICAgIGFjdGl2ZUJyYW5jaCxcbiAgICAgICAgICAgIG5ld0ZhbGxiYWNrLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3RmFsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCA9IHN1c3BlbnNlSWQrKztcbiAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICBzdXNwZW5zZS5pc0h5ZHJhdGluZyA9IGZhbHNlO1xuICAgICAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggPSBwZW5kaW5nQnJhbmNoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW5tb3VudChwZW5kaW5nQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlKTtcbiAgICAgIH1cbiAgICAgIHN1c3BlbnNlLmRlcHMgPSAwO1xuICAgICAgc3VzcGVuc2UuZWZmZWN0cy5sZW5ndGggPSAwO1xuICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmIChpc0luRmFsbGJhY2spIHtcbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBuZXdCcmFuY2gsXG4gICAgICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcbiAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgICAgICBuZXdGYWxsYmFjayxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhY3RpdmVCcmFuY2ggJiYgaXNTYW1lVk5vZGVUeXBlKG5ld0JyYW5jaCwgYWN0aXZlQnJhbmNoKSkge1xuICAgICAgICBwYXRjaChcbiAgICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgICAgbmV3QnJhbmNoLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRjaChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG5ld0JyYW5jaCxcbiAgICAgICAgICBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYWN0aXZlQnJhbmNoICYmIGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIGFjdGl2ZUJyYW5jaCkpIHtcbiAgICAgIHBhdGNoKFxuICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgIG5ld0JyYW5jaCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0JyYW5jaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyaWdnZXJFdmVudChuMiwgXCJvblBlbmRpbmdcIik7XG4gICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xuICAgICAgaWYgKG5ld0JyYW5jaC5zaGFwZUZsYWcgJiA1MTIpIHtcbiAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkID0gbmV3QnJhbmNoLmNvbXBvbmVudC5zdXNwZW5zZUlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkID0gc3VzcGVuc2VJZCsrO1xuICAgICAgfVxuICAgICAgcGF0Y2goXG4gICAgICAgIG51bGwsXG4gICAgICAgIG5ld0JyYW5jaCxcbiAgICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7IHRpbWVvdXQsIHBlbmRpbmdJZCB9ID0gc3VzcGVuc2U7XG4gICAgICAgIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdJZCA9PT0gcGVuZGluZ0lkKSB7XG4gICAgICAgICAgICAgIHN1c3BlbnNlLmZhbGxiYWNrKG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aW1lb3V0ID09PSAwKSB7XG4gICAgICAgICAgc3VzcGVuc2UuZmFsbGJhY2sobmV3RmFsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5sZXQgaGFzV2FybmVkID0gZmFsc2U7XG5mdW5jdGlvbiBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaXNIeWRyYXRpbmcgPSBmYWxzZSkge1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB0cnVlICYmICFoYXNXYXJuZWQpIHtcbiAgICBoYXNXYXJuZWQgPSB0cnVlO1xuICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gXCJpbmZvXCIgOiBcImxvZ1wiXShcbiAgICAgIGA8U3VzcGVuc2U+IGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIGFuZCBpdHMgQVBJIHdpbGwgbGlrZWx5IGNoYW5nZS5gXG4gICAgKTtcbiAgfVxuICBjb25zdCB7XG4gICAgcDogcGF0Y2gsXG4gICAgbTogbW92ZSxcbiAgICB1bTogdW5tb3VudCxcbiAgICBuOiBuZXh0LFxuICAgIG86IHsgcGFyZW50Tm9kZSwgcmVtb3ZlIH1cbiAgfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xuICBsZXQgcGFyZW50U3VzcGVuc2VJZDtcbiAgY29uc3QgaXNTdXNwZW5zaWJsZSA9IGlzVk5vZGVTdXNwZW5zaWJsZSh2bm9kZSk7XG4gIGlmIChpc1N1c3BlbnNpYmxlKSB7XG4gICAgaWYgKHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcbiAgICAgIHBhcmVudFN1c3BlbnNlSWQgPSBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nSWQ7XG4gICAgICBwYXJlbnRTdXNwZW5zZS5kZXBzKys7XG4gICAgfVxuICB9XG4gIGNvbnN0IHRpbWVvdXQgPSB2bm9kZS5wcm9wcyA/IHRvTnVtYmVyKHZub2RlLnByb3BzLnRpbWVvdXQpIDogdm9pZCAwO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIGFzc2VydE51bWJlcih0aW1lb3V0LCBgU3VzcGVuc2UgdGltZW91dGApO1xuICB9XG4gIGNvbnN0IGluaXRpYWxBbmNob3IgPSBhbmNob3I7XG4gIGNvbnN0IHN1c3BlbnNlID0ge1xuICAgIHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50U3VzcGVuc2UsXG4gICAgcGFyZW50Q29tcG9uZW50LFxuICAgIG5hbWVzcGFjZSxcbiAgICBjb250YWluZXIsXG4gICAgaGlkZGVuQ29udGFpbmVyLFxuICAgIGRlcHM6IDAsXG4gICAgcGVuZGluZ0lkOiBzdXNwZW5zZUlkKyssXG4gICAgdGltZW91dDogdHlwZW9mIHRpbWVvdXQgPT09IFwibnVtYmVyXCIgPyB0aW1lb3V0IDogLTEsXG4gICAgYWN0aXZlQnJhbmNoOiBudWxsLFxuICAgIHBlbmRpbmdCcmFuY2g6IG51bGwsXG4gICAgaXNJbkZhbGxiYWNrOiAhaXNIeWRyYXRpbmcsXG4gICAgaXNIeWRyYXRpbmcsXG4gICAgaXNVbm1vdW50ZWQ6IGZhbHNlLFxuICAgIGVmZmVjdHM6IFtdLFxuICAgIHJlc29sdmUocmVzdW1lID0gZmFsc2UsIHN5bmMgPSBmYWxzZSkge1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgaWYgKCFyZXN1bWUgJiYgIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCB3aXRob3V0IGEgcGVuZGluZyBicmFuY2guYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1c3BlbnNlLmlzVW5tb3VudGVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYHN1c3BlbnNlLnJlc29sdmUoKSBpcyBjYWxsZWQgb24gYW4gYWxyZWFkeSB1bm1vdW50ZWQgc3VzcGVuc2UgYm91bmRhcnkuYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdm5vZGU6IHZub2RlMixcbiAgICAgICAgYWN0aXZlQnJhbmNoLFxuICAgICAgICBwZW5kaW5nQnJhbmNoLFxuICAgICAgICBwZW5kaW5nSWQsXG4gICAgICAgIGVmZmVjdHMsXG4gICAgICAgIHBhcmVudENvbXBvbmVudDogcGFyZW50Q29tcG9uZW50MixcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIyXG4gICAgICB9ID0gc3VzcGVuc2U7XG4gICAgICBsZXQgZGVsYXlFbnRlciA9IGZhbHNlO1xuICAgICAgaWYgKHN1c3BlbnNlLmlzSHlkcmF0aW5nKSB7XG4gICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFyZXN1bWUpIHtcbiAgICAgICAgZGVsYXlFbnRlciA9IGFjdGl2ZUJyYW5jaCAmJiBwZW5kaW5nQnJhbmNoLnRyYW5zaXRpb24gJiYgcGVuZGluZ0JyYW5jaC50cmFuc2l0aW9uLm1vZGUgPT09IFwib3V0LWluXCI7XG4gICAgICAgIGlmIChkZWxheUVudGVyKSB7XG4gICAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nSWQgPT09IHN1c3BlbnNlLnBlbmRpbmdJZCkge1xuICAgICAgICAgICAgICBtb3ZlKFxuICAgICAgICAgICAgICAgIHBlbmRpbmdCcmFuY2gsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyMixcbiAgICAgICAgICAgICAgICBhbmNob3IgPT09IGluaXRpYWxBbmNob3IgPyBuZXh0KGFjdGl2ZUJyYW5jaCkgOiBhbmNob3IsXG4gICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGVmZmVjdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGl2ZUJyYW5jaCkge1xuICAgICAgICAgIGlmIChwYXJlbnROb2RlKGFjdGl2ZUJyYW5jaC5lbCkgPT09IGNvbnRhaW5lcjIpIHtcbiAgICAgICAgICAgIGFuY2hvciA9IG5leHQoYWN0aXZlQnJhbmNoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdW5tb3VudChhY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudDIsIHN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlbGF5RW50ZXIpIHtcbiAgICAgICAgICBtb3ZlKHBlbmRpbmdCcmFuY2gsIGNvbnRhaW5lcjIsIGFuY2hvciwgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgcGVuZGluZ0JyYW5jaCk7XG4gICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbnVsbDtcbiAgICAgIHN1c3BlbnNlLmlzSW5GYWxsYmFjayA9IGZhbHNlO1xuICAgICAgbGV0IHBhcmVudCA9IHN1c3BlbnNlLnBhcmVudDtcbiAgICAgIGxldCBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSBmYWxzZTtcbiAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgICAgcGFyZW50LmVmZmVjdHMucHVzaCguLi5lZmZlY3RzKTtcbiAgICAgICAgICBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIWhhc1VucmVzb2x2ZWRBbmNlc3RvciAmJiAhZGVsYXlFbnRlcikge1xuICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGVmZmVjdHMpO1xuICAgICAgfVxuICAgICAgc3VzcGVuc2UuZWZmZWN0cyA9IFtdO1xuICAgICAgaWYgKGlzU3VzcGVuc2libGUpIHtcbiAgICAgICAgaWYgKHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggJiYgcGFyZW50U3VzcGVuc2VJZCA9PT0gcGFyZW50U3VzcGVuc2UucGVuZGluZ0lkKSB7XG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UuZGVwcy0tO1xuICAgICAgICAgIGlmIChwYXJlbnRTdXNwZW5zZS5kZXBzID09PSAwICYmICFzeW5jKSB7XG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0cmlnZ2VyRXZlbnQodm5vZGUyLCBcIm9uUmVzb2x2ZVwiKTtcbiAgICB9LFxuICAgIGZhbGxiYWNrKGZhbGxiYWNrVk5vZGUpIHtcbiAgICAgIGlmICghc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7IHZub2RlOiB2bm9kZTIsIGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50OiBwYXJlbnRDb21wb25lbnQyLCBjb250YWluZXI6IGNvbnRhaW5lcjIsIG5hbWVzcGFjZTogbmFtZXNwYWNlMiB9ID0gc3VzcGVuc2U7XG4gICAgICB0cmlnZ2VyRXZlbnQodm5vZGUyLCBcIm9uRmFsbGJhY2tcIik7XG4gICAgICBjb25zdCBhbmNob3IyID0gbmV4dChhY3RpdmVCcmFuY2gpO1xuICAgICAgY29uc3QgbW91bnRGYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFzdXNwZW5zZS5pc0luRmFsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBmYWxsYmFja1ZOb2RlLFxuICAgICAgICAgIGNvbnRhaW5lcjIsXG4gICAgICAgICAgYW5jaG9yMixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgICAgICBuYW1lc3BhY2UyLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBmYWxsYmFja1ZOb2RlKTtcbiAgICAgIH07XG4gICAgICBjb25zdCBkZWxheUVudGVyID0gZmFsbGJhY2tWTm9kZS50cmFuc2l0aW9uICYmIGZhbGxiYWNrVk5vZGUudHJhbnNpdGlvbi5tb2RlID09PSBcIm91dC1pblwiO1xuICAgICAgaWYgKGRlbGF5RW50ZXIpIHtcbiAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9IG1vdW50RmFsbGJhY2s7XG4gICAgICB9XG4gICAgICBzdXNwZW5zZS5pc0luRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgdW5tb3VudChcbiAgICAgICAgYWN0aXZlQnJhbmNoLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQyLFxuICAgICAgICBudWxsLFxuICAgICAgICAvLyBubyBzdXNwZW5zZSBzbyB1bm1vdW50IGhvb2tzIGZpcmUgbm93XG4gICAgICAgIHRydWVcbiAgICAgICAgLy8gc2hvdWxkUmVtb3ZlXG4gICAgICApO1xuICAgICAgaWYgKCFkZWxheUVudGVyKSB7XG4gICAgICAgIG1vdW50RmFsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vdmUoY29udGFpbmVyMiwgYW5jaG9yMiwgdHlwZSkge1xuICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoICYmIG1vdmUoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCBjb250YWluZXIyLCBhbmNob3IyLCB0eXBlKTtcbiAgICAgIHN1c3BlbnNlLmNvbnRhaW5lciA9IGNvbnRhaW5lcjI7XG4gICAgfSxcbiAgICBuZXh0KCkge1xuICAgICAgcmV0dXJuIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCAmJiBuZXh0KHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCk7XG4gICAgfSxcbiAgICByZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QsIG9wdGltaXplZDIpIHtcbiAgICAgIGNvbnN0IGlzSW5QZW5kaW5nU3VzcGVuc2UgPSAhIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2g7XG4gICAgICBpZiAoaXNJblBlbmRpbmdTdXNwZW5zZSkge1xuICAgICAgICBzdXNwZW5zZS5kZXBzKys7XG4gICAgICB9XG4gICAgICBjb25zdCBoeWRyYXRlZEVsID0gaW5zdGFuY2Uudm5vZGUuZWw7XG4gICAgICBpbnN0YW5jZS5hc3luY0RlcC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIDApO1xuICAgICAgfSkudGhlbigoYXN5bmNTZXR1cFJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQgfHwgc3VzcGVuc2UuaXNVbm1vdW50ZWQgfHwgc3VzcGVuc2UucGVuZGluZ0lkICE9PSBpbnN0YW5jZS5zdXNwZW5zZUlkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCB7IHZub2RlOiB2bm9kZTIgfSA9IGluc3RhbmNlO1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dCh2bm9kZTIpO1xuICAgICAgICB9XG4gICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCBhc3luY1NldHVwUmVzdWx0LCBmYWxzZSk7XG4gICAgICAgIGlmIChoeWRyYXRlZEVsKSB7XG4gICAgICAgICAgdm5vZGUyLmVsID0gaHlkcmF0ZWRFbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9ICFoeWRyYXRlZEVsICYmIGluc3RhbmNlLnN1YlRyZWUuZWw7XG4gICAgICAgIHNldHVwUmVuZGVyRWZmZWN0KFxuICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgIHZub2RlMixcbiAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGhhdmUgYmVlbiBtb3ZlZCBiZWZvcmUgcmVzb2x2ZS5cbiAgICAgICAgICAvLyBpZiB0aGlzIGlzIG5vdCBhIGh5ZHJhdGlvbiwgaW5zdGFuY2Uuc3ViVHJlZSB3aWxsIGJlIHRoZSBjb21tZW50XG4gICAgICAgICAgLy8gcGxhY2Vob2xkZXIuXG4gICAgICAgICAgcGFyZW50Tm9kZShoeWRyYXRlZEVsIHx8IGluc3RhbmNlLnN1YlRyZWUuZWwpLFxuICAgICAgICAgIC8vIGFuY2hvciB3aWxsIG5vdCBiZSB1c2VkIGlmIHRoaXMgaXMgaHlkcmF0aW9uLCBzbyBvbmx5IG5lZWQgdG9cbiAgICAgICAgICAvLyBjb25zaWRlciB0aGUgY29tbWVudCBwbGFjZWhvbGRlciBjYXNlLlxuICAgICAgICAgIGh5ZHJhdGVkRWwgPyBudWxsIDogbmV4dChpbnN0YW5jZS5zdWJUcmVlKSxcbiAgICAgICAgICBzdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgb3B0aW1pemVkMlxuICAgICAgICApO1xuICAgICAgICBpZiAocGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICByZW1vdmUocGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUhPQ0hvc3RFbChpbnN0YW5jZSwgdm5vZGUyLmVsKTtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0luUGVuZGluZ1N1c3BlbnNlICYmIC0tc3VzcGVuc2UuZGVwcyA9PT0gMCkge1xuICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICB1bm1vdW50KHBhcmVudFN1c3BlbnNlMiwgZG9SZW1vdmUpIHtcbiAgICAgIHN1c3BlbnNlLmlzVW5tb3VudGVkID0gdHJ1ZTtcbiAgICAgIGlmIChzdXNwZW5zZS5hY3RpdmVCcmFuY2gpIHtcbiAgICAgICAgdW5tb3VudChcbiAgICAgICAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2gsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlMixcbiAgICAgICAgICBkb1JlbW92ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcbiAgICAgICAgdW5tb3VudChcbiAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZTIsXG4gICAgICAgICAgZG9SZW1vdmVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBzdXNwZW5zZTtcbn1cbmZ1bmN0aW9uIGh5ZHJhdGVTdXNwZW5zZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVOb2RlKSB7XG4gIGNvbnN0IHN1c3BlbnNlID0gdm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KFxuICAgIHZub2RlLFxuICAgIHBhcmVudFN1c3BlbnNlLFxuICAgIHBhcmVudENvbXBvbmVudCxcbiAgICBub2RlLnBhcmVudE5vZGUsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgbnVsbCxcbiAgICBuYW1lc3BhY2UsXG4gICAgc2xvdFNjb3BlSWRzLFxuICAgIG9wdGltaXplZCxcbiAgICByZW5kZXJlckludGVybmFscyxcbiAgICB0cnVlXG4gICk7XG4gIGNvbnN0IHJlc3VsdCA9IGh5ZHJhdGVOb2RlKFxuICAgIG5vZGUsXG4gICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IHZub2RlLnNzQ29udGVudCxcbiAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgc3VzcGVuc2UsXG4gICAgc2xvdFNjb3BlSWRzLFxuICAgIG9wdGltaXplZFxuICApO1xuICBpZiAoc3VzcGVuc2UuZGVwcyA9PT0gMCkge1xuICAgIHN1c3BlbnNlLnJlc29sdmUoZmFsc2UsIHRydWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuKHZub2RlKSB7XG4gIGNvbnN0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiB9ID0gdm5vZGU7XG4gIGNvbnN0IGlzU2xvdENoaWxkcmVuID0gc2hhcGVGbGFnICYgMzI7XG4gIHZub2RlLnNzQ29udGVudCA9IG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChcbiAgICBpc1Nsb3RDaGlsZHJlbiA/IGNoaWxkcmVuLmRlZmF1bHQgOiBjaGlsZHJlblxuICApO1xuICB2bm9kZS5zc0ZhbGxiYWNrID0gaXNTbG90Q2hpbGRyZW4gPyBub3JtYWxpemVTdXNwZW5zZVNsb3QoY2hpbGRyZW4uZmFsbGJhY2spIDogY3JlYXRlVk5vZGUoQ29tbWVudCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZVNsb3Qocykge1xuICBsZXQgYmxvY2s7XG4gIGlmIChpc0Z1bmN0aW9uKHMpKSB7XG4gICAgY29uc3QgdHJhY2tCbG9jayA9IGlzQmxvY2tUcmVlRW5hYmxlZCAmJiBzLl9jO1xuICAgIGlmICh0cmFja0Jsb2NrKSB7XG4gICAgICBzLl9kID0gZmFsc2U7XG4gICAgICBvcGVuQmxvY2soKTtcbiAgICB9XG4gICAgcyA9IHMoKTtcbiAgICBpZiAodHJhY2tCbG9jaykge1xuICAgICAgcy5fZCA9IHRydWU7XG4gICAgICBibG9jayA9IGN1cnJlbnRCbG9jaztcbiAgICAgIGNsb3NlQmxvY2soKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzQXJyYXkocykpIHtcbiAgICBjb25zdCBzaW5nbGVDaGlsZCA9IGZpbHRlclNpbmdsZVJvb3Qocyk7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIXNpbmdsZUNoaWxkICYmIHMuZmlsdGVyKChjaGlsZCkgPT4gY2hpbGQgIT09IE5VTExfRFlOQU1JQ19DT01QT05FTlQpLmxlbmd0aCA+IDApIHtcbiAgICAgIHdhcm4kMShgPFN1c3BlbnNlPiBzbG90cyBleHBlY3QgYSBzaW5nbGUgcm9vdCBub2RlLmApO1xuICAgIH1cbiAgICBzID0gc2luZ2xlQ2hpbGQ7XG4gIH1cbiAgcyA9IG5vcm1hbGl6ZVZOb2RlKHMpO1xuICBpZiAoYmxvY2sgJiYgIXMuZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgcy5keW5hbWljQ2hpbGRyZW4gPSBibG9jay5maWx0ZXIoKGMpID0+IGMgIT09IHMpO1xuICB9XG4gIHJldHVybiBzO1xufVxuZnVuY3Rpb24gcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UoZm4sIHN1c3BlbnNlKSB7XG4gIGlmIChzdXNwZW5zZSAmJiBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goLi4uZm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goZm4pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVBvc3RGbHVzaENiKGZuKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBicmFuY2gpIHtcbiAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gYnJhbmNoO1xuICBjb25zdCB7IHZub2RlLCBwYXJlbnRDb21wb25lbnQgfSA9IHN1c3BlbnNlO1xuICBsZXQgZWwgPSBicmFuY2guZWw7XG4gIHdoaWxlICghZWwgJiYgYnJhbmNoLmNvbXBvbmVudCkge1xuICAgIGJyYW5jaCA9IGJyYW5jaC5jb21wb25lbnQuc3ViVHJlZTtcbiAgICBlbCA9IGJyYW5jaC5lbDtcbiAgfVxuICB2bm9kZS5lbCA9IGVsO1xuICBpZiAocGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC5zdWJUcmVlID09PSB2bm9kZSkge1xuICAgIHBhcmVudENvbXBvbmVudC52bm9kZS5lbCA9IGVsO1xuICAgIHVwZGF0ZUhPQ0hvc3RFbChwYXJlbnRDb21wb25lbnQsIGVsKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNWTm9kZVN1c3BlbnNpYmxlKHZub2RlKSB7XG4gIGNvbnN0IHN1c3BlbnNpYmxlID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMuc3VzcGVuc2libGU7XG4gIHJldHVybiBzdXNwZW5zaWJsZSAhPSBudWxsICYmIHN1c3BlbnNpYmxlICE9PSBmYWxzZTtcbn1cblxuY29uc3QgRnJhZ21lbnQgPSBTeW1ib2wuZm9yKFwidi1mZ3RcIik7XG5jb25zdCBUZXh0ID0gU3ltYm9sLmZvcihcInYtdHh0XCIpO1xuY29uc3QgQ29tbWVudCA9IFN5bWJvbC5mb3IoXCJ2LWNtdFwiKTtcbmNvbnN0IFN0YXRpYyA9IFN5bWJvbC5mb3IoXCJ2LXN0Y1wiKTtcbmNvbnN0IGJsb2NrU3RhY2sgPSBbXTtcbmxldCBjdXJyZW50QmxvY2sgPSBudWxsO1xuZnVuY3Rpb24gb3BlbkJsb2NrKGRpc2FibGVUcmFja2luZyA9IGZhbHNlKSB7XG4gIGJsb2NrU3RhY2sucHVzaChjdXJyZW50QmxvY2sgPSBkaXNhYmxlVHJhY2tpbmcgPyBudWxsIDogW10pO1xufVxuZnVuY3Rpb24gY2xvc2VCbG9jaygpIHtcbiAgYmxvY2tTdGFjay5wb3AoKTtcbiAgY3VycmVudEJsb2NrID0gYmxvY2tTdGFja1tibG9ja1N0YWNrLmxlbmd0aCAtIDFdIHx8IG51bGw7XG59XG5sZXQgaXNCbG9ja1RyZWVFbmFibGVkID0gMTtcbmZ1bmN0aW9uIHNldEJsb2NrVHJhY2tpbmcodmFsdWUpIHtcbiAgaXNCbG9ja1RyZWVFbmFibGVkICs9IHZhbHVlO1xuICBpZiAodmFsdWUgPCAwICYmIGN1cnJlbnRCbG9jaykge1xuICAgIGN1cnJlbnRCbG9jay5oYXNPbmNlID0gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0dXBCbG9jayh2bm9kZSkge1xuICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwID8gY3VycmVudEJsb2NrIHx8IEVNUFRZX0FSUiA6IG51bGw7XG4gIGNsb3NlQmxvY2soKTtcbiAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgY3VycmVudEJsb2NrKSB7XG4gICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xuICB9XG4gIHJldHVybiB2bm9kZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRCbG9jayh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCBzaGFwZUZsYWcpIHtcbiAgcmV0dXJuIHNldHVwQmxvY2soXG4gICAgY3JlYXRlQmFzZVZOb2RlKFxuICAgICAgdHlwZSxcbiAgICAgIHByb3BzLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBwYXRjaEZsYWcsXG4gICAgICBkeW5hbWljUHJvcHMsXG4gICAgICBzaGFwZUZsYWcsXG4gICAgICB0cnVlXG4gICAgKVxuICApO1xufVxuZnVuY3Rpb24gY3JlYXRlQmxvY2sodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcykge1xuICByZXR1cm4gc2V0dXBCbG9jayhcbiAgICBjcmVhdGVWTm9kZShcbiAgICAgIHR5cGUsXG4gICAgICBwcm9wcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgcGF0Y2hGbGFnLFxuICAgICAgZHluYW1pY1Byb3BzLFxuICAgICAgdHJ1ZVxuICAgIClcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzVk5vZGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gdmFsdWUuX192X2lzVk5vZGUgPT09IHRydWUgOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpIHtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgbjIuc2hhcGVGbGFnICYgNiAmJiBuMS5jb21wb25lbnQpIHtcbiAgICBjb25zdCBkaXJ0eUluc3RhbmNlcyA9IGhtckRpcnR5Q29tcG9uZW50cy5nZXQobjIudHlwZSk7XG4gICAgaWYgKGRpcnR5SW5zdGFuY2VzICYmIGRpcnR5SW5zdGFuY2VzLmhhcyhuMS5jb21wb25lbnQpKSB7XG4gICAgICBuMS5zaGFwZUZsYWcgJj0gfjI1NjtcbiAgICAgIG4yLnNoYXBlRmxhZyAmPSB+NTEyO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbjEudHlwZSA9PT0gbjIudHlwZSAmJiBuMS5rZXkgPT09IG4yLmtleTtcbn1cbmxldCB2bm9kZUFyZ3NUcmFuc2Zvcm1lcjtcbmZ1bmN0aW9uIHRyYW5zZm9ybVZOb2RlQXJncyh0cmFuc2Zvcm1lcikge1xuICB2bm9kZUFyZ3NUcmFuc2Zvcm1lciA9IHRyYW5zZm9ybWVyO1xufVxuY29uc3QgY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybSA9ICguLi5hcmdzKSA9PiB7XG4gIHJldHVybiBfY3JlYXRlVk5vZGUoXG4gICAgLi4udm5vZGVBcmdzVHJhbnNmb3JtZXIgPyB2bm9kZUFyZ3NUcmFuc2Zvcm1lcihhcmdzLCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIDogYXJnc1xuICApO1xufTtcbmNvbnN0IG5vcm1hbGl6ZUtleSA9ICh7IGtleSB9KSA9PiBrZXkgIT0gbnVsbCA/IGtleSA6IG51bGw7XG5jb25zdCBub3JtYWxpemVSZWYgPSAoe1xuICByZWYsXG4gIHJlZl9rZXksXG4gIHJlZl9mb3Jcbn0pID0+IHtcbiAgaWYgKHR5cGVvZiByZWYgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZWYgPSBcIlwiICsgcmVmO1xuICB9XG4gIHJldHVybiByZWYgIT0gbnVsbCA/IGlzU3RyaW5nKHJlZikgfHwgaXNSZWYocmVmKSB8fCBpc0Z1bmN0aW9uKHJlZikgPyB7IGk6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSwgcjogcmVmLCBrOiByZWZfa2V5LCBmOiAhIXJlZl9mb3IgfSA6IHJlZiA6IG51bGw7XG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVZOb2RlKHR5cGUsIHByb3BzID0gbnVsbCwgY2hpbGRyZW4gPSBudWxsLCBwYXRjaEZsYWcgPSAwLCBkeW5hbWljUHJvcHMgPSBudWxsLCBzaGFwZUZsYWcgPSB0eXBlID09PSBGcmFnbWVudCA/IDAgOiAxLCBpc0Jsb2NrTm9kZSA9IGZhbHNlLCBuZWVkRnVsbENoaWxkcmVuTm9ybWFsaXphdGlvbiA9IGZhbHNlKSB7XG4gIGNvbnN0IHZub2RlID0ge1xuICAgIF9fdl9pc1ZOb2RlOiB0cnVlLFxuICAgIF9fdl9za2lwOiB0cnVlLFxuICAgIHR5cGUsXG4gICAgcHJvcHMsXG4gICAga2V5OiBwcm9wcyAmJiBub3JtYWxpemVLZXkocHJvcHMpLFxuICAgIHJlZjogcHJvcHMgJiYgbm9ybWFsaXplUmVmKHByb3BzKSxcbiAgICBzY29wZUlkOiBjdXJyZW50U2NvcGVJZCxcbiAgICBzbG90U2NvcGVJZHM6IG51bGwsXG4gICAgY2hpbGRyZW4sXG4gICAgY29tcG9uZW50OiBudWxsLFxuICAgIHN1c3BlbnNlOiBudWxsLFxuICAgIHNzQ29udGVudDogbnVsbCxcbiAgICBzc0ZhbGxiYWNrOiBudWxsLFxuICAgIGRpcnM6IG51bGwsXG4gICAgdHJhbnNpdGlvbjogbnVsbCxcbiAgICBlbDogbnVsbCxcbiAgICBhbmNob3I6IG51bGwsXG4gICAgdGFyZ2V0OiBudWxsLFxuICAgIHRhcmdldFN0YXJ0OiBudWxsLFxuICAgIHRhcmdldEFuY2hvcjogbnVsbCxcbiAgICBzdGF0aWNDb3VudDogMCxcbiAgICBzaGFwZUZsYWcsXG4gICAgcGF0Y2hGbGFnLFxuICAgIGR5bmFtaWNQcm9wcyxcbiAgICBkeW5hbWljQ2hpbGRyZW46IG51bGwsXG4gICAgYXBwQ29udGV4dDogbnVsbCxcbiAgICBjdHg6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZVxuICB9O1xuICBpZiAobmVlZEZ1bGxDaGlsZHJlbk5vcm1hbGl6YXRpb24pIHtcbiAgICBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4pO1xuICAgIGlmIChzaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgIHR5cGUubm9ybWFsaXplKHZub2RlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW4pIHtcbiAgICB2bm9kZS5zaGFwZUZsYWcgfD0gaXNTdHJpbmcoY2hpbGRyZW4pID8gOCA6IDE2O1xuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHZub2RlLmtleSAhPT0gdm5vZGUua2V5KSB7XG4gICAgd2FybiQxKGBWTm9kZSBjcmVhdGVkIHdpdGggaW52YWxpZCBrZXkgKE5hTikuIFZOb2RlIHR5cGU6YCwgdm5vZGUudHlwZSk7XG4gIH1cbiAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgLy8gYXZvaWQgYSBibG9jayBub2RlIGZyb20gdHJhY2tpbmcgaXRzZWxmXG4gICFpc0Jsb2NrTm9kZSAmJiAvLyBoYXMgY3VycmVudCBwYXJlbnQgYmxvY2tcbiAgY3VycmVudEJsb2NrICYmIC8vIHByZXNlbmNlIG9mIGEgcGF0Y2ggZmxhZyBpbmRpY2F0ZXMgdGhpcyBub2RlIG5lZWRzIHBhdGNoaW5nIG9uIHVwZGF0ZXMuXG4gIC8vIGNvbXBvbmVudCBub2RlcyBhbHNvIHNob3VsZCBhbHdheXMgYmUgcGF0Y2hlZCwgYmVjYXVzZSBldmVuIGlmIHRoZVxuICAvLyBjb21wb25lbnQgZG9lc24ndCBuZWVkIHRvIHVwZGF0ZSwgaXQgbmVlZHMgdG8gcGVyc2lzdCB0aGUgaW5zdGFuY2Ugb24gdG9cbiAgLy8gdGhlIG5leHQgdm5vZGUgc28gdGhhdCBpdCBjYW4gYmUgcHJvcGVybHkgdW5tb3VudGVkIGxhdGVyLlxuICAodm5vZGUucGF0Y2hGbGFnID4gMCB8fCBzaGFwZUZsYWcgJiA2KSAmJiAvLyB0aGUgRVZFTlRTIGZsYWcgaXMgb25seSBmb3IgaHlkcmF0aW9uIGFuZCBpZiBpdCBpcyB0aGUgb25seSBmbGFnLCB0aGVcbiAgLy8gdm5vZGUgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGR5bmFtaWMgZHVlIHRvIGhhbmRsZXIgY2FjaGluZy5cbiAgdm5vZGUucGF0Y2hGbGFnICE9PSAzMikge1xuICAgIGN1cnJlbnRCbG9jay5wdXNoKHZub2RlKTtcbiAgfVxuICByZXR1cm4gdm5vZGU7XG59XG5jb25zdCBjcmVhdGVWTm9kZSA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBjcmVhdGVWTm9kZVdpdGhBcmdzVHJhbnNmb3JtIDogX2NyZWF0ZVZOb2RlO1xuZnVuY3Rpb24gX2NyZWF0ZVZOb2RlKHR5cGUsIHByb3BzID0gbnVsbCwgY2hpbGRyZW4gPSBudWxsLCBwYXRjaEZsYWcgPSAwLCBkeW5hbWljUHJvcHMgPSBudWxsLCBpc0Jsb2NrTm9kZSA9IGZhbHNlKSB7XG4gIGlmICghdHlwZSB8fCB0eXBlID09PSBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UKSB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIXR5cGUpIHtcbiAgICAgIHdhcm4kMShgSW52YWxpZCB2bm9kZSB0eXBlIHdoZW4gY3JlYXRpbmcgdm5vZGU6ICR7dHlwZX0uYCk7XG4gICAgfVxuICAgIHR5cGUgPSBDb21tZW50O1xuICB9XG4gIGlmIChpc1ZOb2RlKHR5cGUpKSB7XG4gICAgY29uc3QgY2xvbmVkID0gY2xvbmVWTm9kZShcbiAgICAgIHR5cGUsXG4gICAgICBwcm9wcyxcbiAgICAgIHRydWVcbiAgICAgIC8qIG1lcmdlUmVmOiB0cnVlICovXG4gICAgKTtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKGNsb25lZCwgY2hpbGRyZW4pO1xuICAgIH1cbiAgICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJiAhaXNCbG9ja05vZGUgJiYgY3VycmVudEJsb2NrKSB7XG4gICAgICBpZiAoY2xvbmVkLnNoYXBlRmxhZyAmIDYpIHtcbiAgICAgICAgY3VycmVudEJsb2NrW2N1cnJlbnRCbG9jay5pbmRleE9mKHR5cGUpXSA9IGNsb25lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRCbG9jay5wdXNoKGNsb25lZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNsb25lZC5wYXRjaEZsYWcgPSAtMjtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG4gIGlmIChpc0NsYXNzQ29tcG9uZW50KHR5cGUpKSB7XG4gICAgdHlwZSA9IHR5cGUuX192Y2NPcHRzO1xuICB9XG4gIGlmIChwcm9wcykge1xuICAgIHByb3BzID0gZ3VhcmRSZWFjdGl2ZVByb3BzKHByb3BzKTtcbiAgICBsZXQgeyBjbGFzczoga2xhc3MsIHN0eWxlIH0gPSBwcm9wcztcbiAgICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xuICAgICAgcHJvcHMuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhrbGFzcyk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChzdHlsZSkpIHtcbiAgICAgIGlmIChpc1Byb3h5KHN0eWxlKSAmJiAhaXNBcnJheShzdHlsZSkpIHtcbiAgICAgICAgc3R5bGUgPSBleHRlbmQoe30sIHN0eWxlKTtcbiAgICAgIH1cbiAgICAgIHByb3BzLnN0eWxlID0gbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xuICAgIH1cbiAgfVxuICBjb25zdCBzaGFwZUZsYWcgPSBpc1N0cmluZyh0eXBlKSA/IDEgOiBpc1N1c3BlbnNlKHR5cGUpID8gMTI4IDogaXNUZWxlcG9ydCh0eXBlKSA/IDY0IDogaXNPYmplY3QodHlwZSkgPyA0IDogaXNGdW5jdGlvbih0eXBlKSA/IDIgOiAwO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBzaGFwZUZsYWcgJiA0ICYmIGlzUHJveHkodHlwZSkpIHtcbiAgICB0eXBlID0gdG9SYXcodHlwZSk7XG4gICAgd2FybiQxKFxuICAgICAgYFZ1ZSByZWNlaXZlZCBhIENvbXBvbmVudCB0aGF0IHdhcyBtYWRlIGEgcmVhY3RpdmUgb2JqZWN0LiBUaGlzIGNhbiBsZWFkIHRvIHVubmVjZXNzYXJ5IHBlcmZvcm1hbmNlIG92ZXJoZWFkIGFuZCBzaG91bGQgYmUgYXZvaWRlZCBieSBtYXJraW5nIHRoZSBjb21wb25lbnQgd2l0aCBcXGBtYXJrUmF3XFxgIG9yIHVzaW5nIFxcYHNoYWxsb3dSZWZcXGAgaW5zdGVhZCBvZiBcXGByZWZcXGAuYCxcbiAgICAgIGBcbkNvbXBvbmVudCB0aGF0IHdhcyBtYWRlIHJlYWN0aXZlOiBgLFxuICAgICAgdHlwZVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJhc2VWTm9kZShcbiAgICB0eXBlLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIHBhdGNoRmxhZyxcbiAgICBkeW5hbWljUHJvcHMsXG4gICAgc2hhcGVGbGFnLFxuICAgIGlzQmxvY2tOb2RlLFxuICAgIHRydWVcbiAgKTtcbn1cbmZ1bmN0aW9uIGd1YXJkUmVhY3RpdmVQcm9wcyhwcm9wcykge1xuICBpZiAoIXByb3BzKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIGlzUHJveHkocHJvcHMpIHx8IGlzSW50ZXJuYWxPYmplY3QocHJvcHMpID8gZXh0ZW5kKHt9LCBwcm9wcykgOiBwcm9wcztcbn1cbmZ1bmN0aW9uIGNsb25lVk5vZGUodm5vZGUsIGV4dHJhUHJvcHMsIG1lcmdlUmVmID0gZmFsc2UsIGNsb25lVHJhbnNpdGlvbiA9IGZhbHNlKSB7XG4gIGNvbnN0IHsgcHJvcHMsIHJlZiwgcGF0Y2hGbGFnLCBjaGlsZHJlbiwgdHJhbnNpdGlvbiB9ID0gdm5vZGU7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gZXh0cmFQcm9wcyA/IG1lcmdlUHJvcHMocHJvcHMgfHwge30sIGV4dHJhUHJvcHMpIDogcHJvcHM7XG4gIGNvbnN0IGNsb25lZCA9IHtcbiAgICBfX3ZfaXNWTm9kZTogdHJ1ZSxcbiAgICBfX3Zfc2tpcDogdHJ1ZSxcbiAgICB0eXBlOiB2bm9kZS50eXBlLFxuICAgIHByb3BzOiBtZXJnZWRQcm9wcyxcbiAgICBrZXk6IG1lcmdlZFByb3BzICYmIG5vcm1hbGl6ZUtleShtZXJnZWRQcm9wcyksXG4gICAgcmVmOiBleHRyYVByb3BzICYmIGV4dHJhUHJvcHMucmVmID8gKFxuICAgICAgLy8gIzIwNzggaW4gdGhlIGNhc2Ugb2YgPGNvbXBvbmVudCA6aXM9XCJ2bm9kZVwiIHJlZj1cImV4dHJhXCIvPlxuICAgICAgLy8gaWYgdGhlIHZub2RlIGl0c2VsZiBhbHJlYWR5IGhhcyBhIHJlZiwgY2xvbmVWTm9kZSB3aWxsIG5lZWQgdG8gbWVyZ2VcbiAgICAgIC8vIHRoZSByZWZzIHNvIHRoZSBzaW5nbGUgdm5vZGUgY2FuIGJlIHNldCBvbiBtdWx0aXBsZSByZWZzXG4gICAgICBtZXJnZVJlZiAmJiByZWYgPyBpc0FycmF5KHJlZikgPyByZWYuY29uY2F0KG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKSkgOiBbcmVmLCBub3JtYWxpemVSZWYoZXh0cmFQcm9wcyldIDogbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXG4gICAgKSA6IHJlZixcbiAgICBzY29wZUlkOiB2bm9kZS5zY29wZUlkLFxuICAgIHNsb3RTY29wZUlkczogdm5vZGUuc2xvdFNjb3BlSWRzLFxuICAgIGNoaWxkcmVuOiAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHBhdGNoRmxhZyA9PT0gLTEgJiYgaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbi5tYXAoZGVlcENsb25lVk5vZGUpIDogY2hpbGRyZW4sXG4gICAgdGFyZ2V0OiB2bm9kZS50YXJnZXQsXG4gICAgdGFyZ2V0U3RhcnQ6IHZub2RlLnRhcmdldFN0YXJ0LFxuICAgIHRhcmdldEFuY2hvcjogdm5vZGUudGFyZ2V0QW5jaG9yLFxuICAgIHN0YXRpY0NvdW50OiB2bm9kZS5zdGF0aWNDb3VudCxcbiAgICBzaGFwZUZsYWc6IHZub2RlLnNoYXBlRmxhZyxcbiAgICAvLyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIHdpdGggZXh0cmEgcHJvcHMsIHdlIGNhbiBubyBsb25nZXIgYXNzdW1lIGl0c1xuICAgIC8vIGV4aXN0aW5nIHBhdGNoIGZsYWcgdG8gYmUgcmVsaWFibGUgYW5kIG5lZWQgdG8gYWRkIHRoZSBGVUxMX1BST1BTIGZsYWcuXG4gICAgLy8gbm90ZTogcHJlc2VydmUgZmxhZyBmb3IgZnJhZ21lbnRzIHNpbmNlIHRoZXkgdXNlIHRoZSBmbGFnIGZvciBjaGlsZHJlblxuICAgIC8vIGZhc3QgcGF0aHMgb25seS5cbiAgICBwYXRjaEZsYWc6IGV4dHJhUHJvcHMgJiYgdm5vZGUudHlwZSAhPT0gRnJhZ21lbnQgPyBwYXRjaEZsYWcgPT09IC0xID8gMTYgOiBwYXRjaEZsYWcgfCAxNiA6IHBhdGNoRmxhZyxcbiAgICBkeW5hbWljUHJvcHM6IHZub2RlLmR5bmFtaWNQcm9wcyxcbiAgICBkeW5hbWljQ2hpbGRyZW46IHZub2RlLmR5bmFtaWNDaGlsZHJlbixcbiAgICBhcHBDb250ZXh0OiB2bm9kZS5hcHBDb250ZXh0LFxuICAgIGRpcnM6IHZub2RlLmRpcnMsXG4gICAgdHJhbnNpdGlvbixcbiAgICAvLyBUaGVzZSBzaG91bGQgdGVjaG5pY2FsbHkgb25seSBiZSBub24tbnVsbCBvbiBtb3VudGVkIFZOb2Rlcy4gSG93ZXZlcixcbiAgICAvLyB0aGV5ICpzaG91bGQqIGJlIGNvcGllZCBmb3Iga2VwdC1hbGl2ZSB2bm9kZXMuIFNvIHdlIGp1c3QgYWx3YXlzIGNvcHlcbiAgICAvLyB0aGVtIHNpbmNlIHRoZW0gYmVpbmcgbm9uLW51bGwgZHVyaW5nIGEgbW91bnQgZG9lc24ndCBhZmZlY3QgdGhlIGxvZ2ljIGFzXG4gICAgLy8gdGhleSB3aWxsIHNpbXBseSBiZSBvdmVyd3JpdHRlbi5cbiAgICBjb21wb25lbnQ6IHZub2RlLmNvbXBvbmVudCxcbiAgICBzdXNwZW5zZTogdm5vZGUuc3VzcGVuc2UsXG4gICAgc3NDb250ZW50OiB2bm9kZS5zc0NvbnRlbnQgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0NvbnRlbnQpLFxuICAgIHNzRmFsbGJhY2s6IHZub2RlLnNzRmFsbGJhY2sgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0ZhbGxiYWNrKSxcbiAgICBlbDogdm5vZGUuZWwsXG4gICAgYW5jaG9yOiB2bm9kZS5hbmNob3IsXG4gICAgY3R4OiB2bm9kZS5jdHgsXG4gICAgY2U6IHZub2RlLmNlXG4gIH07XG4gIGlmICh0cmFuc2l0aW9uICYmIGNsb25lVHJhbnNpdGlvbikge1xuICAgIHNldFRyYW5zaXRpb25Ib29rcyhcbiAgICAgIGNsb25lZCxcbiAgICAgIHRyYW5zaXRpb24uY2xvbmUoY2xvbmVkKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNsb25lZDtcbn1cbmZ1bmN0aW9uIGRlZXBDbG9uZVZOb2RlKHZub2RlKSB7XG4gIGNvbnN0IGNsb25lZCA9IGNsb25lVk5vZGUodm5vZGUpO1xuICBpZiAoaXNBcnJheSh2bm9kZS5jaGlsZHJlbikpIHtcbiAgICBjbG9uZWQuY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbi5tYXAoZGVlcENsb25lVk5vZGUpO1xuICB9XG4gIHJldHVybiBjbG9uZWQ7XG59XG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUodGV4dCA9IFwiIFwiLCBmbGFnID0gMCkge1xuICByZXR1cm4gY3JlYXRlVk5vZGUoVGV4dCwgbnVsbCwgdGV4dCwgZmxhZyk7XG59XG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNWTm9kZShjb250ZW50LCBudW1iZXJPZk5vZGVzKSB7XG4gIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUoU3RhdGljLCBudWxsLCBjb250ZW50KTtcbiAgdm5vZGUuc3RhdGljQ291bnQgPSBudW1iZXJPZk5vZGVzO1xuICByZXR1cm4gdm5vZGU7XG59XG5mdW5jdGlvbiBjcmVhdGVDb21tZW50Vk5vZGUodGV4dCA9IFwiXCIsIGFzQmxvY2sgPSBmYWxzZSkge1xuICByZXR1cm4gYXNCbG9jayA/IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soQ29tbWVudCwgbnVsbCwgdGV4dCkpIDogY3JlYXRlVk5vZGUoQ29tbWVudCwgbnVsbCwgdGV4dCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVWTm9kZShjaGlsZCkge1xuICBpZiAoY2hpbGQgPT0gbnVsbCB8fCB0eXBlb2YgY2hpbGQgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVZOb2RlKENvbW1lbnQpO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoY2hpbGQpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVZOb2RlKFxuICAgICAgRnJhZ21lbnQsXG4gICAgICBudWxsLFxuICAgICAgLy8gIzM2NjYsIGF2b2lkIHJlZmVyZW5jZSBwb2xsdXRpb24gd2hlbiByZXVzaW5nIHZub2RlXG4gICAgICBjaGlsZC5zbGljZSgpXG4gICAgKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2hpbGQgPT09IFwib2JqZWN0XCIpIHtcbiAgICByZXR1cm4gY2xvbmVJZk1vdW50ZWQoY2hpbGQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVWTm9kZShUZXh0LCBudWxsLCBTdHJpbmcoY2hpbGQpKTtcbiAgfVxufVxuZnVuY3Rpb24gY2xvbmVJZk1vdW50ZWQoY2hpbGQpIHtcbiAgcmV0dXJuIGNoaWxkLmVsID09PSBudWxsICYmIGNoaWxkLnBhdGNoRmxhZyAhPT0gLTEgfHwgY2hpbGQubWVtbyA/IGNoaWxkIDogY2xvbmVWTm9kZShjaGlsZCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4pIHtcbiAgbGV0IHR5cGUgPSAwO1xuICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gdm5vZGU7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgY2hpbGRyZW4gPSBudWxsO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgdHlwZSA9IDE2O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJvYmplY3RcIikge1xuICAgIGlmIChzaGFwZUZsYWcgJiAoMSB8IDY0KSkge1xuICAgICAgY29uc3Qgc2xvdCA9IGNoaWxkcmVuLmRlZmF1bHQ7XG4gICAgICBpZiAoc2xvdCkge1xuICAgICAgICBzbG90Ll9jICYmIChzbG90Ll9kID0gZmFsc2UpO1xuICAgICAgICBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgc2xvdCgpKTtcbiAgICAgICAgc2xvdC5fYyAmJiAoc2xvdC5fZCA9IHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gMzI7XG4gICAgICBjb25zdCBzbG90RmxhZyA9IGNoaWxkcmVuLl87XG4gICAgICBpZiAoIXNsb3RGbGFnICYmICFpc0ludGVybmFsT2JqZWN0KGNoaWxkcmVuKSkge1xuICAgICAgICBjaGlsZHJlbi5fY3R4ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICAgICAgfSBlbHNlIGlmIChzbG90RmxhZyA9PT0gMyAmJiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5zbG90cy5fID09PSAxKSB7XG4gICAgICAgICAgY2hpbGRyZW4uXyA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hpbGRyZW4uXyA9IDI7XG4gICAgICAgICAgdm5vZGUucGF0Y2hGbGFnIHw9IDEwMjQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihjaGlsZHJlbikpIHtcbiAgICBjaGlsZHJlbiA9IHsgZGVmYXVsdDogY2hpbGRyZW4sIF9jdHg6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSB9O1xuICAgIHR5cGUgPSAzMjtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZHJlbiA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgaWYgKHNoYXBlRmxhZyAmIDY0KSB7XG4gICAgICB0eXBlID0gMTY7XG4gICAgICBjaGlsZHJlbiA9IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZSA9IDg7XG4gICAgfVxuICB9XG4gIHZub2RlLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHZub2RlLnNoYXBlRmxhZyB8PSB0eXBlO1xufVxuZnVuY3Rpb24gbWVyZ2VQcm9wcyguLi5hcmdzKSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0b01lcmdlID0gYXJnc1tpXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0b01lcmdlKSB7XG4gICAgICBpZiAoa2V5ID09PSBcImNsYXNzXCIpIHtcbiAgICAgICAgaWYgKHJldC5jbGFzcyAhPT0gdG9NZXJnZS5jbGFzcykge1xuICAgICAgICAgIHJldC5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKFtyZXQuY2xhc3MsIHRvTWVyZ2UuY2xhc3NdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09IFwic3R5bGVcIikge1xuICAgICAgICByZXQuc3R5bGUgPSBub3JtYWxpemVTdHlsZShbcmV0LnN0eWxlLCB0b01lcmdlLnN0eWxlXSk7XG4gICAgICB9IGVsc2UgaWYgKGlzT24oa2V5KSkge1xuICAgICAgICBjb25zdCBleGlzdGluZyA9IHJldFtrZXldO1xuICAgICAgICBjb25zdCBpbmNvbWluZyA9IHRvTWVyZ2Vba2V5XTtcbiAgICAgICAgaWYgKGluY29taW5nICYmIGV4aXN0aW5nICE9PSBpbmNvbWluZyAmJiAhKGlzQXJyYXkoZXhpc3RpbmcpICYmIGV4aXN0aW5nLmluY2x1ZGVzKGluY29taW5nKSkpIHtcbiAgICAgICAgICByZXRba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBpbmNvbWluZykgOiBpbmNvbWluZztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgIT09IFwiXCIpIHtcbiAgICAgICAgcmV0W2tleV0gPSB0b01lcmdlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBpbnZva2VWTm9kZUhvb2soaG9vaywgaW5zdGFuY2UsIHZub2RlLCBwcmV2Vk5vZGUgPSBudWxsKSB7XG4gIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA3LCBbXG4gICAgdm5vZGUsXG4gICAgcHJldlZOb2RlXG4gIF0pO1xufVxuXG5jb25zdCBlbXB0eUFwcENvbnRleHQgPSBjcmVhdGVBcHBDb250ZXh0KCk7XG5sZXQgdWlkID0gMDtcbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlKHZub2RlLCBwYXJlbnQsIHN1c3BlbnNlKSB7XG4gIGNvbnN0IHR5cGUgPSB2bm9kZS50eXBlO1xuICBjb25zdCBhcHBDb250ZXh0ID0gKHBhcmVudCA/IHBhcmVudC5hcHBDb250ZXh0IDogdm5vZGUuYXBwQ29udGV4dCkgfHwgZW1wdHlBcHBDb250ZXh0O1xuICBjb25zdCBpbnN0YW5jZSA9IHtcbiAgICB1aWQ6IHVpZCsrLFxuICAgIHZub2RlLFxuICAgIHR5cGUsXG4gICAgcGFyZW50LFxuICAgIGFwcENvbnRleHQsXG4gICAgcm9vdDogbnVsbCxcbiAgICAvLyB0byBiZSBpbW1lZGlhdGVseSBzZXRcbiAgICBuZXh0OiBudWxsLFxuICAgIHN1YlRyZWU6IG51bGwsXG4gICAgLy8gd2lsbCBiZSBzZXQgc3luY2hyb25vdXNseSByaWdodCBhZnRlciBjcmVhdGlvblxuICAgIGVmZmVjdDogbnVsbCxcbiAgICB1cGRhdGU6IG51bGwsXG4gICAgLy8gd2lsbCBiZSBzZXQgc3luY2hyb25vdXNseSByaWdodCBhZnRlciBjcmVhdGlvblxuICAgIGpvYjogbnVsbCxcbiAgICBzY29wZTogbmV3IEVmZmVjdFNjb3BlKFxuICAgICAgdHJ1ZVxuICAgICAgLyogZGV0YWNoZWQgKi9cbiAgICApLFxuICAgIHJlbmRlcjogbnVsbCxcbiAgICBwcm94eTogbnVsbCxcbiAgICBleHBvc2VkOiBudWxsLFxuICAgIGV4cG9zZVByb3h5OiBudWxsLFxuICAgIHdpdGhQcm94eTogbnVsbCxcbiAgICBwcm92aWRlczogcGFyZW50ID8gcGFyZW50LnByb3ZpZGVzIDogT2JqZWN0LmNyZWF0ZShhcHBDb250ZXh0LnByb3ZpZGVzKSxcbiAgICBpZHM6IHBhcmVudCA/IHBhcmVudC5pZHMgOiBbXCJcIiwgMCwgMF0sXG4gICAgYWNjZXNzQ2FjaGU6IG51bGwsXG4gICAgcmVuZGVyQ2FjaGU6IFtdLFxuICAgIC8vIGxvY2FsIHJlc29sdmVkIGFzc2V0c1xuICAgIGNvbXBvbmVudHM6IG51bGwsXG4gICAgZGlyZWN0aXZlczogbnVsbCxcbiAgICAvLyByZXNvbHZlZCBwcm9wcyBhbmQgZW1pdHMgb3B0aW9uc1xuICAgIHByb3BzT3B0aW9uczogbm9ybWFsaXplUHJvcHNPcHRpb25zKHR5cGUsIGFwcENvbnRleHQpLFxuICAgIGVtaXRzT3B0aW9uczogbm9ybWFsaXplRW1pdHNPcHRpb25zKHR5cGUsIGFwcENvbnRleHQpLFxuICAgIC8vIGVtaXRcbiAgICBlbWl0OiBudWxsLFxuICAgIC8vIHRvIGJlIHNldCBpbW1lZGlhdGVseVxuICAgIGVtaXR0ZWQ6IG51bGwsXG4gICAgLy8gcHJvcHMgZGVmYXVsdCB2YWx1ZVxuICAgIHByb3BzRGVmYXVsdHM6IEVNUFRZX09CSixcbiAgICAvLyBpbmhlcml0QXR0cnNcbiAgICBpbmhlcml0QXR0cnM6IHR5cGUuaW5oZXJpdEF0dHJzLFxuICAgIC8vIHN0YXRlXG4gICAgY3R4OiBFTVBUWV9PQkosXG4gICAgZGF0YTogRU1QVFlfT0JKLFxuICAgIHByb3BzOiBFTVBUWV9PQkosXG4gICAgYXR0cnM6IEVNUFRZX09CSixcbiAgICBzbG90czogRU1QVFlfT0JKLFxuICAgIHJlZnM6IEVNUFRZX09CSixcbiAgICBzZXR1cFN0YXRlOiBFTVBUWV9PQkosXG4gICAgc2V0dXBDb250ZXh0OiBudWxsLFxuICAgIC8vIHN1c3BlbnNlIHJlbGF0ZWRcbiAgICBzdXNwZW5zZSxcbiAgICBzdXNwZW5zZUlkOiBzdXNwZW5zZSA/IHN1c3BlbnNlLnBlbmRpbmdJZCA6IDAsXG4gICAgYXN5bmNEZXA6IG51bGwsXG4gICAgYXN5bmNSZXNvbHZlZDogZmFsc2UsXG4gICAgLy8gbGlmZWN5Y2xlIGhvb2tzXG4gICAgLy8gbm90IHVzaW5nIGVudW1zIGhlcmUgYmVjYXVzZSBpdCByZXN1bHRzIGluIGNvbXB1dGVkIHByb3BlcnRpZXNcbiAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcbiAgICBpc0RlYWN0aXZhdGVkOiBmYWxzZSxcbiAgICBiYzogbnVsbCxcbiAgICBjOiBudWxsLFxuICAgIGJtOiBudWxsLFxuICAgIG06IG51bGwsXG4gICAgYnU6IG51bGwsXG4gICAgdTogbnVsbCxcbiAgICB1bTogbnVsbCxcbiAgICBidW06IG51bGwsXG4gICAgZGE6IG51bGwsXG4gICAgYTogbnVsbCxcbiAgICBydGc6IG51bGwsXG4gICAgcnRjOiBudWxsLFxuICAgIGVjOiBudWxsLFxuICAgIHNwOiBudWxsXG4gIH07XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgaW5zdGFuY2UuY3R4ID0gY3JlYXRlRGV2UmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XG4gIH0gZWxzZSB7XG4gICAgaW5zdGFuY2UuY3R4ID0geyBfOiBpbnN0YW5jZSB9O1xuICB9XG4gIGluc3RhbmNlLnJvb3QgPSBwYXJlbnQgPyBwYXJlbnQucm9vdCA6IGluc3RhbmNlO1xuICBpbnN0YW5jZS5lbWl0ID0gZW1pdC5iaW5kKG51bGwsIGluc3RhbmNlKTtcbiAgaWYgKHZub2RlLmNlKSB7XG4gICAgdm5vZGUuY2UoaW5zdGFuY2UpO1xuICB9XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmxldCBjdXJyZW50SW5zdGFuY2UgPSBudWxsO1xuY29uc3QgZ2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4gY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbmxldCBpbnRlcm5hbFNldEN1cnJlbnRJbnN0YW5jZTtcbmxldCBzZXRJblNTUlNldHVwU3RhdGU7XG57XG4gIGNvbnN0IGcgPSBnZXRHbG9iYWxUaGlzKCk7XG4gIGNvbnN0IHJlZ2lzdGVyR2xvYmFsU2V0dGVyID0gKGtleSwgc2V0dGVyKSA9PiB7XG4gICAgbGV0IHNldHRlcnM7XG4gICAgaWYgKCEoc2V0dGVycyA9IGdba2V5XSkpIHNldHRlcnMgPSBnW2tleV0gPSBbXTtcbiAgICBzZXR0ZXJzLnB1c2goc2V0dGVyKTtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgIGlmIChzZXR0ZXJzLmxlbmd0aCA+IDEpIHNldHRlcnMuZm9yRWFjaCgoc2V0KSA9PiBzZXQodikpO1xuICAgICAgZWxzZSBzZXR0ZXJzWzBdKHYpO1xuICAgIH07XG4gIH07XG4gIGludGVybmFsU2V0Q3VycmVudEluc3RhbmNlID0gcmVnaXN0ZXJHbG9iYWxTZXR0ZXIoXG4gICAgYF9fVlVFX0lOU1RBTkNFX1NFVFRFUlNfX2AsXG4gICAgKHYpID0+IGN1cnJlbnRJbnN0YW5jZSA9IHZcbiAgKTtcbiAgc2V0SW5TU1JTZXR1cFN0YXRlID0gcmVnaXN0ZXJHbG9iYWxTZXR0ZXIoXG4gICAgYF9fVlVFX1NTUl9TRVRURVJTX19gLFxuICAgICh2KSA9PiBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSB2XG4gICk7XG59XG5jb25zdCBzZXRDdXJyZW50SW5zdGFuY2UgPSAoaW5zdGFuY2UpID0+IHtcbiAgY29uc3QgcHJldiA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgaW50ZXJuYWxTZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICBpbnN0YW5jZS5zY29wZS5vbigpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGluc3RhbmNlLnNjb3BlLm9mZigpO1xuICAgIGludGVybmFsU2V0Q3VycmVudEluc3RhbmNlKHByZXYpO1xuICB9O1xufTtcbmNvbnN0IHVuc2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4ge1xuICBjdXJyZW50SW5zdGFuY2UgJiYgY3VycmVudEluc3RhbmNlLnNjb3BlLm9mZigpO1xuICBpbnRlcm5hbFNldEN1cnJlbnRJbnN0YW5jZShudWxsKTtcbn07XG5jb25zdCBpc0J1aWx0SW5UYWcgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcInNsb3QsY29tcG9uZW50XCIpO1xuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUsIHsgaXNOYXRpdmVUYWcgfSkge1xuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGlzTmF0aXZlVGFnKG5hbWUpKSB7XG4gICAgd2FybiQxKFxuICAgICAgXCJEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50IGlkOiBcIiArIG5hbWVcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBpc1N0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlKSB7XG4gIHJldHVybiBpbnN0YW5jZS52bm9kZS5zaGFwZUZsYWcgJiA0O1xufVxubGV0IGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGZhbHNlO1xuZnVuY3Rpb24gc2V0dXBDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlKSB7XG4gIGlzU1NSICYmIHNldEluU1NSU2V0dXBTdGF0ZShpc1NTUik7XG4gIGNvbnN0IHsgcHJvcHMsIGNoaWxkcmVuIH0gPSBpbnN0YW5jZS52bm9kZTtcbiAgY29uc3QgaXNTdGF0ZWZ1bCA9IGlzU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UpO1xuICBpbml0UHJvcHMoaW5zdGFuY2UsIHByb3BzLCBpc1N0YXRlZnVsLCBpc1NTUik7XG4gIGluaXRTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4sIG9wdGltaXplZCk7XG4gIGNvbnN0IHNldHVwUmVzdWx0ID0gaXNTdGF0ZWZ1bCA/IHNldHVwU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSKSA6IHZvaWQgMDtcbiAgaXNTU1IgJiYgc2V0SW5TU1JTZXR1cFN0YXRlKGZhbHNlKTtcbiAgcmV0dXJuIHNldHVwUmVzdWx0O1xufVxuZnVuY3Rpb24gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpIHtcbiAgdmFyIF9hO1xuICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIGlmIChDb21wb25lbnQubmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKENvbXBvbmVudC5uYW1lLCBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZyk7XG4gICAgfVxuICAgIGlmIChDb21wb25lbnQuY29tcG9uZW50cykge1xuICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuY29tcG9uZW50cyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lc1tpXSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQ29tcG9uZW50LmRpcmVjdGl2ZXMpIHtcbiAgICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoQ29tcG9uZW50LmRpcmVjdGl2ZXMpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQ29tcG9uZW50LmNvbXBpbGVyT3B0aW9ucyAmJiBpc1J1bnRpbWVPbmx5KCkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYFwiY29tcGlsZXJPcHRpb25zXCIgaXMgb25seSBzdXBwb3J0ZWQgd2hlbiB1c2luZyBhIGJ1aWxkIG9mIFZ1ZSB0aGF0IGluY2x1ZGVzIHRoZSBydW50aW1lIGNvbXBpbGVyLiBTaW5jZSB5b3UgYXJlIHVzaW5nIGEgcnVudGltZS1vbmx5IGJ1aWxkLCB0aGUgb3B0aW9ucyBzaG91bGQgYmUgcGFzc2VkIHZpYSB5b3VyIGJ1aWxkIHRvb2wgY29uZmlnIGluc3RlYWQuYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaW5zdGFuY2UuYWNjZXNzQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaW5zdGFuY2UucHJveHkgPSBuZXcgUHJveHkoaW5zdGFuY2UuY3R4LCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMpO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIGV4cG9zZVByb3BzT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcbiAgfVxuICBjb25zdCB7IHNldHVwIH0gPSBDb21wb25lbnQ7XG4gIGlmIChzZXR1cCkge1xuICAgIGNvbnN0IHNldHVwQ29udGV4dCA9IGluc3RhbmNlLnNldHVwQ29udGV4dCA9IHNldHVwLmxlbmd0aCA+IDEgPyBjcmVhdGVTZXR1cENvbnRleHQoaW5zdGFuY2UpIDogbnVsbDtcbiAgICBjb25zdCByZXNldCA9IHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgcGF1c2VUcmFja2luZygpO1xuICAgIGNvbnN0IHNldHVwUmVzdWx0ID0gY2FsbFdpdGhFcnJvckhhbmRsaW5nKFxuICAgICAgc2V0dXAsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDAsXG4gICAgICBbXG4gICAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBzaGFsbG93UmVhZG9ubHkoaW5zdGFuY2UucHJvcHMpIDogaW5zdGFuY2UucHJvcHMsXG4gICAgICAgIHNldHVwQ29udGV4dFxuICAgICAgXVxuICAgICk7XG4gICAgcmVzZXRUcmFja2luZygpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGlzUHJvbWlzZShzZXR1cFJlc3VsdCkpIHtcbiAgICAgIGlmICghaXNBc3luY1dyYXBwZXIoaW5zdGFuY2UpKSBtYXJrQXN5bmNCb3VuZGFyeShpbnN0YW5jZSk7XG4gICAgICBzZXR1cFJlc3VsdC50aGVuKHVuc2V0Q3VycmVudEluc3RhbmNlLCB1bnNldEN1cnJlbnRJbnN0YW5jZSk7XG4gICAgICBpZiAoaXNTU1IpIHtcbiAgICAgICAgcmV0dXJuIHNldHVwUmVzdWx0LnRoZW4oKHJlc29sdmVkUmVzdWx0KSA9PiB7XG4gICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHJlc29sdmVkUmVzdWx0LCBpc1NTUik7XG4gICAgICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgaW5zdGFuY2UsIDApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3RhbmNlLmFzeW5jRGVwID0gc2V0dXBSZXN1bHQ7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFpbnN0YW5jZS5zdXNwZW5zZSkge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSAoX2EgPSBDb21wb25lbnQubmFtZSkgIT0gbnVsbCA/IF9hIDogXCJBbm9ueW1vdXNcIjtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgQ29tcG9uZW50IDwke25hbWV9Pjogc2V0dXAgZnVuY3Rpb24gcmV0dXJuZWQgYSBwcm9taXNlLCBidXQgbm8gPFN1c3BlbnNlPiBib3VuZGFyeSB3YXMgZm91bmQgaW4gdGhlIHBhcmVudCBjb21wb25lbnQgdHJlZS4gQSBjb21wb25lbnQgd2l0aCBhc3luYyBzZXR1cCgpIG11c3QgYmUgbmVzdGVkIGluIGEgPFN1c3BlbnNlPiBpbiBvcmRlciB0byBiZSByZW5kZXJlZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgc2V0dXBSZXN1bHQsIGlzU1NSKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UsIGlzU1NSKTtcbiAgfVxufVxuZnVuY3Rpb24gaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0LCBpc1NTUikge1xuICBpZiAoaXNGdW5jdGlvbihzZXR1cFJlc3VsdCkpIHtcbiAgICBpZiAoaW5zdGFuY2UudHlwZS5fX3NzcklubGluZVJlbmRlcikge1xuICAgICAgaW5zdGFuY2Uuc3NyUmVuZGVyID0gc2V0dXBSZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLnJlbmRlciA9IHNldHVwUmVzdWx0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChzZXR1cFJlc3VsdCkpIHtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBpc1ZOb2RlKHNldHVwUmVzdWx0KSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgc2V0dXAoKSBzaG91bGQgbm90IHJldHVybiBWTm9kZXMgZGlyZWN0bHkgLSByZXR1cm4gYSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgIGluc3RhbmNlLmRldnRvb2xzUmF3U2V0dXBTdGF0ZSA9IHNldHVwUmVzdWx0O1xuICAgIH1cbiAgICBpbnN0YW5jZS5zZXR1cFN0YXRlID0gcHJveHlSZWZzKHNldHVwUmVzdWx0KTtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgc2V0dXBSZXN1bHQgIT09IHZvaWQgMCkge1xuICAgIHdhcm4kMShcbiAgICAgIGBzZXR1cCgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LiBSZWNlaXZlZDogJHtzZXR1cFJlc3VsdCA9PT0gbnVsbCA/IFwibnVsbFwiIDogdHlwZW9mIHNldHVwUmVzdWx0fWBcbiAgICApO1xuICB9XG4gIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUik7XG59XG5sZXQgY29tcGlsZTtcbmxldCBpbnN0YWxsV2l0aFByb3h5O1xuZnVuY3Rpb24gcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIoX2NvbXBpbGUpIHtcbiAgY29tcGlsZSA9IF9jb21waWxlO1xuICBpbnN0YWxsV2l0aFByb3h5ID0gKGkpID0+IHtcbiAgICBpZiAoaS5yZW5kZXIuX3JjKSB7XG4gICAgICBpLndpdGhQcm94eSA9IG5ldyBQcm94eShpLmN0eCwgUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzKTtcbiAgICB9XG4gIH07XG59XG5jb25zdCBpc1J1bnRpbWVPbmx5ID0gKCkgPT4gIWNvbXBpbGU7XG5mdW5jdGlvbiBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSwgaXNTU1IsIHNraXBPcHRpb25zKSB7XG4gIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XG4gIGlmICghaW5zdGFuY2UucmVuZGVyKSB7XG4gICAgaWYgKCFpc1NTUiAmJiBjb21waWxlICYmICFDb21wb25lbnQucmVuZGVyKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IENvbXBvbmVudC50ZW1wbGF0ZSB8fCByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSkudGVtcGxhdGU7XG4gICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBjb21waWxlYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBpc0N1c3RvbUVsZW1lbnQsIGNvbXBpbGVyT3B0aW9ucyB9ID0gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWc7XG4gICAgICAgIGNvbnN0IHsgZGVsaW1pdGVycywgY29tcGlsZXJPcHRpb25zOiBjb21wb25lbnRDb21waWxlck9wdGlvbnMgfSA9IENvbXBvbmVudDtcbiAgICAgICAgY29uc3QgZmluYWxDb21waWxlck9wdGlvbnMgPSBleHRlbmQoXG4gICAgICAgICAgZXh0ZW5kKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpc0N1c3RvbUVsZW1lbnQsXG4gICAgICAgICAgICAgIGRlbGltaXRlcnNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21waWxlck9wdGlvbnNcbiAgICAgICAgICApLFxuICAgICAgICAgIGNvbXBvbmVudENvbXBpbGVyT3B0aW9uc1xuICAgICAgICApO1xuICAgICAgICBDb21wb25lbnQucmVuZGVyID0gY29tcGlsZSh0ZW1wbGF0ZSwgZmluYWxDb21waWxlck9wdGlvbnMpO1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBjb21waWxlYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaW5zdGFuY2UucmVuZGVyID0gQ29tcG9uZW50LnJlbmRlciB8fCBOT09QO1xuICAgIGlmIChpbnN0YWxsV2l0aFByb3h5KSB7XG4gICAgICBpbnN0YWxsV2l0aFByb3h5KGluc3RhbmNlKTtcbiAgICB9XG4gIH1cbiAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgdHJ1ZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gc2V0Q3VycmVudEluc3RhbmNlKGluc3RhbmNlKTtcbiAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgdHJ5IHtcbiAgICAgIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgIHJlc2V0KCk7XG4gICAgfVxuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFDb21wb25lbnQucmVuZGVyICYmIGluc3RhbmNlLnJlbmRlciA9PT0gTk9PUCAmJiAhaXNTU1IpIHtcbiAgICBpZiAoIWNvbXBpbGUgJiYgQ29tcG9uZW50LnRlbXBsYXRlKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGBDb21wb25lbnQgcHJvdmlkZWQgdGVtcGxhdGUgb3B0aW9uIGJ1dCBydW50aW1lIGNvbXBpbGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBidWlsZCBvZiBWdWUuYCArIChgIENvbmZpZ3VyZSB5b3VyIGJ1bmRsZXIgdG8gYWxpYXMgXCJ2dWVcIiB0byBcInZ1ZS9kaXN0L3Z1ZS5lc20tYnVuZGxlci5qc1wiLmAgKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybiQxKGBDb21wb25lbnQgaXMgbWlzc2luZyB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb246IGAsIENvbXBvbmVudCk7XG4gICAgfVxuICB9XG59XG5jb25zdCBhdHRyc1Byb3h5SGFuZGxlcnMgPSAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8ge1xuICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xuICAgIHRyYWNrKHRhcmdldCwgXCJnZXRcIiwgXCJcIik7XG4gICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICB9LFxuICBzZXQoKSB7XG4gICAgd2FybiQxKGBzZXR1cENvbnRleHQuYXR0cnMgaXMgcmVhZG9ubHkuYCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBkZWxldGVQcm9wZXJ0eSgpIHtcbiAgICB3YXJuJDEoYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0gOiB7XG4gIGdldCh0YXJnZXQsIGtleSkge1xuICAgIHRyYWNrKHRhcmdldCwgXCJnZXRcIiwgXCJcIik7XG4gICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0U2xvdHNQcm94eShpbnN0YW5jZSkge1xuICByZXR1cm4gbmV3IFByb3h5KGluc3RhbmNlLnNsb3RzLCB7XG4gICAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICB0cmFjayhpbnN0YW5jZSwgXCJnZXRcIiwgXCIkc2xvdHNcIik7XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNldHVwQ29udGV4dChpbnN0YW5jZSkge1xuICBjb25zdCBleHBvc2UgPSAoZXhwb3NlZCkgPT4ge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICBpZiAoaW5zdGFuY2UuZXhwb3NlZCkge1xuICAgICAgICB3YXJuJDEoYGV4cG9zZSgpIHNob3VsZCBiZSBjYWxsZWQgb25seSBvbmNlIHBlciBzZXR1cCgpLmApO1xuICAgICAgfVxuICAgICAgaWYgKGV4cG9zZWQgIT0gbnVsbCkge1xuICAgICAgICBsZXQgZXhwb3NlZFR5cGUgPSB0eXBlb2YgZXhwb3NlZDtcbiAgICAgICAgaWYgKGV4cG9zZWRUeXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoZXhwb3NlZCkpIHtcbiAgICAgICAgICAgIGV4cG9zZWRUeXBlID0gXCJhcnJheVwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZWYoZXhwb3NlZCkpIHtcbiAgICAgICAgICAgIGV4cG9zZWRUeXBlID0gXCJyZWZcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cG9zZWRUeXBlICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYGV4cG9zZSgpIHNob3VsZCBiZSBwYXNzZWQgYSBwbGFpbiBvYmplY3QsIHJlY2VpdmVkICR7ZXhwb3NlZFR5cGV9LmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGluc3RhbmNlLmV4cG9zZWQgPSBleHBvc2VkIHx8IHt9O1xuICB9O1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIGxldCBhdHRyc1Byb3h5O1xuICAgIGxldCBzbG90c1Byb3h5O1xuICAgIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICAgIGdldCBhdHRycygpIHtcbiAgICAgICAgcmV0dXJuIGF0dHJzUHJveHkgfHwgKGF0dHJzUHJveHkgPSBuZXcgUHJveHkoaW5zdGFuY2UuYXR0cnMsIGF0dHJzUHJveHlIYW5kbGVycykpO1xuICAgICAgfSxcbiAgICAgIGdldCBzbG90cygpIHtcbiAgICAgICAgcmV0dXJuIHNsb3RzUHJveHkgfHwgKHNsb3RzUHJveHkgPSBnZXRTbG90c1Byb3h5KGluc3RhbmNlKSk7XG4gICAgICB9LFxuICAgICAgZ2V0IGVtaXQoKSB7XG4gICAgICAgIHJldHVybiAoZXZlbnQsIC4uLmFyZ3MpID0+IGluc3RhbmNlLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgfSxcbiAgICAgIGV4cG9zZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICBhdHRyczogbmV3IFByb3h5KGluc3RhbmNlLmF0dHJzLCBhdHRyc1Byb3h5SGFuZGxlcnMpLFxuICAgICAgc2xvdHM6IGluc3RhbmNlLnNsb3RzLFxuICAgICAgZW1pdDogaW5zdGFuY2UuZW1pdCxcbiAgICAgIGV4cG9zZVxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlKGluc3RhbmNlKSB7XG4gIGlmIChpbnN0YW5jZS5leHBvc2VkKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLmV4cG9zZVByb3h5IHx8IChpbnN0YW5jZS5leHBvc2VQcm94eSA9IG5ldyBQcm94eShwcm94eVJlZnMobWFya1JhdyhpbnN0YW5jZS5leHBvc2VkKSksIHtcbiAgICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldCkge1xuICAgICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgaW4gcHVibGljUHJvcGVydGllc01hcCkge1xuICAgICAgICAgIHJldHVybiBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV0oaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaGFzKHRhcmdldCwga2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgaW4gdGFyZ2V0IHx8IGtleSBpbiBwdWJsaWNQcm9wZXJ0aWVzTWFwO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaW5zdGFuY2UucHJveHk7XG4gIH1cbn1cbmNvbnN0IGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG5jb25zdCBjbGFzc2lmeSA9IChzdHIpID0+IHN0ci5yZXBsYWNlKGNsYXNzaWZ5UkUsIChjKSA9PiBjLnRvVXBwZXJDYXNlKCkpLnJlcGxhY2UoL1stX10vZywgXCJcIik7XG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCwgaW5jbHVkZUluZmVycmVkID0gdHJ1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbihDb21wb25lbnQpID8gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIDogQ29tcG9uZW50Lm5hbWUgfHwgaW5jbHVkZUluZmVycmVkICYmIENvbXBvbmVudC5fX25hbWU7XG59XG5mdW5jdGlvbiBmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBDb21wb25lbnQsIGlzUm9vdCA9IGZhbHNlKSB7XG4gIGxldCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpO1xuICBpZiAoIW5hbWUgJiYgQ29tcG9uZW50Ll9fZmlsZSkge1xuICAgIGNvbnN0IG1hdGNoID0gQ29tcG9uZW50Ll9fZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC5cXHcrJC8pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgIH1cbiAgfVxuICBpZiAoIW5hbWUgJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UucGFyZW50KSB7XG4gICAgY29uc3QgaW5mZXJGcm9tUmVnaXN0cnkgPSAocmVnaXN0cnkpID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlZ2lzdHJ5KSB7XG4gICAgICAgIGlmIChyZWdpc3RyeVtrZXldID09PSBDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBuYW1lID0gaW5mZXJGcm9tUmVnaXN0cnkoXG4gICAgICBpbnN0YW5jZS5jb21wb25lbnRzIHx8IGluc3RhbmNlLnBhcmVudC50eXBlLmNvbXBvbmVudHNcbiAgICApIHx8IGluZmVyRnJvbVJlZ2lzdHJ5KGluc3RhbmNlLmFwcENvbnRleHQuY29tcG9uZW50cyk7XG4gIH1cbiAgcmV0dXJuIG5hbWUgPyBjbGFzc2lmeShuYW1lKSA6IGlzUm9vdCA/IGBBcHBgIDogYEFub255bW91c2A7XG59XG5mdW5jdGlvbiBpc0NsYXNzQ29tcG9uZW50KHZhbHVlKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKSAmJiBcIl9fdmNjT3B0c1wiIGluIHZhbHVlO1xufVxuXG5jb25zdCBjb21wdXRlZCA9IChnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucykgPT4ge1xuICBjb25zdCBjID0gY29tcHV0ZWQkMShnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucywgaXNJblNTUkNvbXBvbmVudFNldHVwKTtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICBjb25zdCBpID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgaWYgKGkgJiYgaS5hcHBDb250ZXh0LmNvbmZpZy53YXJuUmVjdXJzaXZlQ29tcHV0ZWQpIHtcbiAgICAgIGMuX3dhcm5SZWN1cnNpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYztcbn07XG5cbmZ1bmN0aW9uIGgodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbikge1xuICBjb25zdCBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKGwgPT09IDIpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvcHNPckNoaWxkcmVuKSAmJiAhaXNBcnJheShwcm9wc09yQ2hpbGRyZW4pKSB7XG4gICAgICBpZiAoaXNWTm9kZShwcm9wc09yQ2hpbGRyZW4pKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBudWxsLCBbcHJvcHNPckNoaWxkcmVuXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIHByb3BzT3JDaGlsZHJlbik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChsID4gMykge1xuICAgICAgY2hpbGRyZW4gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIH0gZWxzZSBpZiAobCA9PT0gMyAmJiBpc1ZOb2RlKGNoaWxkcmVuKSkge1xuICAgICAgY2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEN1c3RvbUZvcm1hdHRlcigpIHtcbiAgaWYgKCEhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdnVlU3R5bGUgPSB7IHN0eWxlOiBcImNvbG9yOiMzYmE3NzZcIiB9O1xuICBjb25zdCBudW1iZXJTdHlsZSA9IHsgc3R5bGU6IFwiY29sb3I6IzE2NzdmZlwiIH07XG4gIGNvbnN0IHN0cmluZ1N0eWxlID0geyBzdHlsZTogXCJjb2xvcjojZjUyMjJkXCIgfTtcbiAgY29uc3Qga2V5d29yZFN0eWxlID0geyBzdHlsZTogXCJjb2xvcjojZWIyZjk2XCIgfTtcbiAgY29uc3QgZm9ybWF0dGVyID0ge1xuICAgIF9fdnVlX2N1c3RvbV9mb3JtYXR0ZXI6IHRydWUsXG4gICAgaGVhZGVyKG9iaikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmopKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKG9iai5fX2lzVnVlKSB7XG4gICAgICAgIHJldHVybiBbXCJkaXZcIiwgdnVlU3R5bGUsIGBWdWVJbnN0YW5jZWBdO1xuICAgICAgfSBlbHNlIGlmIChpc1JlZihvYmopKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7fSxcbiAgICAgICAgICBbXCJzcGFuXCIsIHZ1ZVN0eWxlLCBnZW5SZWZGbGFnKG9iaildLFxuICAgICAgICAgIFwiPFwiLFxuICAgICAgICAgIC8vIGF2b2lkIGRlYnVnZ2VyIGFjY2Vzc2luZyB2YWx1ZSBhZmZlY3RpbmcgYmVoYXZpb3JcbiAgICAgICAgICBmb3JtYXRWYWx1ZShcIl92YWx1ZVwiIGluIG9iaiA/IG9iai5fdmFsdWUgOiBvYmopLFxuICAgICAgICAgIGA+YFxuICAgICAgICBdO1xuICAgICAgfSBlbHNlIGlmIChpc1JlYWN0aXZlKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHt9LFxuICAgICAgICAgIFtcInNwYW5cIiwgdnVlU3R5bGUsIGlzU2hhbGxvdyhvYmopID8gXCJTaGFsbG93UmVhY3RpdmVcIiA6IFwiUmVhY3RpdmVcIl0sXG4gICAgICAgICAgXCI8XCIsXG4gICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcbiAgICAgICAgICBgPiR7aXNSZWFkb25seShvYmopID8gYCAocmVhZG9ubHkpYCA6IGBgfWBcbiAgICAgICAgXTtcbiAgICAgIH0gZWxzZSBpZiAoaXNSZWFkb25seShvYmopKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7fSxcbiAgICAgICAgICBbXCJzcGFuXCIsIHZ1ZVN0eWxlLCBpc1NoYWxsb3cob2JqKSA/IFwiU2hhbGxvd1JlYWRvbmx5XCIgOiBcIlJlYWRvbmx5XCJdLFxuICAgICAgICAgIFwiPFwiLFxuICAgICAgICAgIGZvcm1hdFZhbHVlKG9iaiksXG4gICAgICAgICAgXCI+XCJcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgaGFzQm9keShvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgb2JqLl9faXNWdWU7XG4gICAgfSxcbiAgICBib2R5KG9iaikge1xuICAgICAgaWYgKG9iaiAmJiBvYmouX19pc1Z1ZSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge30sXG4gICAgICAgICAgLi4uZm9ybWF0SW5zdGFuY2Uob2JqLiQpXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBmb3JtYXRJbnN0YW5jZShpbnN0YW5jZSkge1xuICAgIGNvbnN0IGJsb2NrcyA9IFtdO1xuICAgIGlmIChpbnN0YW5jZS50eXBlLnByb3BzICYmIGluc3RhbmNlLnByb3BzKSB7XG4gICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKFwicHJvcHNcIiwgdG9SYXcoaW5zdGFuY2UucHJvcHMpKSk7XG4gICAgfVxuICAgIGlmIChpbnN0YW5jZS5zZXR1cFN0YXRlICE9PSBFTVBUWV9PQkopIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJzZXR1cFwiLCBpbnN0YW5jZS5zZXR1cFN0YXRlKSk7XG4gICAgfVxuICAgIGlmIChpbnN0YW5jZS5kYXRhICE9PSBFTVBUWV9PQkopIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJkYXRhXCIsIHRvUmF3KGluc3RhbmNlLmRhdGEpKSk7XG4gICAgfVxuICAgIGNvbnN0IGNvbXB1dGVkID0gZXh0cmFjdEtleXMoaW5zdGFuY2UsIFwiY29tcHV0ZWRcIik7XG4gICAgaWYgKGNvbXB1dGVkKSB7XG4gICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKFwiY29tcHV0ZWRcIiwgY29tcHV0ZWQpKTtcbiAgICB9XG4gICAgY29uc3QgaW5qZWN0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgXCJpbmplY3RcIik7XG4gICAgaWYgKGluamVjdGVkKSB7XG4gICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKFwiaW5qZWN0ZWRcIiwgaW5qZWN0ZWQpKTtcbiAgICB9XG4gICAgYmxvY2tzLnB1c2goW1xuICAgICAgXCJkaXZcIixcbiAgICAgIHt9LFxuICAgICAgW1xuICAgICAgICBcInNwYW5cIixcbiAgICAgICAge1xuICAgICAgICAgIHN0eWxlOiBrZXl3b3JkU3R5bGUuc3R5bGUgKyBcIjtvcGFjaXR5OjAuNjZcIlxuICAgICAgICB9LFxuICAgICAgICBcIiQgKGludGVybmFsKTogXCJcbiAgICAgIF0sXG4gICAgICBbXCJvYmplY3RcIiwgeyBvYmplY3Q6IGluc3RhbmNlIH1dXG4gICAgXSk7XG4gICAgcmV0dXJuIGJsb2NrcztcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZUJsb2NrKHR5cGUsIHRhcmdldCkge1xuICAgIHRhcmdldCA9IGV4dGVuZCh7fSwgdGFyZ2V0KTtcbiAgICBpZiAoIU9iamVjdC5rZXlzKHRhcmdldCkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gW1wic3BhblwiLCB7fV07XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdHlsZTogXCJsaW5lLWhlaWdodDoxLjI1ZW07bWFyZ2luLWJvdHRvbTowLjZlbVwiIH0sXG4gICAgICBbXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdHlsZTogXCJjb2xvcjojNDc2NTgyXCJcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZVxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIHN0eWxlOiBcInBhZGRpbmctbGVmdDoxLjI1ZW1cIlxuICAgICAgICB9LFxuICAgICAgICAuLi5PYmplY3Qua2V5cyh0YXJnZXQpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIFtcInNwYW5cIiwga2V5d29yZFN0eWxlLCBrZXkgKyBcIjogXCJdLFxuICAgICAgICAgICAgZm9ybWF0VmFsdWUodGFyZ2V0W2tleV0sIGZhbHNlKVxuICAgICAgICAgIF07XG4gICAgICAgIH0pXG4gICAgICBdXG4gICAgXTtcbiAgfVxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2LCBhc1JhdyA9IHRydWUpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIG51bWJlclN0eWxlLCB2XTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gW1wic3BhblwiLCBzdHJpbmdTdHlsZSwgSlNPTi5zdHJpbmdpZnkodildO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gW1wic3BhblwiLCBrZXl3b3JkU3R5bGUsIHZdO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodikpIHtcbiAgICAgIHJldHVybiBbXCJvYmplY3RcIiwgeyBvYmplY3Q6IGFzUmF3ID8gdG9SYXcodikgOiB2IH1dO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW1wic3BhblwiLCBzdHJpbmdTdHlsZSwgU3RyaW5nKHYpXTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZXh0cmFjdEtleXMoaW5zdGFuY2UsIHR5cGUpIHtcbiAgICBjb25zdCBDb21wID0gaW5zdGFuY2UudHlwZTtcbiAgICBpZiAoaXNGdW5jdGlvbihDb21wKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBleHRyYWN0ZWQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5jdHgpIHtcbiAgICAgIGlmIChpc0tleU9mVHlwZShDb21wLCBrZXksIHR5cGUpKSB7XG4gICAgICAgIGV4dHJhY3RlZFtrZXldID0gaW5zdGFuY2UuY3R4W2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHRyYWN0ZWQ7XG4gIH1cbiAgZnVuY3Rpb24gaXNLZXlPZlR5cGUoQ29tcCwga2V5LCB0eXBlKSB7XG4gICAgY29uc3Qgb3B0cyA9IENvbXBbdHlwZV07XG4gICAgaWYgKGlzQXJyYXkob3B0cykgJiYgb3B0cy5pbmNsdWRlcyhrZXkpIHx8IGlzT2JqZWN0KG9wdHMpICYmIGtleSBpbiBvcHRzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKENvbXAuZXh0ZW5kcyAmJiBpc0tleU9mVHlwZShDb21wLmV4dGVuZHMsIGtleSwgdHlwZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoQ29tcC5taXhpbnMgJiYgQ29tcC5taXhpbnMuc29tZSgobSkgPT4gaXNLZXlPZlR5cGUobSwga2V5LCB0eXBlKSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZW5SZWZGbGFnKHYpIHtcbiAgICBpZiAoaXNTaGFsbG93KHYpKSB7XG4gICAgICByZXR1cm4gYFNoYWxsb3dSZWZgO1xuICAgIH1cbiAgICBpZiAodi5lZmZlY3QpIHtcbiAgICAgIHJldHVybiBgQ29tcHV0ZWRSZWZgO1xuICAgIH1cbiAgICByZXR1cm4gYFJlZmA7XG4gIH1cbiAgaWYgKHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMpIHtcbiAgICB3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzID0gW2Zvcm1hdHRlcl07XG4gIH1cbn1cblxuZnVuY3Rpb24gd2l0aE1lbW8obWVtbywgcmVuZGVyLCBjYWNoZSwgaW5kZXgpIHtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGVbaW5kZXhdO1xuICBpZiAoY2FjaGVkICYmIGlzTWVtb1NhbWUoY2FjaGVkLCBtZW1vKSkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cbiAgY29uc3QgcmV0ID0gcmVuZGVyKCk7XG4gIHJldC5tZW1vID0gbWVtby5zbGljZSgpO1xuICByZXQuY2FjaGVJbmRleCA9IGluZGV4O1xuICByZXR1cm4gY2FjaGVbaW5kZXhdID0gcmV0O1xufVxuZnVuY3Rpb24gaXNNZW1vU2FtZShjYWNoZWQsIG1lbW8pIHtcbiAgY29uc3QgcHJldiA9IGNhY2hlZC5tZW1vO1xuICBpZiAocHJldi5sZW5ndGggIT0gbWVtby5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGhhc0NoYW5nZWQocHJldltpXSwgbWVtb1tpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgY3VycmVudEJsb2NrKSB7XG4gICAgY3VycmVudEJsb2NrLnB1c2goY2FjaGVkKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuY29uc3QgdmVyc2lvbiA9IFwiMy41LjdcIjtcbmNvbnN0IHdhcm4gPSAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gd2FybiQxIDogTk9PUDtcbmNvbnN0IEVycm9yVHlwZVN0cmluZ3MgPSBFcnJvclR5cGVTdHJpbmdzJDEgO1xuY29uc3QgZGV2dG9vbHMgPSAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IHRydWUgPyBkZXZ0b29scyQxIDogdm9pZCAwO1xuY29uc3Qgc2V0RGV2dG9vbHNIb29rID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCB0cnVlID8gc2V0RGV2dG9vbHNIb29rJDEgOiBOT09QO1xuY29uc3QgX3NzclV0aWxzID0ge1xuICBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSxcbiAgc2V0dXBDb21wb25lbnQsXG4gIHJlbmRlckNvbXBvbmVudFJvb3QsXG4gIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSxcbiAgaXNWTm9kZTogaXNWTm9kZSxcbiAgbm9ybWFsaXplVk5vZGUsXG4gIGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlLFxuICBlbnN1cmVWYWxpZFZOb2RlLFxuICBwdXNoV2FybmluZ0NvbnRleHQsXG4gIHBvcFdhcm5pbmdDb250ZXh0XG59O1xuY29uc3Qgc3NyVXRpbHMgPSBfc3NyVXRpbHMgO1xuY29uc3QgcmVzb2x2ZUZpbHRlciA9IG51bGw7XG5jb25zdCBjb21wYXRVdGlscyA9IG51bGw7XG5jb25zdCBEZXByZWNhdGlvblR5cGVzID0gbnVsbDtcblxuZXhwb3J0IHsgQmFzZVRyYW5zaXRpb24sIEJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLCBDb21tZW50LCBEZXByZWNhdGlvblR5cGVzLCBFcnJvckNvZGVzLCBFcnJvclR5cGVTdHJpbmdzLCBGcmFnbWVudCwgS2VlcEFsaXZlLCBTdGF0aWMsIFN1c3BlbnNlLCBUZWxlcG9ydCwgVGV4dCwgYXNzZXJ0TnVtYmVyLCBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZywgY2FsbFdpdGhFcnJvckhhbmRsaW5nLCBjbG9uZVZOb2RlLCBjb21wYXRVdGlscywgY29tcHV0ZWQsIGNyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQmFzZVZOb2RlIGFzIGNyZWF0ZUVsZW1lbnRWTm9kZSwgY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIsIGNyZWF0ZVByb3BzUmVzdFByb3h5LCBjcmVhdGVSZW5kZXJlciwgY3JlYXRlU2xvdHMsIGNyZWF0ZVN0YXRpY1ZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUsIGNyZWF0ZVZOb2RlLCBkZWZpbmVBc3luY0NvbXBvbmVudCwgZGVmaW5lQ29tcG9uZW50LCBkZWZpbmVFbWl0cywgZGVmaW5lRXhwb3NlLCBkZWZpbmVNb2RlbCwgZGVmaW5lT3B0aW9ucywgZGVmaW5lUHJvcHMsIGRlZmluZVNsb3RzLCBkZXZ0b29scywgZ2V0Q3VycmVudEluc3RhbmNlLCBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4sIGd1YXJkUmVhY3RpdmVQcm9wcywgaCwgaGFuZGxlRXJyb3IsIGhhc0luamVjdGlvbkNvbnRleHQsIGh5ZHJhdGVPbklkbGUsIGh5ZHJhdGVPbkludGVyYWN0aW9uLCBoeWRyYXRlT25NZWRpYVF1ZXJ5LCBoeWRyYXRlT25WaXNpYmxlLCBpbml0Q3VzdG9tRm9ybWF0dGVyLCBpbmplY3QsIGlzTWVtb1NhbWUsIGlzUnVudGltZU9ubHksIGlzVk5vZGUsIG1lcmdlRGVmYXVsdHMsIG1lcmdlTW9kZWxzLCBtZXJnZVByb3BzLCBuZXh0VGljaywgb25BY3RpdmF0ZWQsIG9uQmVmb3JlTW91bnQsIG9uQmVmb3JlVW5tb3VudCwgb25CZWZvcmVVcGRhdGUsIG9uRGVhY3RpdmF0ZWQsIG9uRXJyb3JDYXB0dXJlZCwgb25Nb3VudGVkLCBvblJlbmRlclRyYWNrZWQsIG9uUmVuZGVyVHJpZ2dlcmVkLCBvblNlcnZlclByZWZldGNoLCBvblVubW91bnRlZCwgb25VcGRhdGVkLCBvcGVuQmxvY2ssIHBvcFNjb3BlSWQsIHByb3ZpZGUsIHB1c2hTY29wZUlkLCBxdWV1ZVBvc3RGbHVzaENiLCByZWdpc3RlclJ1bnRpbWVDb21waWxlciwgcmVuZGVyTGlzdCwgcmVuZGVyU2xvdCwgcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSwgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsIHJlc29sdmVGaWx0ZXIsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsIHNldEJsb2NrVHJhY2tpbmcsIHNldERldnRvb2xzSG9vaywgc2V0VHJhbnNpdGlvbkhvb2tzLCBzc3JDb250ZXh0S2V5LCBzc3JVdGlscywgdG9IYW5kbGVycywgdHJhbnNmb3JtVk5vZGVBcmdzLCB1c2VBdHRycywgdXNlSWQsIHVzZU1vZGVsLCB1c2VTU1JDb250ZXh0LCB1c2VTbG90cywgdXNlVGVtcGxhdGVSZWYsIHVzZVRyYW5zaXRpb25TdGF0ZSwgdmVyc2lvbiwgd2Fybiwgd2F0Y2gsIHdhdGNoRWZmZWN0LCB3YXRjaFBvc3RFZmZlY3QsIHdhdGNoU3luY0VmZmVjdCwgd2l0aEFzeW5jQ29udGV4dCwgd2l0aEN0eCwgd2l0aERlZmF1bHRzLCB3aXRoRGlyZWN0aXZlcywgd2l0aE1lbW8sIHdpdGhTY29wZUlkIH07XG4iXSwibmFtZXMiOlsicGF1c2VUcmFja2luZyIsInJlc2V0VHJhY2tpbmciLCJpc1JlZiIsInRvUmF3IiwidHJhdmVyc2UiLCJzaGFsbG93UmVmIiwicmVhZG9ubHkiLCJpc1JlYWN0aXZlIiwicmVmIiwiaXNTaGFsbG93Iiwic2hhbGxvd1JlYWRBcnJheSIsInRvUmVhY3RpdmUiLCJzaGFsbG93UmVhZG9ubHkiLCJ0cmFjayIsInJlYWN0aXZlIiwic2hhbGxvd1JlYWN0aXZlIiwidHJpZ2dlciIsIlJlYWN0aXZlRWZmZWN0Iiwid2F0Y2giLCJ3YXRjaCQxIiwiY3VzdG9tUmVmIiwiaXNQcm94eSIsInByb3h5UmVmcyIsIm1hcmtSYXciLCJFZmZlY3RTY29wZSIsImNvbXB1dGVkIiwiY29tcHV0ZWQkMSIsImlzUmVhZG9ubHkiLCJUcmFja09wVHlwZXMiLCJUcmlnZ2VyT3BUeXBlcyIsImVmZmVjdCIsImVmZmVjdFNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwiZ2V0Q3VycmVudFdhdGNoZXIiLCJvblNjb3BlRGlzcG9zZSIsIm9uV2F0Y2hlckNsZWFudXAiLCJzdG9wIiwidG9SZWYiLCJ0b1JlZnMiLCJ0b1ZhbHVlIiwidHJpZ2dlclJlZiIsInVucmVmIiwiaXNTdHJpbmciLCJpc0Z1bmN0aW9uIiwiaXNQcm9taXNlIiwiaXNBcnJheSIsIkVNUFRZX09CSiIsIk5PT1AiLCJnZXRHbG9iYWxUaGlzIiwiZXh0ZW5kIiwiaXNCdWlsdEluRGlyZWN0aXZlIiwiaGFzT3duIiwicmVtb3ZlIiwiZGVmIiwiaXNPbiIsImlzUmVzZXJ2ZWRQcm9wIiwibm9ybWFsaXplQ2xhc3MiLCJzdHJpbmdpZnlTdHlsZSIsIm5vcm1hbGl6ZVN0eWxlIiwiaXNLbm93blN2Z0F0dHIiLCJpc0Jvb2xlYW5BdHRyIiwiaXNLbm93bkh0bWxBdHRyIiwiaW5jbHVkZUJvb2xlYW5BdHRyIiwiaXNSZW5kZXJhYmxlQXR0clZhbHVlIiwiZ2V0RXNjYXBlZENzc1Zhck5hbWUiLCJpc09iamVjdCIsImlzUmVnRXhwIiwiaW52b2tlQXJyYXlGbnMiLCJ0b0hhbmRsZXJLZXkiLCJjYXBpdGFsaXplIiwiY2FtZWxpemUiLCJpc0dsb2JhbGx5QWxsb3dlZCIsIk5PIiwiaHlwaGVuYXRlIiwiRU1QVFlfQVJSIiwidG9SYXdUeXBlIiwibWFrZU1hcCIsImhhc0NoYW5nZWQiLCJsb29zZVRvTnVtYmVyIiwiaXNNb2RlbExpc3RlbmVyIiwidG9OdW1iZXIiLCJub3JtYWxpemVQcm9wcyIsInRvRGlzcGxheVN0cmluZyIsInN0YWNrIiwicHVzaFdhcm5pbmdDb250ZXh0Iiwidm5vZGUiLCJwdXNoIiwicG9wV2FybmluZ0NvbnRleHQiLCJwb3AiLCJpc1dhcm5pbmciLCJ3YXJuJDEiLCJtc2ciLCJhcmdzIiwiaW5zdGFuY2UiLCJsZW5ndGgiLCJjb21wb25lbnQiLCJhcHBXYXJuSGFuZGxlciIsImFwcENvbnRleHQiLCJjb25maWciLCJ3YXJuSGFuZGxlciIsInRyYWNlIiwiZ2V0Q29tcG9uZW50VHJhY2UiLCJjYWxsV2l0aEVycm9ySGFuZGxpbmciLCJtYXAiLCJhIiwiX2EiLCJfYiIsInRvU3RyaW5nIiwiY2FsbCIsIkpTT04iLCJzdHJpbmdpZnkiLCJqb2luIiwicHJveHkiLCJmb3JtYXRDb21wb25lbnROYW1lIiwidHlwZSIsIndhcm5BcmdzIiwiZm9ybWF0VHJhY2UiLCJjb25zb2xlIiwid2FybiIsImN1cnJlbnRWTm9kZSIsIm5vcm1hbGl6ZWRTdGFjayIsImxhc3QiLCJyZWN1cnNlQ291bnQiLCJwYXJlbnRJbnN0YW5jZSIsInBhcmVudCIsImxvZ3MiLCJmb3JFYWNoIiwiZW50cnkiLCJpIiwiZm9ybWF0VHJhY2VFbnRyeSIsInBvc3RmaXgiLCJpc1Jvb3QiLCJvcGVuIiwiY2xvc2UiLCJwcm9wcyIsImZvcm1hdFByb3BzIiwicmVzIiwia2V5cyIsIk9iamVjdCIsInNsaWNlIiwia2V5IiwiZm9ybWF0UHJvcCIsInZhbHVlIiwicmF3IiwibmFtZSIsImFzc2VydE51bWJlciIsInZhbCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImlzTmFOIiwiRXJyb3JDb2RlcyIsIkVycm9yVHlwZVN0cmluZ3MkMSIsImZuIiwiZXJyIiwiaGFuZGxlRXJyb3IiLCJjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyIsImNhdGNoIiwidmFsdWVzIiwidGhyb3dJbkRldiIsImNvbnRleHRWTm9kZSIsImVycm9ySGFuZGxlciIsInRocm93VW5oYW5kbGVkRXJyb3JJblByb2R1Y3Rpb24iLCJjdXIiLCJleHBvc2VkSW5zdGFuY2UiLCJlcnJvckluZm8iLCJlcnJvckNhcHR1cmVkSG9va3MiLCJlYyIsImxvZ0Vycm9yIiwidGhyb3dJblByb2QiLCJpbmZvIiwiZXJyb3IiLCJpc0ZsdXNoaW5nIiwiaXNGbHVzaFBlbmRpbmciLCJxdWV1ZSIsImZsdXNoSW5kZXgiLCJwZW5kaW5nUG9zdEZsdXNoQ2JzIiwiYWN0aXZlUG9zdEZsdXNoQ2JzIiwicG9zdEZsdXNoSW5kZXgiLCJyZXNvbHZlZFByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImN1cnJlbnRGbHVzaFByb21pc2UiLCJSRUNVUlNJT05fTElNSVQiLCJuZXh0VGljayIsInAiLCJ0aGVuIiwiYmluZCIsImZpbmRJbnNlcnRpb25JbmRleCIsImlkIiwic3RhcnQiLCJlbmQiLCJtaWRkbGUiLCJtaWRkbGVKb2IiLCJtaWRkbGVKb2JJZCIsImdldElkIiwiZmxhZ3MiLCJxdWV1ZUpvYiIsImpvYiIsImpvYklkIiwibGFzdEpvYiIsInNwbGljZSIsInF1ZXVlRmx1c2giLCJmbHVzaEpvYnMiLCJxdWV1ZVBvc3RGbHVzaENiIiwiY2IiLCJmbHVzaFByZUZsdXNoQ2JzIiwic2VlbiIsIk1hcCIsInVpZCIsImNoZWNrUmVjdXJzaXZlVXBkYXRlcyIsImZsdXNoUG9zdEZsdXNoQ2JzIiwiZGVkdXBlZCIsIlNldCIsInNvcnQiLCJiIiwiSW5maW5pdHkiLCJjaGVjayIsImNvdW50IiwiZ2V0IiwiY29tcG9uZW50TmFtZSIsImdldENvbXBvbmVudE5hbWUiLCJzZXQiLCJpc0htclVwZGF0aW5nIiwiaG1yRGlydHlDb21wb25lbnRzIiwiX19WVUVfSE1SX1JVTlRJTUVfXyIsImNyZWF0ZVJlY29yZCIsInRyeVdyYXAiLCJyZXJlbmRlciIsInJlbG9hZCIsInJlZ2lzdGVySE1SIiwiX19obXJJZCIsInJlY29yZCIsImluc3RhbmNlcyIsImFkZCIsInVucmVnaXN0ZXJITVIiLCJkZWxldGUiLCJpbml0aWFsRGVmIiwiaGFzIiwibm9ybWFsaXplQ2xhc3NDb21wb25lbnQiLCJpc0NsYXNzQ29tcG9uZW50IiwiX192Y2NPcHRzIiwibmV3UmVuZGVyIiwicmVuZGVyIiwicmVuZGVyQ2FjaGUiLCJ1cGRhdGUiLCJuZXdDb21wIiwidXBkYXRlQ29tcG9uZW50RGVmIiwib2xkQ29tcCIsImRpcnR5SW5zdGFuY2VzIiwicHJvcHNDYWNoZSIsImVtaXRzQ2FjaGUiLCJvcHRpb25zQ2FjaGUiLCJjZVJlbG9hZCIsInN0eWxlcyIsIndpbmRvdyIsImxvY2F0aW9uIiwicm9vdCIsImNlIiwiX3JlbW92ZUNoaWxkU3R5bGUiLCJjbGVhciIsImFyZyIsImUiLCJkZXZ0b29scyQxIiwiYnVmZmVyIiwiZGV2dG9vbHNOb3RJbnN0YWxsZWQiLCJlbWl0JDEiLCJldmVudCIsImVtaXQiLCJzZXREZXZ0b29sc0hvb2skMSIsImhvb2siLCJ0YXJnZXQiLCJlbmFibGVkIiwiSFRNTEVsZW1lbnQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmNsdWRlcyIsInJlcGxheSIsIl9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18iLCJuZXdIb29rIiwic2V0VGltZW91dCIsImRldnRvb2xzSW5pdEFwcCIsImFwcCIsInZlcnNpb24iLCJGcmFnbWVudCIsIlRleHQiLCJDb21tZW50IiwiU3RhdGljIiwiZGV2dG9vbHNVbm1vdW50QXBwIiwiZGV2dG9vbHNDb21wb25lbnRBZGRlZCIsImNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayIsImRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCIsIl9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQiLCJkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQiLCJjbGVhbnVwQnVmZmVyIiwiZGV2dG9vbHNQZXJmU3RhcnQiLCJjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayIsImRldnRvb2xzUGVyZkVuZCIsInRpbWUiLCJkZXZ0b29sc0NvbXBvbmVudEVtaXQiLCJwYXJhbXMiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJjdXJyZW50U2NvcGVJZCIsInNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsInByZXYiLCJfX3Njb3BlSWQiLCJwdXNoU2NvcGVJZCIsInBvcFNjb3BlSWQiLCJ3aXRoU2NvcGVJZCIsIl9pZCIsIndpdGhDdHgiLCJjdHgiLCJpc05vblNjb3BlZFNsb3QiLCJfbiIsInJlbmRlckZuV2l0aENvbnRleHQiLCJfZCIsInNldEJsb2NrVHJhY2tpbmciLCJwcmV2SW5zdGFuY2UiLCJfX1ZVRV9QUk9EX0RFVlRPT0xTX18iLCJfYyIsInZhbGlkYXRlRGlyZWN0aXZlTmFtZSIsIndpdGhEaXJlY3RpdmVzIiwiZGlyZWN0aXZlcyIsImdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlIiwiYmluZGluZ3MiLCJkaXJzIiwiZGlyIiwibW9kaWZpZXJzIiwibW91bnRlZCIsInVwZGF0ZWQiLCJkZWVwIiwib2xkVmFsdWUiLCJpbnZva2VEaXJlY3RpdmVIb29rIiwicHJldlZOb2RlIiwib2xkQmluZGluZ3MiLCJiaW5kaW5nIiwiZWwiLCJUZWxlcG9ydEVuZEtleSIsIlN5bWJvbCIsImlzVGVsZXBvcnQiLCJfX2lzVGVsZXBvcnQiLCJpc1RlbGVwb3J0RGlzYWJsZWQiLCJkaXNhYmxlZCIsImlzVGVsZXBvcnREZWZlcnJlZCIsImRlZmVyIiwiaXNUYXJnZXRTVkciLCJTVkdFbGVtZW50IiwiaXNUYXJnZXRNYXRoTUwiLCJNYXRoTUxFbGVtZW50IiwicmVzb2x2ZVRhcmdldCIsInNlbGVjdCIsInRhcmdldFNlbGVjdG9yIiwidG8iLCJUZWxlcG9ydEltcGwiLCJuMSIsIm4yIiwiY29udGFpbmVyIiwiYW5jaG9yIiwicGFyZW50Q29tcG9uZW50IiwicGFyZW50U3VzcGVuc2UiLCJuYW1lc3BhY2UiLCJzbG90U2NvcGVJZHMiLCJvcHRpbWl6ZWQiLCJpbnRlcm5hbHMiLCJtYyIsIm1vdW50Q2hpbGRyZW4iLCJwYyIsInBhdGNoQ2hpbGRyZW4iLCJwYmMiLCJwYXRjaEJsb2NrQ2hpbGRyZW4iLCJvIiwiaW5zZXJ0IiwicXVlcnlTZWxlY3RvciIsImNyZWF0ZVRleHQiLCJjcmVhdGVDb21tZW50Iiwic2hhcGVGbGFnIiwiY2hpbGRyZW4iLCJkeW5hbWljQ2hpbGRyZW4iLCJwbGFjZWhvbGRlciIsIm1haW5BbmNob3IiLCJtb3VudCIsImNvbnRhaW5lcjIiLCJhbmNob3IyIiwiaXNDRSIsIl90ZWxlcG9ydFRhcmdldCIsIm1vdW50VG9UYXJnZXQiLCJ0YXJnZXRBbmNob3IiLCJwcmVwYXJlQW5jaG9yIiwidXBkYXRlQ3NzVmFycyIsInF1ZXVlUG9zdFJlbmRlckVmZmVjdCIsInRhcmdldFN0YXJ0Iiwid2FzRGlzYWJsZWQiLCJjdXJyZW50Q29udGFpbmVyIiwiY3VycmVudEFuY2hvciIsInRyYXZlcnNlU3RhdGljQ2hpbGRyZW4iLCJtb3ZlVGVsZXBvcnQiLCJuZXh0VGFyZ2V0IiwidW0iLCJ1bm1vdW50IiwiaG9zdFJlbW92ZSIsImRvUmVtb3ZlIiwic2hvdWxkUmVtb3ZlIiwiY2hpbGQiLCJtb3ZlIiwiaHlkcmF0ZSIsImh5ZHJhdGVUZWxlcG9ydCIsInBhcmVudEFuY2hvciIsIm0iLCJtb3ZlVHlwZSIsImlzUmVvcmRlciIsIm5vZGUiLCJuZXh0U2libGluZyIsInBhcmVudE5vZGUiLCJoeWRyYXRlQ2hpbGRyZW4iLCJ0YXJnZXROb2RlIiwiX2xwYSIsImZpcnN0Q2hpbGQiLCJub2RlVHlwZSIsImRhdGEiLCJUZWxlcG9ydCIsInV0Iiwic2V0QXR0cmlidXRlIiwibGVhdmVDYktleSIsImVudGVyQ2JLZXkiLCJ1c2VUcmFuc2l0aW9uU3RhdGUiLCJzdGF0ZSIsImlzTW91bnRlZCIsImlzTGVhdmluZyIsImlzVW5tb3VudGluZyIsImxlYXZpbmdWTm9kZXMiLCJvbk1vdW50ZWQiLCJvbkJlZm9yZVVubW91bnQiLCJUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciIsIkZ1bmN0aW9uIiwiQXJyYXkiLCJCYXNlVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyIsIm1vZGUiLCJTdHJpbmciLCJhcHBlYXIiLCJCb29sZWFuIiwicGVyc2lzdGVkIiwib25CZWZvcmVFbnRlciIsIm9uRW50ZXIiLCJvbkFmdGVyRW50ZXIiLCJvbkVudGVyQ2FuY2VsbGVkIiwib25CZWZvcmVMZWF2ZSIsIm9uTGVhdmUiLCJvbkFmdGVyTGVhdmUiLCJvbkxlYXZlQ2FuY2VsbGVkIiwib25CZWZvcmVBcHBlYXIiLCJvbkFwcGVhciIsIm9uQWZ0ZXJBcHBlYXIiLCJvbkFwcGVhckNhbmNlbGxlZCIsInJlY3Vyc2l2ZUdldFN1YnRyZWUiLCJzdWJUcmVlIiwiQmFzZVRyYW5zaXRpb25JbXBsIiwic2V0dXAiLCJzbG90cyIsImdldEN1cnJlbnRJbnN0YW5jZSIsImRlZmF1bHQiLCJnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4iLCJmaW5kTm9uQ29tbWVudENoaWxkIiwicmF3UHJvcHMiLCJlbXB0eVBsYWNlaG9sZGVyIiwiaW5uZXJDaGlsZCIsImdldElubmVyQ2hpbGQkMSIsImVudGVySG9va3MiLCJyZXNvbHZlVHJhbnNpdGlvbkhvb2tzIiwiaG9va3MiLCJzZXRUcmFuc2l0aW9uSG9va3MiLCJvbGRDaGlsZCIsIm9sZElubmVyQ2hpbGQiLCJpc1NhbWVWTm9kZVR5cGUiLCJsZWF2aW5nSG9va3MiLCJhZnRlckxlYXZlIiwiZGVsYXlMZWF2ZSIsImVhcmx5UmVtb3ZlIiwiZGVsYXllZExlYXZlIiwibGVhdmluZ1ZOb2Rlc0NhY2hlIiwiZ2V0TGVhdmluZ05vZGVzRm9yVHlwZSIsImhhc0ZvdW5kIiwiYyIsIkJhc2VUcmFuc2l0aW9uIiwiY3JlYXRlIiwicG9zdENsb25lIiwiY2FsbEhvb2siLCJjYWxsQXN5bmNIb29rIiwiZG9uZSIsImV2ZXJ5IiwiaG9vazIiLCJiZWZvcmVFbnRlciIsImxlYXZpbmdWTm9kZSIsImVudGVyIiwiYWZ0ZXJIb29rIiwiY2FuY2VsSG9vayIsImNhbGxlZCIsImNhbmNlbGxlZCIsImxlYXZlIiwia2V5MiIsImNsb25lIiwidm5vZGUyIiwiaG9va3MyIiwiaXNLZWVwQWxpdmUiLCJjbG9uZVZOb2RlIiwidHJhbnNpdGlvbiIsInNzQ29udGVudCIsInNzRmFsbGJhY2siLCJrZWVwQ29tbWVudCIsInBhcmVudEtleSIsInJldCIsImtleWVkRnJhZ21lbnRDb3VudCIsInBhdGNoRmxhZyIsImNvbmNhdCIsImRlZmluZUNvbXBvbmVudCIsIm9wdGlvbnMiLCJleHRyYU9wdGlvbnMiLCJ1c2VJZCIsImlkUHJlZml4IiwiaWRzIiwibWFya0FzeW5jQm91bmRhcnkiLCJrbm93blRlbXBsYXRlUmVmcyIsIldlYWtTZXQiLCJ1c2VUZW1wbGF0ZVJlZiIsInIiLCJyZWZzIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsInNldFJlZiIsInJhd1JlZiIsIm9sZFJhd1JlZiIsImlzVW5tb3VudCIsImlzQXN5bmNXcmFwcGVyIiwicmVmVmFsdWUiLCJvd25lciIsIm9sZFJlZiIsInNldHVwU3RhdGUiLCJyYXdTZXR1cFN0YXRlIiwiY2FuU2V0U2V0dXBSZWYiLCJfaXNTdHJpbmciLCJfaXNSZWYiLCJkb1NldCIsImYiLCJleGlzdGluZyIsImsiLCJoYXNMb2dnZWRNaXNtYXRjaEVycm9yIiwibG9nTWlzbWF0Y2hFcnJvciIsImlzU1ZHQ29udGFpbmVyIiwibmFtZXNwYWNlVVJJIiwidGFnTmFtZSIsImlzTWF0aE1MQ29udGFpbmVyIiwiZ2V0Q29udGFpbmVyVHlwZSIsImlzQ29tbWVudCIsImNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyIsInJlbmRlcmVySW50ZXJuYWxzIiwibXQiLCJtb3VudENvbXBvbmVudCIsInBhdGNoIiwicGF0Y2hQcm9wIiwiaGFzQ2hpbGROb2RlcyIsIl9fVlVFX1BST0RfSFlEUkFUSU9OX01JU01BVENIX0RFVEFJTFNfXyIsIl92bm9kZSIsImh5ZHJhdGVOb2RlIiwiaXNGcmFnbWVudFN0YXJ0Iiwib25NaXNtYXRjaCIsImhhbmRsZU1pc21hdGNoIiwiZG9tVHlwZSIsIm5leHROb2RlIiwiaXNUZW1wbGF0ZU5vZGUiLCJyZXBsYWNlTm9kZSIsImNvbnRlbnQiLCJuZWVkVG9BZG9wdENvbnRlbnQiLCJzdGF0aWNDb3VudCIsIm91dGVySFRNTCIsImh5ZHJhdGVGcmFnbWVudCIsInRvTG93ZXJDYXNlIiwiaHlkcmF0ZUVsZW1lbnQiLCJsb2NhdGVDbG9zaW5nQW5jaG9yIiwiY3JlYXRlVk5vZGUiLCJwcmV2aW91c1NpYmxpbmciLCJsYXN0Q2hpbGQiLCJjcmVhdGVUZXh0Vk5vZGUiLCJmb3JjZVBhdGNoIiwibmVlZENhbGxUcmFuc2l0aW9uSG9va3MiLCJuZWVkVHJhbnNpdGlvbiIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwibmV4dCIsImhhc1dhcm5lZCIsImlzTWlzbWF0Y2hBbGxvd2VkIiwiY2xpZW50VGV4dCIsImlzQ3VzdG9tRWxlbWVudCIsInNvbWUiLCJkIiwiY3JlYXRlZCIsInByb3BIYXNNaXNtYXRjaCIsImVuZHNXaXRoIiwib25DbGljayIsInN0eWxlIiwidm5vZGVIb29rcyIsIm9uVm5vZGVCZWZvcmVNb3VudCIsImludm9rZVZOb2RlSG9vayIsIm9uVm5vZGVNb3VudGVkIiwicXVldWVFZmZlY3RXaXRoU3VzcGVuc2UiLCJwYXJlbnRWTm9kZSIsImwiLCJub3JtYWxpemVWTm9kZSIsImlzVGV4dCIsImZyYWdtZW50U2xvdFNjb3BlSWRzIiwiaXNGcmFnbWVudCIsInBhcmVudEVsZW1lbnQiLCJuZXh0MiIsIm1hdGNoIiwibmV3Tm9kZSIsIm9sZE5vZGUiLCJwYXJlbnROb2RlMiIsInJlcGxhY2VDaGlsZCIsImNsaWVudFZhbHVlIiwibWlzbWF0Y2hUeXBlIiwibWlzbWF0Y2hLZXkiLCJhY3R1YWwiLCJleHBlY3RlZCIsImdldEF0dHJpYnV0ZSIsImlzU2V0RXF1YWwiLCJ0b0NsYXNzU2V0IiwiYWN0dWFsTWFwIiwidG9TdHlsZU1hcCIsImV4cGVjdGVkTWFwIiwicmVzb2x2ZUNzc1ZhcnMiLCJpc01hcEVxdWFsIiwiaGFzQXR0cmlidXRlIiwiZm9ybWF0IiwidiIsInByZVNlZ21lbnQiLCJNaXNtYXRjaFR5cGVTdHJpbmciLCJwb3N0U2VnbWVudCIsInN0ciIsInRyaW0iLCJzcGxpdCIsInNpemUiLCJzIiwic3R5bGVNYXAiLCJpdGVtIiwiZ2V0Q3NzVmFycyIsImNzc1ZhcnMiLCJhbGxvd01pc21hdGNoQXR0ciIsImFsbG93ZWRUeXBlIiwiYWxsb3dlZEF0dHIiLCJsaXN0IiwiaHlkcmF0ZU9uSWRsZSIsInRpbWVvdXQiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwiZWxlbWVudElzVmlzaWJsZUluVmlld3BvcnQiLCJ0b3AiLCJsZWZ0IiwiYm90dG9tIiwicmlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJoeWRyYXRlT25WaXNpYmxlIiwib3B0cyIsIm9iIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiaXNJbnRlcnNlY3RpbmciLCJkaXNjb25uZWN0IiwiRWxlbWVudCIsIm9ic2VydmUiLCJoeWRyYXRlT25NZWRpYVF1ZXJ5IiwicXVlcnkiLCJtcWwiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImh5ZHJhdGVPbkludGVyYWN0aW9uIiwiaW50ZXJhY3Rpb25zIiwiaGFzSHlkcmF0ZWQiLCJkb0h5ZHJhdGUiLCJ0ZWFyZG93biIsImRpc3BhdGNoRXZlbnQiLCJjb25zdHJ1Y3RvciIsImZvckVhY2hFbGVtZW50IiwiZGVwdGgiLCJyZXN1bHQiLCJfX2FzeW5jTG9hZGVyIiwiZGVmaW5lQXN5bmNDb21wb25lbnQiLCJzb3VyY2UiLCJsb2FkZXIiLCJsb2FkaW5nQ29tcG9uZW50IiwiZXJyb3JDb21wb25lbnQiLCJkZWxheSIsImh5ZHJhdGVTdHJhdGVneSIsInN1c3BlbnNpYmxlIiwib25FcnJvciIsInVzZXJPbkVycm9yIiwicGVuZGluZ1JlcXVlc3QiLCJyZXNvbHZlZENvbXAiLCJyZXRyaWVzIiwicmV0cnkiLCJsb2FkIiwidGhpc1JlcXVlc3QiLCJFcnJvciIsInJlamVjdCIsInVzZXJSZXRyeSIsInVzZXJGYWlsIiwiY29tcCIsIl9fZXNNb2R1bGUiLCJ0b1N0cmluZ1RhZyIsIl9fYXN5bmNIeWRyYXRlIiwiYnVtIiwiaXNVbm1vdW50ZWQiLCJfX2FzeW5jUmVzb2x2ZWQiLCJjdXJyZW50SW5zdGFuY2UiLCJjcmVhdGVJbm5lckNvbXAiLCJzdXNwZW5zZSIsImlzSW5TU1JDb21wb25lbnRTZXR1cCIsImxvYWRlZCIsImRlbGF5ZWQiLCJyZWYyIiwiX19pc0tlZXBBbGl2ZSIsIktlZXBBbGl2ZUltcGwiLCJpbmNsdWRlIiwiUmVnRXhwIiwiZXhjbHVkZSIsIm1heCIsIk51bWJlciIsInNoYXJlZENvbnRleHQiLCJyZW5kZXJlciIsImNhY2hlIiwiY3VycmVudCIsIl9fdl9jYWNoZSIsIl91bm1vdW50IiwiY3JlYXRlRWxlbWVudCIsInN0b3JhZ2VDb250YWluZXIiLCJhY3RpdmF0ZSIsImluc3RhbmNlMiIsImlzRGVhY3RpdmF0ZWQiLCJ2bm9kZUhvb2siLCJkZWFjdGl2YXRlIiwiaW52YWxpZGF0ZU1vdW50IiwiZGEiLCJvblZub2RlVW5tb3VudGVkIiwicmVzZXRTaGFwZUZsYWciLCJwcnVuZUNhY2hlIiwiZmlsdGVyIiwicHJ1bmVDYWNoZUVudHJ5IiwiY2FjaGVkIiwiZmx1c2giLCJwZW5kaW5nQ2FjaGVLZXkiLCJjYWNoZVN1YnRyZWUiLCJpc1N1c3BlbnNlIiwiZ2V0SW5uZXJDaGlsZCIsIm9uVXBkYXRlZCIsInJhd1ZOb2RlIiwiaXNWTm9kZSIsImNhY2hlZFZOb2RlIiwicGFyc2VJbnQiLCJLZWVwQWxpdmUiLCJwYXR0ZXJuIiwibGFzdEluZGV4IiwidGVzdCIsIm9uQWN0aXZhdGVkIiwicmVnaXN0ZXJLZWVwQWxpdmVIb29rIiwib25EZWFjdGl2YXRlZCIsIndyYXBwZWRIb29rIiwiX193ZGMiLCJpbmplY3RIb29rIiwiaW5qZWN0VG9LZWVwQWxpdmVSb290Iiwia2VlcEFsaXZlUm9vdCIsImluamVjdGVkIiwib25Vbm1vdW50ZWQiLCJwcmVwZW5kIiwiX193ZWgiLCJyZXNldCIsInNldEN1cnJlbnRJbnN0YW5jZSIsInVuc2hpZnQiLCJhcGlOYW1lIiwicmVwbGFjZSIsImNyZWF0ZUhvb2siLCJsaWZlY3ljbGUiLCJvbkJlZm9yZU1vdW50Iiwib25CZWZvcmVVcGRhdGUiLCJvblNlcnZlclByZWZldGNoIiwib25SZW5kZXJUcmlnZ2VyZWQiLCJvblJlbmRlclRyYWNrZWQiLCJvbkVycm9yQ2FwdHVyZWQiLCJDT01QT05FTlRTIiwiRElSRUNUSVZFUyIsInJlc29sdmVDb21wb25lbnQiLCJtYXliZVNlbGZSZWZlcmVuY2UiLCJyZXNvbHZlQXNzZXQiLCJOVUxMX0RZTkFNSUNfQ09NUE9ORU5UIiwiZm9yIiwicmVzb2x2ZUR5bmFtaWNDb21wb25lbnQiLCJyZXNvbHZlRGlyZWN0aXZlIiwid2Fybk1pc3NpbmciLCJDb21wb25lbnQiLCJzZWxmTmFtZSIsImV4dHJhIiwicmVnaXN0cnkiLCJyZW5kZXJMaXN0IiwicmVuZGVySXRlbSIsImluZGV4Iiwic291cmNlSXNBcnJheSIsInNvdXJjZUlzUmVhY3RpdmVBcnJheSIsIm5lZWRzV3JhcCIsImlzSW50ZWdlciIsIml0ZXJhdG9yIiwiZnJvbSIsImNyZWF0ZVNsb3RzIiwiZHluYW1pY1Nsb3RzIiwic2xvdCIsImoiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJub1Nsb3R0ZWQiLCJvcGVuQmxvY2siLCJjcmVhdGVCbG9jayIsInZhbGlkU2xvdENvbnRlbnQiLCJlbnN1cmVWYWxpZFZOb2RlIiwicmVuZGVyZWQiLCJfIiwic2NvcGVJZCIsInZub2RlcyIsInRvSGFuZGxlcnMiLCJvYmoiLCJwcmVzZXJ2ZUNhc2VJZk5lY2Vzc2FyeSIsImdldFB1YmxpY0luc3RhbmNlIiwiaXNTdGF0ZWZ1bENvbXBvbmVudCIsInB1YmxpY1Byb3BlcnRpZXNNYXAiLCIkIiwiJGVsIiwiJGRhdGEiLCIkcHJvcHMiLCIkYXR0cnMiLCJhdHRycyIsIiRzbG90cyIsIiRyZWZzIiwiJHBhcmVudCIsIiRyb290IiwiJGhvc3QiLCIkZW1pdCIsIiRvcHRpb25zIiwiX19WVUVfT1BUSU9OU19BUElfXyIsInJlc29sdmVNZXJnZWRPcHRpb25zIiwiJGZvcmNlVXBkYXRlIiwiJG5leHRUaWNrIiwibiIsIiR3YXRjaCIsImluc3RhbmNlV2F0Y2giLCJpc1Jlc2VydmVkUHJlZml4IiwiaGFzU2V0dXBCaW5kaW5nIiwiX19pc1NjcmlwdFNldHVwIiwiUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzIiwiYWNjZXNzQ2FjaGUiLCJub3JtYWxpemVkUHJvcHMiLCJwcm9wc09wdGlvbnMiLCJzaG91bGRDYWNoZUFjY2VzcyIsInB1YmxpY0dldHRlciIsImNzc01vZHVsZSIsImdsb2JhbFByb3BlcnRpZXMiLCJtYXJrQXR0cnNBY2Nlc3NlZCIsIl9fY3NzTW9kdWxlcyIsImluZGV4T2YiLCJkZXNjcmlwdG9yIiwiUmVmbGVjdCIsIm93bktleXMiLCJSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJ1bnNjb3BhYmxlcyIsImNyZWF0ZURldlJlbmRlckNvbnRleHQiLCJleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dCIsImV4cG9zZVNldHVwU3RhdGVPblJlbmRlckNvbnRleHQiLCJ3YXJuUnVudGltZVVzYWdlIiwibWV0aG9kIiwiZGVmaW5lUHJvcHMiLCJkZWZpbmVFbWl0cyIsImRlZmluZUV4cG9zZSIsImV4cG9zZWQiLCJkZWZpbmVPcHRpb25zIiwiZGVmaW5lU2xvdHMiLCJkZWZpbmVNb2RlbCIsIndpdGhEZWZhdWx0cyIsImRlZmF1bHRzIiwidXNlU2xvdHMiLCJnZXRDb250ZXh0IiwidXNlQXR0cnMiLCJzZXR1cENvbnRleHQiLCJjcmVhdGVTZXR1cENvbnRleHQiLCJub3JtYWxpemVQcm9wc09yRW1pdHMiLCJyZWR1Y2UiLCJub3JtYWxpemVkIiwibWVyZ2VEZWZhdWx0cyIsInN0YXJ0c1dpdGgiLCJvcHQiLCJza2lwRmFjdG9yeSIsIm1lcmdlTW9kZWxzIiwiY3JlYXRlUHJvcHNSZXN0UHJveHkiLCJleGNsdWRlZEtleXMiLCJ3aXRoQXN5bmNDb250ZXh0IiwiZ2V0QXdhaXRhYmxlIiwiYXdhaXRhYmxlIiwidW5zZXRDdXJyZW50SW5zdGFuY2UiLCJjcmVhdGVEdXBsaWNhdGVDaGVja2VyIiwiYXBwbHlPcHRpb25zIiwicHVibGljVGhpcyIsImJlZm9yZUNyZWF0ZSIsImRhdGFPcHRpb25zIiwiY29tcHV0ZWRPcHRpb25zIiwibWV0aG9kcyIsIndhdGNoT3B0aW9ucyIsInByb3ZpZGUiLCJwcm92aWRlT3B0aW9ucyIsImluamVjdCIsImluamVjdE9wdGlvbnMiLCJiZWZvcmVNb3VudCIsImJlZm9yZVVwZGF0ZSIsImFjdGl2YXRlZCIsImRlYWN0aXZhdGVkIiwiYmVmb3JlRGVzdHJveSIsImJlZm9yZVVubW91bnQiLCJkZXN0cm95ZWQiLCJ1bm1vdW50ZWQiLCJyZW5kZXJUcmFja2VkIiwicmVuZGVyVHJpZ2dlcmVkIiwiZXJyb3JDYXB0dXJlZCIsInNlcnZlclByZWZldGNoIiwiZXhwb3NlIiwiaW5oZXJpdEF0dHJzIiwiY29tcG9uZW50cyIsImZpbHRlcnMiLCJjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMiLCJyZXNvbHZlSW5qZWN0aW9ucyIsIm1ldGhvZEhhbmRsZXIiLCJ3cml0YWJsZSIsImNyZWF0ZVdhdGNoZXIiLCJwcm92aWRlcyIsInJlZ2lzdGVyTGlmZWN5Y2xlSG9vayIsInJlZ2lzdGVyIiwiX2hvb2siLCJub3JtYWxpemVJbmplY3QiLCJoIiwiZ2V0dGVyIiwiY3JlYXRlUGF0aEdldHRlciIsImhhbmRsZXIiLCJiYXNlIiwibWl4aW5zIiwiZXh0ZW5kcyIsImV4dGVuZHNPcHRpb25zIiwiZ2xvYmFsTWl4aW5zIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwicmVzb2x2ZWQiLCJtZXJnZU9wdGlvbnMiLCJzdHJhdHMiLCJhc01peGluIiwic3RyYXQiLCJpbnRlcm5hbE9wdGlvbk1lcmdlU3RyYXRzIiwibWVyZ2VEYXRhRm4iLCJtZXJnZUVtaXRzT3JQcm9wc09wdGlvbnMiLCJlbWl0cyIsIm1lcmdlT2JqZWN0T3B0aW9ucyIsIm1lcmdlQXNBcnJheSIsIm1lcmdlV2F0Y2hPcHRpb25zIiwibWVyZ2VJbmplY3QiLCJtZXJnZWREYXRhRm4iLCJtZXJnZWQiLCJjcmVhdGVBcHBDb250ZXh0IiwiaXNOYXRpdmVUYWciLCJwZXJmb3JtYW5jZSIsImNvbXBpbGVyT3B0aW9ucyIsIldlYWtNYXAiLCJ1aWQkMSIsImNyZWF0ZUFwcEFQSSIsImNyZWF0ZUFwcCIsInJvb3RDb21wb25lbnQiLCJyb290UHJvcHMiLCJjb250ZXh0IiwiaW5zdGFsbGVkUGx1Z2lucyIsInBsdWdpbkNsZWFudXBGbnMiLCJfdWlkIiwiX2NvbXBvbmVudCIsIl9wcm9wcyIsIl9jb250YWluZXIiLCJfY29udGV4dCIsIl9pbnN0YW5jZSIsInVzZSIsInBsdWdpbiIsImluc3RhbGwiLCJtaXhpbiIsInZhbGlkYXRlQ29tcG9uZW50TmFtZSIsImRpcmVjdGl2ZSIsInJvb3RDb250YWluZXIiLCJpc0h5ZHJhdGUiLCJfX3Z1ZV9hcHBfXyIsIl9jZVZOb2RlIiwib25Vbm1vdW50IiwiY2xlYW51cEZuIiwicnVuV2l0aENvbnRleHQiLCJsYXN0QXBwIiwiY3VycmVudEFwcCIsInBhcmVudFByb3ZpZGVzIiwiZGVmYXVsdFZhbHVlIiwidHJlYXREZWZhdWx0QXNGYWN0b3J5IiwiYXJndW1lbnRzIiwiaGFzSW5qZWN0aW9uQ29udGV4dCIsImludGVybmFsT2JqZWN0UHJvdG8iLCJjcmVhdGVJbnRlcm5hbE9iamVjdCIsImlzSW50ZXJuYWxPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImluaXRQcm9wcyIsImlzU3RhdGVmdWwiLCJpc1NTUiIsInByb3BzRGVmYXVsdHMiLCJzZXRGdWxsUHJvcHMiLCJ2YWxpZGF0ZVByb3BzIiwiaXNJbkhtckNvbnRleHQiLCJ1cGRhdGVQcm9wcyIsInJhd1ByZXZQcm9wcyIsInJhd0N1cnJlbnRQcm9wcyIsImhhc0F0dHJzQ2hhbmdlZCIsInByb3BzVG9VcGRhdGUiLCJkeW5hbWljUHJvcHMiLCJpc0VtaXRMaXN0ZW5lciIsImVtaXRzT3B0aW9ucyIsImNhbWVsaXplZEtleSIsInJlc29sdmVQcm9wVmFsdWUiLCJrZWJhYktleSIsIm5lZWRDYXN0S2V5cyIsInJhd0Nhc3RWYWx1ZXMiLCJjYW1lbEtleSIsImNhc3RWYWx1ZXMiLCJpc0Fic2VudCIsImhhc0RlZmF1bHQiLCJfc2V0UHJvcCIsIm1peGluUHJvcHNDYWNoZSIsIm5vcm1hbGl6ZVByb3BzT3B0aW9ucyIsImhhc0V4dGVuZHMiLCJleHRlbmRQcm9wcyIsInJhdzIiLCJub3JtYWxpemVkS2V5IiwidmFsaWRhdGVQcm9wTmFtZSIsInByb3AiLCJwcm9wVHlwZSIsInNob3VsZENhc3QiLCJzaG91bGRDYXN0VHJ1ZSIsInR5cGVOYW1lIiwiZ2V0VHlwZSIsImN0b3IiLCJyZXNvbHZlZFZhbHVlcyIsInZhbGlkYXRlUHJvcCIsInJlcXVpcmVkIiwidmFsaWRhdG9yIiwic2tpcENoZWNrIiwiaXNWYWxpZCIsInR5cGVzIiwiZXhwZWN0ZWRUeXBlcyIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsImdldEludmFsaWRUeXBlTWVzc2FnZSIsImlzU2ltcGxlVHlwZSIsInQiLCJtZXNzYWdlIiwicmVjZWl2ZWRUeXBlIiwiZXhwZWN0ZWRWYWx1ZSIsInN0eWxlVmFsdWUiLCJyZWNlaXZlZFZhbHVlIiwiaXNFeHBsaWNhYmxlIiwiaXNCb29sZWFuIiwiZXhwbGljaXRUeXBlcyIsImVsZW0iLCJpc0ludGVybmFsS2V5Iiwibm9ybWFsaXplU2xvdFZhbHVlIiwibm9ybWFsaXplU2xvdCIsInJhd1Nsb3QiLCJub3JtYWxpemVPYmplY3RTbG90cyIsInJhd1Nsb3RzIiwiX2N0eCIsIm5vcm1hbGl6ZVZOb2RlU2xvdHMiLCJhc3NpZ25TbG90cyIsImluaXRTbG90cyIsInVwZGF0ZVNsb3RzIiwibmVlZERlbGV0aW9uQ2hlY2siLCJkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQiLCIkc3RhYmxlIiwic3VwcG9ydGVkIiwicGVyZiIsInN0YXJ0TWVhc3VyZSIsImlzU3VwcG9ydGVkIiwibWFyayIsIm5vdyIsIkRhdGUiLCJlbmRNZWFzdXJlIiwic3RhcnRUYWciLCJlbmRUYWciLCJtZWFzdXJlIiwiY2xlYXJNYXJrcyIsImluaXRGZWF0dXJlRmxhZ3MiLCJuZWVkV2FybiIsIm11bHRpIiwiY3JlYXRlUmVuZGVyZXIiLCJiYXNlQ3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25SZW5kZXJlciIsImNyZWF0ZUh5ZHJhdGlvbkZucyIsIl9fVlVFX18iLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaG9zdEluc2VydCIsImhvc3RQYXRjaFByb3AiLCJob3N0Q3JlYXRlRWxlbWVudCIsImhvc3RDcmVhdGVUZXh0IiwiaG9zdENyZWF0ZUNvbW1lbnQiLCJzZXRUZXh0IiwiaG9zdFNldFRleHQiLCJzZXRFbGVtZW50VGV4dCIsImhvc3RTZXRFbGVtZW50VGV4dCIsImhvc3RQYXJlbnROb2RlIiwiaG9zdE5leHRTaWJsaW5nIiwic2V0U2NvcGVJZCIsImhvc3RTZXRTY29wZUlkIiwiaW5zZXJ0U3RhdGljQ29udGVudCIsImhvc3RJbnNlcnRTdGF0aWNDb250ZW50IiwiZ2V0TmV4dEhvc3ROb2RlIiwicHJvY2Vzc1RleHQiLCJwcm9jZXNzQ29tbWVudE5vZGUiLCJtb3VudFN0YXRpY05vZGUiLCJwYXRjaFN0YXRpY05vZGUiLCJwcm9jZXNzRnJhZ21lbnQiLCJwcm9jZXNzRWxlbWVudCIsInByb2Nlc3NDb21wb25lbnQiLCJyZW1vdmVTdGF0aWNOb2RlIiwibW92ZVN0YXRpY05vZGUiLCJtb3VudEVsZW1lbnQiLCJwYXRjaEVsZW1lbnQiLCJpcyIsInJlc29sdmVDaGlsZHJlbk5hbWVzcGFjZSIsImZpbHRlclNpbmdsZVJvb3QiLCJjbG9uZUlmTW91bnRlZCIsIl9fdm5vZGUiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwidG9nZ2xlUmVjdXJzZSIsIm9uVm5vZGVCZWZvcmVVcGRhdGUiLCJwYXRjaFByb3BzIiwiY2xhc3MiLCJvblZub2RlVXBkYXRlZCIsIm9sZENoaWxkcmVuIiwibmV3Q2hpbGRyZW4iLCJmYWxsYmFja0NvbnRhaW5lciIsIm9sZFZOb2RlIiwibmV3Vk5vZGUiLCJmcmFnbWVudFN0YXJ0QW5jaG9yIiwiZnJhZ21lbnRFbmRBbmNob3IiLCJ1cGRhdGVDb21wb25lbnQiLCJpbml0aWFsVk5vZGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZSIsInNldHVwQ29tcG9uZW50IiwiYXN5bmNEZXAiLCJyZWdpc3RlckRlcCIsInNldHVwUmVuZGVyRWZmZWN0Iiwic2hvdWxkVXBkYXRlQ29tcG9uZW50IiwiYXN5bmNSZXNvbHZlZCIsInVwZGF0ZUNvbXBvbmVudFByZVJlbmRlciIsImNvbXBvbmVudFVwZGF0ZUZuIiwiYm0iLCJpc0FzeW5jV3JhcHBlclZOb2RlIiwiaHlkcmF0ZVN1YlRyZWUiLCJyZW5kZXJDb21wb25lbnRSb290IiwiX2luamVjdENoaWxkU3R5bGUiLCJzY29wZWRJbml0aWFsVk5vZGUiLCJidSIsInUiLCJub25IeWRyYXRlZEFzeW5jUm9vdCIsImxvY2F0ZU5vbkh5ZHJhdGVkQXN5bmNSb290Iiwib3JpZ2luTmV4dCIsIm5leHRUcmVlIiwicHJldlRyZWUiLCJ1cGRhdGVIT0NIb3N0RWwiLCJzY29wZSIsIm9uIiwib2ZmIiwicnVuIiwicnVuSWZEaXJ0eSIsInNjaGVkdWxlciIsIm9uVHJhY2siLCJydGMiLCJvblRyaWdnZXIiLCJydGciLCJuZXh0Vk5vZGUiLCJwcmV2UHJvcHMiLCJjMSIsInByZXZTaGFwZUZsYWciLCJjMiIsInBhdGNoS2V5ZWRDaGlsZHJlbiIsInBhdGNoVW5rZXllZENoaWxkcmVuIiwidW5tb3VudENoaWxkcmVuIiwib2xkTGVuZ3RoIiwibmV3TGVuZ3RoIiwiY29tbW9uTGVuZ3RoIiwiTWF0aCIsIm1pbiIsIm5leHRDaGlsZCIsImwyIiwiZTEiLCJlMiIsIm5leHRQb3MiLCJzMSIsInMyIiwia2V5VG9OZXdJbmRleE1hcCIsInBhdGNoZWQiLCJ0b0JlUGF0Y2hlZCIsIm1vdmVkIiwibWF4TmV3SW5kZXhTb0ZhciIsIm5ld0luZGV4VG9PbGRJbmRleE1hcCIsInByZXZDaGlsZCIsIm5ld0luZGV4IiwiaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UiLCJnZXRTZXF1ZW5jZSIsIm5leHRJbmRleCIsIm5lZWRUcmFuc2l0aW9uMiIsInJlbW92ZTIiLCJwZXJmb3JtTGVhdmUiLCJjYWNoZUluZGV4Iiwic2hvdWxkSW52b2tlRGlycyIsInNob3VsZEludm9rZVZub2RlSG9vayIsIm9uVm5vZGVCZWZvcmVVbm1vdW50IiwidW5tb3VudENvbXBvbmVudCIsImhhc09uY2UiLCJyZW1vdmVGcmFnbWVudCIsInBlcmZvcm1SZW1vdmUiLCJwZW5kaW5nQnJhbmNoIiwic3VzcGVuc2VJZCIsInBlbmRpbmdJZCIsImRlcHMiLCJ0ZWxlcG9ydEVuZCIsImN1cnJlbnROYW1lc3BhY2UiLCJlbmNvZGluZyIsImFsbG93ZWQiLCJzaGFsbG93IiwiY2gxIiwiY2gyIiwiYXJyIiwibGVuIiwiYXJySSIsInN1YkNvbXBvbmVudCIsInNzckNvbnRleHRLZXkiLCJ1c2VTU1JDb250ZXh0Iiwid2F0Y2hFZmZlY3QiLCJkb1dhdGNoIiwid2F0Y2hQb3N0RWZmZWN0Iiwid2F0Y2hTeW5jRWZmZWN0IiwiaW1tZWRpYXRlIiwiYmFzZVdhdGNoT3B0aW9ucyIsIm9uV2FybiIsInNzckNsZWFudXAiLCJfX3dhdGNoZXJIYW5kbGVzIiwid2F0Y2hTdG9wSGFuZGxlIiwicmVzdW1lIiwicGF1c2UiLCJpc1ByZSIsImlzRmlyc3RSdW4iLCJhdWdtZW50Sm9iIiwid2F0Y2hIYW5kbGUiLCJwYXRoIiwic2VnbWVudHMiLCJ1c2VNb2RlbCIsImNhbWVsaXplZE5hbWUiLCJoeXBoZW5hdGVkTmFtZSIsImdldE1vZGVsTW9kaWZpZXJzIiwibG9jYWxWYWx1ZSIsInByZXZTZXRWYWx1ZSIsInByZXZFbWl0dGVkVmFsdWUiLCJwcm9wVmFsdWUiLCJlbWl0dGVkVmFsdWUiLCJpMiIsIm1vZGVsTmFtZSIsIm1vZGVsTW9kaWZpZXJzIiwicmF3QXJncyIsIm51bWJlciIsImxvd2VyQ2FzZUV2ZW50IiwiaGFuZGxlck5hbWUiLCJvbmNlSGFuZGxlciIsImVtaXR0ZWQiLCJub3JtYWxpemVFbWl0c09wdGlvbnMiLCJleHRlbmRFbWl0cyIsIm5vcm1hbGl6ZWRGcm9tRXh0ZW5kIiwiYWNjZXNzZWRBdHRycyIsIndpdGhQcm94eSIsImZhbGx0aHJvdWdoQXR0cnMiLCJwcm94eVRvVXNlIiwidGhpc1Byb3h5IiwiUHJveHkiLCJyZWNlaXZlciIsInJlbmRlcjIiLCJnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2giLCJibG9ja1N0YWNrIiwic2V0Um9vdCIsImdldENoaWxkUm9vdCIsImZpbHRlck1vZGVsTGlzdGVuZXJzIiwiYWxsQXR0cnMiLCJldmVudEF0dHJzIiwiZXh0cmFBdHRycyIsImlzRWxlbWVudFJvb3QiLCJyYXdDaGlsZHJlbiIsImNoaWxkUm9vdCIsImR5bmFtaWNJbmRleCIsInVwZGF0ZWRSb290IiwicmVjdXJzZSIsInNpbmdsZVJvb3QiLCJwcmV2Q2hpbGRyZW4iLCJuZXh0UHJvcHMiLCJuZXh0Q2hpbGRyZW4iLCJoYXNQcm9wc0NoYW5nZWQiLCJuZXh0S2V5cyIsImFjdGl2ZUJyYW5jaCIsIl9faXNTdXNwZW5zZSIsIlN1c3BlbnNlSW1wbCIsIm1vdW50U3VzcGVuc2UiLCJpc0luRmFsbGJhY2siLCJwYXRjaFN1c3BlbnNlIiwiaHlkcmF0ZVN1c3BlbnNlIiwibm9ybWFsaXplIiwibm9ybWFsaXplU3VzcGVuc2VDaGlsZHJlbiIsIlN1c3BlbnNlIiwidHJpZ2dlckV2ZW50IiwiZXZlbnRMaXN0ZW5lciIsImhpZGRlbkNvbnRhaW5lciIsImNyZWF0ZVN1c3BlbnNlQm91bmRhcnkiLCJzZXRBY3RpdmVCcmFuY2giLCJuZXdCcmFuY2giLCJuZXdGYWxsYmFjayIsImlzSHlkcmF0aW5nIiwiZWZmZWN0cyIsInBhcmVudFN1c3BlbnNlSWQiLCJpc1N1c3BlbnNpYmxlIiwiaXNWTm9kZVN1c3BlbnNpYmxlIiwiaW5pdGlhbEFuY2hvciIsInN5bmMiLCJwYXJlbnRDb21wb25lbnQyIiwiZGVsYXlFbnRlciIsImhhc1VucmVzb2x2ZWRBbmNlc3RvciIsImZhbGxiYWNrVk5vZGUiLCJuYW1lc3BhY2UyIiwibW91bnRGYWxsYmFjayIsIm9wdGltaXplZDIiLCJpc0luUGVuZGluZ1N1c3BlbnNlIiwiaHlkcmF0ZWRFbCIsImFzeW5jU2V0dXBSZXN1bHQiLCJoYW5kbGVTZXR1cFJlc3VsdCIsInBhcmVudFN1c3BlbnNlMiIsImRvY3VtZW50IiwiaXNTbG90Q2hpbGRyZW4iLCJub3JtYWxpemVTdXNwZW5zZVNsb3QiLCJibG9jayIsInRyYWNrQmxvY2siLCJpc0Jsb2NrVHJlZUVuYWJsZWQiLCJjdXJyZW50QmxvY2siLCJjbG9zZUJsb2NrIiwic2luZ2xlQ2hpbGQiLCJicmFuY2giLCJkaXNhYmxlVHJhY2tpbmciLCJzZXR1cEJsb2NrIiwiY3JlYXRlRWxlbWVudEJsb2NrIiwiY3JlYXRlQmFzZVZOb2RlIiwiX192X2lzVk5vZGUiLCJ2bm9kZUFyZ3NUcmFuc2Zvcm1lciIsInRyYW5zZm9ybVZOb2RlQXJncyIsInRyYW5zZm9ybWVyIiwiY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybSIsIl9jcmVhdGVWTm9kZSIsIm5vcm1hbGl6ZUtleSIsIm5vcm1hbGl6ZVJlZiIsInJlZl9rZXkiLCJyZWZfZm9yIiwiaXNCbG9ja05vZGUiLCJuZWVkRnVsbENoaWxkcmVuTm9ybWFsaXphdGlvbiIsIl9fdl9za2lwIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJjbG9uZWQiLCJndWFyZFJlYWN0aXZlUHJvcHMiLCJrbGFzcyIsImV4dHJhUHJvcHMiLCJtZXJnZVJlZiIsImNsb25lVHJhbnNpdGlvbiIsIm1lcmdlZFByb3BzIiwibWVyZ2VQcm9wcyIsImRlZXBDbG9uZVZOb2RlIiwidGV4dCIsImZsYWciLCJjcmVhdGVTdGF0aWNWTm9kZSIsIm51bWJlck9mTm9kZXMiLCJjcmVhdGVDb21tZW50Vk5vZGUiLCJhc0Jsb2NrIiwibWVtbyIsInNsb3RGbGFnIiwidG9NZXJnZSIsImluY29taW5nIiwiZW1wdHlBcHBDb250ZXh0IiwiZXhwb3NlUHJveHkiLCJiYyIsInNwIiwiaW50ZXJuYWxTZXRDdXJyZW50SW5zdGFuY2UiLCJzZXRJblNTUlNldHVwU3RhdGUiLCJnIiwicmVnaXN0ZXJHbG9iYWxTZXR0ZXIiLCJzZXR0ZXIiLCJzZXR0ZXJzIiwiaXNCdWlsdEluVGFnIiwic2V0dXBSZXN1bHQiLCJzZXR1cFN0YXRlZnVsQ29tcG9uZW50IiwibmFtZXMiLCJpc1J1bnRpbWVPbmx5IiwicmVzb2x2ZWRSZXN1bHQiLCJmaW5pc2hDb21wb25lbnRTZXR1cCIsIl9fc3NySW5saW5lUmVuZGVyIiwic3NyUmVuZGVyIiwiZGV2dG9vbHNSYXdTZXR1cFN0YXRlIiwiY29tcGlsZSIsImluc3RhbGxXaXRoUHJveHkiLCJyZWdpc3RlclJ1bnRpbWVDb21waWxlciIsIl9jb21waWxlIiwiX3JjIiwic2tpcE9wdGlvbnMiLCJ0ZW1wbGF0ZSIsImRlbGltaXRlcnMiLCJjb21wb25lbnRDb21waWxlck9wdGlvbnMiLCJmaW5hbENvbXBpbGVyT3B0aW9ucyIsImF0dHJzUHJveHlIYW5kbGVycyIsImRlbGV0ZVByb3BlcnR5IiwiZ2V0U2xvdHNQcm94eSIsImV4cG9zZWRUeXBlIiwiYXR0cnNQcm94eSIsInNsb3RzUHJveHkiLCJmcmVlemUiLCJjbGFzc2lmeVJFIiwiY2xhc3NpZnkiLCJ0b1VwcGVyQ2FzZSIsImluY2x1ZGVJbmZlcnJlZCIsImRpc3BsYXlOYW1lIiwiX19uYW1lIiwiX19maWxlIiwiaW5mZXJGcm9tUmVnaXN0cnkiLCJnZXR0ZXJPck9wdGlvbnMiLCJkZWJ1Z09wdGlvbnMiLCJ3YXJuUmVjdXJzaXZlQ29tcHV0ZWQiLCJfd2FyblJlY3Vyc2l2ZSIsInByb3BzT3JDaGlsZHJlbiIsInByb3RvdHlwZSIsImluaXRDdXN0b21Gb3JtYXR0ZXIiLCJ2dWVTdHlsZSIsIm51bWJlclN0eWxlIiwic3RyaW5nU3R5bGUiLCJrZXl3b3JkU3R5bGUiLCJmb3JtYXR0ZXIiLCJfX3Z1ZV9jdXN0b21fZm9ybWF0dGVyIiwiaGVhZGVyIiwiX19pc1Z1ZSIsImdlblJlZkZsYWciLCJmb3JtYXRWYWx1ZSIsIl92YWx1ZSIsImhhc0JvZHkiLCJib2R5IiwiZm9ybWF0SW5zdGFuY2UiLCJibG9ja3MiLCJjcmVhdGVJbnN0YW5jZUJsb2NrIiwiZXh0cmFjdEtleXMiLCJvYmplY3QiLCJhc1JhdyIsIkNvbXAiLCJleHRyYWN0ZWQiLCJpc0tleU9mVHlwZSIsImRldnRvb2xzRm9ybWF0dGVycyIsIndpdGhNZW1vIiwiaXNNZW1vU2FtZSIsIkVycm9yVHlwZVN0cmluZ3MiLCJkZXZ0b29scyIsInNldERldnRvb2xzSG9vayIsIl9zc3JVdGlscyIsInNzclV0aWxzIiwicmVzb2x2ZUZpbHRlciIsImNvbXBhdFV0aWxzIiwiRGVwcmVjYXRpb25UeXBlcyIsImNyZWF0ZUVsZW1lbnRWTm9kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\n");

/***/ }),

/***/ "./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTransition: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.BaseTransition),\n/* harmony export */   BaseTransitionPropsValidators: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.BaseTransitionPropsValidators),\n/* harmony export */   Comment: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Comment),\n/* harmony export */   DeprecationTypes: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.DeprecationTypes),\n/* harmony export */   EffectScope: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.EffectScope),\n/* harmony export */   ErrorCodes: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ErrorCodes),\n/* harmony export */   ErrorTypeStrings: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ErrorTypeStrings),\n/* harmony export */   Fragment: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Fragment),\n/* harmony export */   KeepAlive: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.KeepAlive),\n/* harmony export */   ReactiveEffect: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ReactiveEffect),\n/* harmony export */   Static: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Static),\n/* harmony export */   Suspense: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Suspense),\n/* harmony export */   Teleport: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Teleport),\n/* harmony export */   Text: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Text),\n/* harmony export */   TrackOpTypes: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.TrackOpTypes),\n/* harmony export */   Transition: () => (/* binding */ Transition),\n/* harmony export */   TransitionGroup: () => (/* binding */ TransitionGroup),\n/* harmony export */   TriggerOpTypes: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.TriggerOpTypes),\n/* harmony export */   VueElement: () => (/* binding */ VueElement),\n/* harmony export */   assertNumber: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.assertNumber),\n/* harmony export */   callWithAsyncErrorHandling: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.callWithAsyncErrorHandling),\n/* harmony export */   callWithErrorHandling: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.callWithErrorHandling),\n/* harmony export */   camelize: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.camelize),\n/* harmony export */   capitalize: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.capitalize),\n/* harmony export */   cloneVNode: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.cloneVNode),\n/* harmony export */   compatUtils: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.compatUtils),\n/* harmony export */   computed: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.computed),\n/* harmony export */   createApp: () => (/* binding */ createApp),\n/* harmony export */   createBlock: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createBlock),\n/* harmony export */   createCommentVNode: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode),\n/* harmony export */   createElementBlock: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createElementBlock),\n/* harmony export */   createElementVNode: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createElementVNode),\n/* harmony export */   createHydrationRenderer: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createHydrationRenderer),\n/* harmony export */   createPropsRestProxy: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createPropsRestProxy),\n/* harmony export */   createRenderer: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createRenderer),\n/* harmony export */   createSSRApp: () => (/* binding */ createSSRApp),\n/* harmony export */   createSlots: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createSlots),\n/* harmony export */   createStaticVNode: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createStaticVNode),\n/* harmony export */   createTextVNode: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createTextVNode),\n/* harmony export */   createVNode: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createVNode),\n/* harmony export */   customRef: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.customRef),\n/* harmony export */   defineAsyncComponent: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineAsyncComponent),\n/* harmony export */   defineComponent: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineComponent),\n/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement),\n/* harmony export */   defineEmits: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineEmits),\n/* harmony export */   defineExpose: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineExpose),\n/* harmony export */   defineModel: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineModel),\n/* harmony export */   defineOptions: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineOptions),\n/* harmony export */   defineProps: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineProps),\n/* harmony export */   defineSSRCustomElement: () => (/* binding */ defineSSRCustomElement),\n/* harmony export */   defineSlots: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineSlots),\n/* harmony export */   devtools: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.devtools),\n/* harmony export */   effect: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.effect),\n/* harmony export */   effectScope: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.effectScope),\n/* harmony export */   getCurrentInstance: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance),\n/* harmony export */   getCurrentScope: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope),\n/* harmony export */   getCurrentWatcher: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentWatcher),\n/* harmony export */   getTransitionRawChildren: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getTransitionRawChildren),\n/* harmony export */   guardReactiveProps: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.guardReactiveProps),\n/* harmony export */   h: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   handleError: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.handleError),\n/* harmony export */   hasInjectionContext: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.hasInjectionContext),\n/* harmony export */   hydrate: () => (/* binding */ hydrate),\n/* harmony export */   hydrateOnIdle: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.hydrateOnIdle),\n/* harmony export */   hydrateOnInteraction: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.hydrateOnInteraction),\n/* harmony export */   hydrateOnMediaQuery: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.hydrateOnMediaQuery),\n/* harmony export */   hydrateOnVisible: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.hydrateOnVisible),\n/* harmony export */   initCustomFormatter: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.initCustomFormatter),\n/* harmony export */   initDirectivesForSSR: () => (/* binding */ initDirectivesForSSR),\n/* harmony export */   inject: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.inject),\n/* harmony export */   isMemoSame: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isMemoSame),\n/* harmony export */   isProxy: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isProxy),\n/* harmony export */   isReactive: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isReactive),\n/* harmony export */   isReadonly: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isReadonly),\n/* harmony export */   isRef: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isRef),\n/* harmony export */   isRuntimeOnly: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isRuntimeOnly),\n/* harmony export */   isShallow: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isShallow),\n/* harmony export */   isVNode: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isVNode),\n/* harmony export */   markRaw: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.markRaw),\n/* harmony export */   mergeDefaults: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.mergeDefaults),\n/* harmony export */   mergeModels: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.mergeModels),\n/* harmony export */   mergeProps: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.mergeProps),\n/* harmony export */   nextTick: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.nextTick),\n/* harmony export */   normalizeClass: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.normalizeClass),\n/* harmony export */   normalizeProps: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.normalizeProps),\n/* harmony export */   normalizeStyle: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle),\n/* harmony export */   onActivated: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onActivated),\n/* harmony export */   onBeforeMount: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onBeforeMount),\n/* harmony export */   onBeforeUnmount: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onBeforeUnmount),\n/* harmony export */   onBeforeUpdate: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onBeforeUpdate),\n/* harmony export */   onDeactivated: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onDeactivated),\n/* harmony export */   onErrorCaptured: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onErrorCaptured),\n/* harmony export */   onMounted: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onMounted),\n/* harmony export */   onRenderTracked: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onRenderTracked),\n/* harmony export */   onRenderTriggered: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onRenderTriggered),\n/* harmony export */   onScopeDispose: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onScopeDispose),\n/* harmony export */   onServerPrefetch: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onServerPrefetch),\n/* harmony export */   onUnmounted: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onUnmounted),\n/* harmony export */   onUpdated: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onUpdated),\n/* harmony export */   onWatcherCleanup: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onWatcherCleanup),\n/* harmony export */   openBlock: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.openBlock),\n/* harmony export */   popScopeId: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.popScopeId),\n/* harmony export */   provide: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.provide),\n/* harmony export */   proxyRefs: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.proxyRefs),\n/* harmony export */   pushScopeId: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.pushScopeId),\n/* harmony export */   queuePostFlushCb: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.queuePostFlushCb),\n/* harmony export */   reactive: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.reactive),\n/* harmony export */   readonly: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.readonly),\n/* harmony export */   ref: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ref),\n/* harmony export */   registerRuntimeCompiler: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.registerRuntimeCompiler),\n/* harmony export */   render: () => (/* binding */ render),\n/* harmony export */   renderList: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.renderList),\n/* harmony export */   renderSlot: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.renderSlot),\n/* harmony export */   resolveComponent: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveComponent),\n/* harmony export */   resolveDirective: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveDirective),\n/* harmony export */   resolveDynamicComponent: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent),\n/* harmony export */   resolveFilter: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveFilter),\n/* harmony export */   resolveTransitionHooks: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveTransitionHooks),\n/* harmony export */   setBlockTracking: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setBlockTracking),\n/* harmony export */   setDevtoolsHook: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setDevtoolsHook),\n/* harmony export */   setTransitionHooks: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setTransitionHooks),\n/* harmony export */   shallowReactive: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.shallowReactive),\n/* harmony export */   shallowReadonly: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly),\n/* harmony export */   shallowRef: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.shallowRef),\n/* harmony export */   ssrContextKey: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ssrContextKey),\n/* harmony export */   ssrUtils: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ssrUtils),\n/* harmony export */   stop: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.stop),\n/* harmony export */   toDisplayString: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toDisplayString),\n/* harmony export */   toHandlerKey: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toHandlerKey),\n/* harmony export */   toHandlers: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toHandlers),\n/* harmony export */   toRaw: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toRaw),\n/* harmony export */   toRef: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toRef),\n/* harmony export */   toRefs: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toRefs),\n/* harmony export */   toValue: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toValue),\n/* harmony export */   transformVNodeArgs: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.transformVNodeArgs),\n/* harmony export */   triggerRef: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.triggerRef),\n/* harmony export */   unref: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.unref),\n/* harmony export */   useAttrs: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useAttrs),\n/* harmony export */   useCssModule: () => (/* binding */ useCssModule),\n/* harmony export */   useCssVars: () => (/* binding */ useCssVars),\n/* harmony export */   useHost: () => (/* binding */ useHost),\n/* harmony export */   useId: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useId),\n/* harmony export */   useModel: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useModel),\n/* harmony export */   useSSRContext: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useSSRContext),\n/* harmony export */   useShadowRoot: () => (/* binding */ useShadowRoot),\n/* harmony export */   useSlots: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useSlots),\n/* harmony export */   useTemplateRef: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useTemplateRef),\n/* harmony export */   useTransitionState: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useTransitionState),\n/* harmony export */   vModelCheckbox: () => (/* binding */ vModelCheckbox),\n/* harmony export */   vModelDynamic: () => (/* binding */ vModelDynamic),\n/* harmony export */   vModelRadio: () => (/* binding */ vModelRadio),\n/* harmony export */   vModelSelect: () => (/* binding */ vModelSelect),\n/* harmony export */   vModelText: () => (/* binding */ vModelText),\n/* harmony export */   vShow: () => (/* binding */ vShow),\n/* harmony export */   version: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.version),\n/* harmony export */   warn: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn),\n/* harmony export */   watch: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.watch),\n/* harmony export */   watchEffect: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.watchEffect),\n/* harmony export */   watchPostEffect: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.watchPostEffect),\n/* harmony export */   watchSyncEffect: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.watchSyncEffect),\n/* harmony export */   withAsyncContext: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withAsyncContext),\n/* harmony export */   withCtx: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withCtx),\n/* harmony export */   withDefaults: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withDefaults),\n/* harmony export */   withDirectives: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withDirectives),\n/* harmony export */   withKeys: () => (/* binding */ withKeys),\n/* harmony export */   withMemo: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withMemo),\n/* harmony export */   withModifiers: () => (/* binding */ withModifiers),\n/* harmony export */   withScopeId: () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withScopeId)\n/* harmony export */ });\n/* harmony import */ var _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/runtime-core */ \"./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\");\n/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vue/shared */ \"./node_modules/@vue/shared/dist/shared.esm-bundler.js\");\n/* harmony import */ var _vue_runtime_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @vue/runtime-core */ \"./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\");\n/**\n* @vue/runtime-dom v3.5.7\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n\n\n\nlet policy = void 0;\nconst tt = typeof window !== \"undefined\" && window.trustedTypes;\nif (tt) {\n  try {\n    policy = /* @__PURE__ */tt.createPolicy(\"vue\", {\n      createHTML: val => val\n    });\n  } catch (e) {\n     true && (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Error creating trusted types policy: ${e}`);\n  }\n}\nconst unsafeToTrustedHTML = policy ? val => policy.createHTML(val) : val => val;\nconst svgNS = \"http://www.w3.org/2000/svg\";\nconst mathmlNS = \"http://www.w3.org/1998/Math/MathML\";\nconst doc = typeof document !== \"undefined\" ? document : null;\nconst templateContainer = doc && /* @__PURE__ */doc.createElement(\"template\");\nconst nodeOps = {\n  insert: (child, parent, anchor) => {\n    parent.insertBefore(child, anchor || null);\n  },\n  remove: child => {\n    const parent = child.parentNode;\n    if (parent) {\n      parent.removeChild(child);\n    }\n  },\n  createElement: (tag, namespace, is, props) => {\n    const el = namespace === \"svg\" ? doc.createElementNS(svgNS, tag) : namespace === \"mathml\" ? doc.createElementNS(mathmlNS, tag) : is ? doc.createElement(tag, {\n      is\n    }) : doc.createElement(tag);\n    if (tag === \"select\" && props && props.multiple != null) {\n      el.setAttribute(\"multiple\", props.multiple);\n    }\n    return el;\n  },\n  createText: text => doc.createTextNode(text),\n  createComment: text => doc.createComment(text),\n  setText: (node, text) => {\n    node.nodeValue = text;\n  },\n  setElementText: (el, text) => {\n    el.textContent = text;\n  },\n  parentNode: node => node.parentNode,\n  nextSibling: node => node.nextSibling,\n  querySelector: selector => doc.querySelector(selector),\n  setScopeId(el, id) {\n    el.setAttribute(id, \"\");\n  },\n  // __UNSAFE__\n  // Reason: innerHTML.\n  // Static content here can only come from compiled templates.\n  // As long as the user only uses trusted templates, this is safe.\n  insertStaticContent(content, parent, anchor, namespace, start, end) {\n    const before = anchor ? anchor.previousSibling : parent.lastChild;\n    if (start && (start === end || start.nextSibling)) {\n      while (true) {\n        parent.insertBefore(start.cloneNode(true), anchor);\n        if (start === end || !(start = start.nextSibling)) break;\n      }\n    } else {\n      templateContainer.innerHTML = unsafeToTrustedHTML(namespace === \"svg\" ? `<svg>${content}</svg>` : namespace === \"mathml\" ? `<math>${content}</math>` : content);\n      const template = templateContainer.content;\n      if (namespace === \"svg\" || namespace === \"mathml\") {\n        const wrapper = template.firstChild;\n        while (wrapper.firstChild) {\n          template.appendChild(wrapper.firstChild);\n        }\n        template.removeChild(wrapper);\n      }\n      parent.insertBefore(template, anchor);\n    }\n    return [\n    // first\n    before ? before.nextSibling : parent.firstChild,\n    // last\n    anchor ? anchor.previousSibling : parent.lastChild];\n  }\n};\nconst TRANSITION = \"transition\";\nconst ANIMATION = \"animation\";\nconst vtcKey = Symbol(\"_vtc\");\nconst DOMTransitionPropsValidators = {\n  name: String,\n  type: String,\n  css: {\n    type: Boolean,\n    default: true\n  },\n  duration: [String, Number, Object],\n  enterFromClass: String,\n  enterActiveClass: String,\n  enterToClass: String,\n  appearFromClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  leaveFromClass: String,\n  leaveActiveClass: String,\n  leaveToClass: String\n};\nconst TransitionPropsValidators = /* @__PURE__ */(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.BaseTransitionPropsValidators, DOMTransitionPropsValidators);\nconst decorate$1 = t => {\n  t.displayName = \"Transition\";\n  t.props = TransitionPropsValidators;\n  return t;\n};\nconst Transition = /* @__PURE__ */decorate$1((props, {\n  slots\n}) => (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.h)(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.BaseTransition, resolveTransitionProps(props), slots));\nconst callHook = (hook, args = []) => {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(hook)) {\n    hook.forEach(h2 => h2(...args));\n  } else if (hook) {\n    hook(...args);\n  }\n};\nconst hasExplicitCallback = hook => {\n  return hook ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(hook) ? hook.some(h2 => h2.length > 1) : hook.length > 1 : false;\n};\nfunction resolveTransitionProps(rawProps) {\n  const baseProps = {};\n  for (const key in rawProps) {\n    if (!(key in DOMTransitionPropsValidators)) {\n      baseProps[key] = rawProps[key];\n    }\n  }\n  if (rawProps.css === false) {\n    return baseProps;\n  }\n  const {\n    name = \"v\",\n    type,\n    duration,\n    enterFromClass = `${name}-enter-from`,\n    enterActiveClass = `${name}-enter-active`,\n    enterToClass = `${name}-enter-to`,\n    appearFromClass = enterFromClass,\n    appearActiveClass = enterActiveClass,\n    appearToClass = enterToClass,\n    leaveFromClass = `${name}-leave-from`,\n    leaveActiveClass = `${name}-leave-active`,\n    leaveToClass = `${name}-leave-to`\n  } = rawProps;\n  const durations = normalizeDuration(duration);\n  const enterDuration = durations && durations[0];\n  const leaveDuration = durations && durations[1];\n  const {\n    onBeforeEnter,\n    onEnter,\n    onEnterCancelled,\n    onLeave,\n    onLeaveCancelled,\n    onBeforeAppear = onBeforeEnter,\n    onAppear = onEnter,\n    onAppearCancelled = onEnterCancelled\n  } = baseProps;\n  const finishEnter = (el, isAppear, done) => {\n    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);\n    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);\n    done && done();\n  };\n  const finishLeave = (el, done) => {\n    el._isLeaving = false;\n    removeTransitionClass(el, leaveFromClass);\n    removeTransitionClass(el, leaveToClass);\n    removeTransitionClass(el, leaveActiveClass);\n    done && done();\n  };\n  const makeEnterHook = isAppear => {\n    return (el, done) => {\n      const hook = isAppear ? onAppear : onEnter;\n      const resolve = () => finishEnter(el, isAppear, done);\n      callHook(hook, [el, resolve]);\n      nextFrame(() => {\n        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);\n        addTransitionClass(el, isAppear ? appearToClass : enterToClass);\n        if (!hasExplicitCallback(hook)) {\n          whenTransitionEnds(el, type, enterDuration, resolve);\n        }\n      });\n    };\n  };\n  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(baseProps, {\n    onBeforeEnter(el) {\n      callHook(onBeforeEnter, [el]);\n      addTransitionClass(el, enterFromClass);\n      addTransitionClass(el, enterActiveClass);\n    },\n    onBeforeAppear(el) {\n      callHook(onBeforeAppear, [el]);\n      addTransitionClass(el, appearFromClass);\n      addTransitionClass(el, appearActiveClass);\n    },\n    onEnter: makeEnterHook(false),\n    onAppear: makeEnterHook(true),\n    onLeave(el, done) {\n      el._isLeaving = true;\n      const resolve = () => finishLeave(el, done);\n      addTransitionClass(el, leaveFromClass);\n      addTransitionClass(el, leaveActiveClass);\n      forceReflow();\n      nextFrame(() => {\n        if (!el._isLeaving) {\n          return;\n        }\n        removeTransitionClass(el, leaveFromClass);\n        addTransitionClass(el, leaveToClass);\n        if (!hasExplicitCallback(onLeave)) {\n          whenTransitionEnds(el, type, leaveDuration, resolve);\n        }\n      });\n      callHook(onLeave, [el, resolve]);\n    },\n    onEnterCancelled(el) {\n      finishEnter(el, false);\n      callHook(onEnterCancelled, [el]);\n    },\n    onAppearCancelled(el) {\n      finishEnter(el, true);\n      callHook(onAppearCancelled, [el]);\n    },\n    onLeaveCancelled(el) {\n      finishLeave(el);\n      callHook(onLeaveCancelled, [el]);\n    }\n  });\n}\nfunction normalizeDuration(duration) {\n  if (duration == null) {\n    return null;\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(duration)) {\n    return [NumberOf(duration.enter), NumberOf(duration.leave)];\n  } else {\n    const n = NumberOf(duration);\n    return [n, n];\n  }\n}\nfunction NumberOf(val) {\n  const res = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber)(val);\n  if (true) {\n    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.assertNumber)(res, \"<transition> explicit duration\");\n  }\n  return res;\n}\nfunction addTransitionClass(el, cls) {\n  cls.split(/\\s+/).forEach(c => c && el.classList.add(c));\n  (el[vtcKey] || (el[vtcKey] = /* @__PURE__ */new Set())).add(cls);\n}\nfunction removeTransitionClass(el, cls) {\n  cls.split(/\\s+/).forEach(c => c && el.classList.remove(c));\n  const _vtc = el[vtcKey];\n  if (_vtc) {\n    _vtc.delete(cls);\n    if (!_vtc.size) {\n      el[vtcKey] = void 0;\n    }\n  }\n}\nfunction nextFrame(cb) {\n  requestAnimationFrame(() => {\n    requestAnimationFrame(cb);\n  });\n}\nlet endId = 0;\nfunction whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {\n  const id = el._endId = ++endId;\n  const resolveIfNotStale = () => {\n    if (id === el._endId) {\n      resolve();\n    }\n  };\n  if (explicitTimeout != null) {\n    return setTimeout(resolveIfNotStale, explicitTimeout);\n  }\n  const {\n    type,\n    timeout,\n    propCount\n  } = getTransitionInfo(el, expectedType);\n  if (!type) {\n    return resolve();\n  }\n  const endEvent = type + \"end\";\n  let ended = 0;\n  const end = () => {\n    el.removeEventListener(endEvent, onEnd);\n    resolveIfNotStale();\n  };\n  const onEnd = e => {\n    if (e.target === el && ++ended >= propCount) {\n      end();\n    }\n  };\n  setTimeout(() => {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(endEvent, onEnd);\n}\nfunction getTransitionInfo(el, expectedType) {\n  const styles = window.getComputedStyle(el);\n  const getStyleProperties = key => (styles[key] || \"\").split(\", \");\n  const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);\n  const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);\n  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  const animationDelays = getStyleProperties(`${ANIMATION}Delay`);\n  const animationDurations = getStyleProperties(`${ANIMATION}Duration`);\n  const animationTimeout = getTimeout(animationDelays, animationDurations);\n  let type = null;\n  let timeout = 0;\n  let propCount = 0;\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;\n    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;\n  }\n  const hasTransform = type === TRANSITION && /\\b(transform|all)(,|$)/.test(getStyleProperties(`${TRANSITION}Property`).toString());\n  return {\n    type,\n    timeout,\n    propCount,\n    hasTransform\n  };\n}\nfunction getTimeout(delays, durations) {\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n  return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));\n}\nfunction toMs(s) {\n  if (s === \"auto\") return 0;\n  return Number(s.slice(0, -1).replace(\",\", \".\")) * 1e3;\n}\nfunction forceReflow() {\n  return document.body.offsetHeight;\n}\nfunction patchClass(el, value, isSVG) {\n  const transitionClasses = el[vtcKey];\n  if (transitionClasses) {\n    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(\" \");\n  }\n  if (value == null) {\n    el.removeAttribute(\"class\");\n  } else if (isSVG) {\n    el.setAttribute(\"class\", value);\n  } else {\n    el.className = value;\n  }\n}\nconst vShowOriginalDisplay = Symbol(\"_vod\");\nconst vShowHidden = Symbol(\"_vsh\");\nconst vShow = {\n  beforeMount(el, {\n    value\n  }, {\n    transition\n  }) {\n    el[vShowOriginalDisplay] = el.style.display === \"none\" ? \"\" : el.style.display;\n    if (transition && value) {\n      transition.beforeEnter(el);\n    } else {\n      setDisplay(el, value);\n    }\n  },\n  mounted(el, {\n    value\n  }, {\n    transition\n  }) {\n    if (transition && value) {\n      transition.enter(el);\n    }\n  },\n  updated(el, {\n    value,\n    oldValue\n  }, {\n    transition\n  }) {\n    if (!value === !oldValue) return;\n    if (transition) {\n      if (value) {\n        transition.beforeEnter(el);\n        setDisplay(el, true);\n        transition.enter(el);\n      } else {\n        transition.leave(el, () => {\n          setDisplay(el, false);\n        });\n      }\n    } else {\n      setDisplay(el, value);\n    }\n  },\n  beforeUnmount(el, {\n    value\n  }) {\n    setDisplay(el, value);\n  }\n};\nif (true) {\n  vShow.name = \"show\";\n}\nfunction setDisplay(el, value) {\n  el.style.display = value ? el[vShowOriginalDisplay] : \"none\";\n  el[vShowHidden] = !value;\n}\nfunction initVShowForSSR() {\n  vShow.getSSRProps = ({\n    value\n  }) => {\n    if (!value) {\n      return {\n        style: {\n          display: \"none\"\n        }\n      };\n    }\n  };\n}\nconst CSS_VAR_TEXT = Symbol( true ? \"CSS_VAR_TEXT\" : 0);\nfunction useCssVars(getter) {\n  const instance = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance)();\n  if (!instance) {\n     true && (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`useCssVars is called without current active component instance.`);\n    return;\n  }\n  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {\n    Array.from(document.querySelectorAll(`[data-v-owner=\"${instance.uid}\"]`)).forEach(node => setVarsOnNode(node, vars));\n  };\n  if (true) {\n    instance.getCssVars = () => getter(instance.proxy);\n  }\n  const setVars = () => {\n    const vars = getter(instance.proxy);\n    if (instance.ce) {\n      setVarsOnNode(instance.ce, vars);\n    } else {\n      setVarsOnVNode(instance.subTree, vars);\n    }\n    updateTeleports(vars);\n  };\n  (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onBeforeMount)(() => {\n    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.watchPostEffect)(setVars);\n  });\n  (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {\n    const ob = new MutationObserver(setVars);\n    ob.observe(instance.subTree.el.parentNode, {\n      childList: true\n    });\n    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => ob.disconnect());\n  });\n}\nfunction setVarsOnVNode(vnode, vars) {\n  if (vnode.shapeFlag & 128) {\n    const suspense = vnode.suspense;\n    vnode = suspense.activeBranch;\n    if (suspense.pendingBranch && !suspense.isHydrating) {\n      suspense.effects.push(() => {\n        setVarsOnVNode(suspense.activeBranch, vars);\n      });\n    }\n  }\n  while (vnode.component) {\n    vnode = vnode.component.subTree;\n  }\n  if (vnode.shapeFlag & 1 && vnode.el) {\n    setVarsOnNode(vnode.el, vars);\n  } else if (vnode.type === _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Fragment) {\n    vnode.children.forEach(c => setVarsOnVNode(c, vars));\n  } else if (vnode.type === _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Static) {\n    let {\n      el,\n      anchor\n    } = vnode;\n    while (el) {\n      setVarsOnNode(el, vars);\n      if (el === anchor) break;\n      el = el.nextSibling;\n    }\n  }\n}\nfunction setVarsOnNode(el, vars) {\n  if (el.nodeType === 1) {\n    const style = el.style;\n    let cssText = \"\";\n    for (const key in vars) {\n      style.setProperty(`--${key}`, vars[key]);\n      cssText += `--${key}: ${vars[key]};`;\n    }\n    style[CSS_VAR_TEXT] = cssText;\n  }\n}\nconst displayRE = /(^|;)\\s*display\\s*:/;\nfunction patchStyle(el, prev, next) {\n  const style = el.style;\n  const isCssString = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(next);\n  let hasControlledDisplay = false;\n  if (next && !isCssString) {\n    if (prev) {\n      if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(prev)) {\n        for (const key in prev) {\n          if (next[key] == null) {\n            setStyle(style, key, \"\");\n          }\n        }\n      } else {\n        for (const prevStyle of prev.split(\";\")) {\n          const key = prevStyle.slice(0, prevStyle.indexOf(\":\")).trim();\n          if (next[key] == null) {\n            setStyle(style, key, \"\");\n          }\n        }\n      }\n    }\n    for (const key in next) {\n      if (key === \"display\") {\n        hasControlledDisplay = true;\n      }\n      setStyle(style, key, next[key]);\n    }\n  } else {\n    if (isCssString) {\n      if (prev !== next) {\n        const cssVarText = style[CSS_VAR_TEXT];\n        if (cssVarText) {\n          next += \";\" + cssVarText;\n        }\n        style.cssText = next;\n        hasControlledDisplay = displayRE.test(next);\n      }\n    } else if (prev) {\n      el.removeAttribute(\"style\");\n    }\n  }\n  if (vShowOriginalDisplay in el) {\n    el[vShowOriginalDisplay] = hasControlledDisplay ? style.display : \"\";\n    if (el[vShowHidden]) {\n      style.display = \"none\";\n    }\n  }\n}\nconst semicolonRE = /[^\\\\];\\s*$/;\nconst importantRE = /\\s*!important$/;\nfunction setStyle(style, name, val) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(val)) {\n    val.forEach(v => setStyle(style, name, v));\n  } else {\n    if (val == null) val = \"\";\n    if (true) {\n      if (semicolonRE.test(val)) {\n        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Unexpected semicolon at the end of '${name}' style value: '${val}'`);\n      }\n    }\n    if (name.startsWith(\"--\")) {\n      style.setProperty(name, val);\n    } else {\n      const prefixed = autoPrefix(style, name);\n      if (importantRE.test(val)) {\n        style.setProperty((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(prefixed), val.replace(importantRE, \"\"), \"important\");\n      } else {\n        style[prefixed] = val;\n      }\n    }\n  }\n}\nconst prefixes = [\"Webkit\", \"Moz\", \"ms\"];\nconst prefixCache = {};\nfunction autoPrefix(style, rawName) {\n  const cached = prefixCache[rawName];\n  if (cached) {\n    return cached;\n  }\n  let name = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(rawName);\n  if (name !== \"filter\" && name in style) {\n    return prefixCache[rawName] = name;\n  }\n  name = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize)(name);\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefixed = prefixes[i] + name;\n    if (prefixed in style) {\n      return prefixCache[rawName] = prefixed;\n    }\n  }\n  return rawName;\n}\nconst xlinkNS = \"http://www.w3.org/1999/xlink\";\nfunction patchAttr(el, key, value, isSVG, instance, isBoolean = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSpecialBooleanAttr)(key)) {\n  if (isSVG && key.startsWith(\"xlink:\")) {\n    if (value == null) {\n      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (value == null || isBoolean && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.includeBooleanAttr)(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, isBoolean ? \"\" : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSymbol)(value) ? String(value) : value);\n    }\n  }\n}\nfunction patchDOMProp(el, key, value, parentComponent) {\n  if (key === \"innerHTML\" || key === \"textContent\") {\n    if (value != null) {\n      el[key] = key === \"innerHTML\" ? unsafeToTrustedHTML(value) : value;\n    }\n    return;\n  }\n  const tag = el.tagName;\n  if (key === \"value\" && tag !== \"PROGRESS\" &&\n  // custom elements may use _value internally\n  !tag.includes(\"-\")) {\n    const oldValue = tag === \"OPTION\" ? el.getAttribute(\"value\") || \"\" : el.value;\n    const newValue = value == null ?\n    // #11647: value should be set as empty string for null and undefined,\n    // but <input type=\"checkbox\"> should be set as 'on'.\n    el.type === \"checkbox\" ? \"on\" : \"\" : String(value);\n    if (oldValue !== newValue || !(\"_value\" in el)) {\n      el.value = newValue;\n    }\n    if (value == null) {\n      el.removeAttribute(key);\n    }\n    el._value = value;\n    return;\n  }\n  let needRemove = false;\n  if (value === \"\" || value == null) {\n    const type = typeof el[key];\n    if (type === \"boolean\") {\n      value = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.includeBooleanAttr)(value);\n    } else if (value == null && type === \"string\") {\n      value = \"\";\n      needRemove = true;\n    } else if (type === \"number\") {\n      value = 0;\n      needRemove = true;\n    }\n  }\n  try {\n    el[key] = value;\n  } catch (e) {\n    if ( true && !needRemove) {\n      (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Failed setting prop \"${key}\" on <${tag.toLowerCase()}>: value ${value} is invalid.`, e);\n    }\n  }\n  needRemove && el.removeAttribute(key);\n}\nfunction addEventListener(el, event, handler, options) {\n  el.addEventListener(event, handler, options);\n}\nfunction removeEventListener(el, event, handler, options) {\n  el.removeEventListener(event, handler, options);\n}\nconst veiKey = Symbol(\"_vei\");\nfunction patchEvent(el, rawName, prevValue, nextValue, instance = null) {\n  const invokers = el[veiKey] || (el[veiKey] = {});\n  const existingInvoker = invokers[rawName];\n  if (nextValue && existingInvoker) {\n    existingInvoker.value =  true ? sanitizeEventValue(nextValue, rawName) : 0;\n  } else {\n    const [name, options] = parseName(rawName);\n    if (nextValue) {\n      const invoker = invokers[rawName] = createInvoker( true ? sanitizeEventValue(nextValue, rawName) : 0, instance);\n      addEventListener(el, name, invoker, options);\n    } else if (existingInvoker) {\n      removeEventListener(el, name, existingInvoker, options);\n      invokers[rawName] = void 0;\n    }\n  }\n}\nconst optionsModifierRE = /(?:Once|Passive|Capture)$/;\nfunction parseName(name) {\n  let options;\n  if (optionsModifierRE.test(name)) {\n    options = {};\n    let m;\n    while (m = name.match(optionsModifierRE)) {\n      name = name.slice(0, name.length - m[0].length);\n      options[m[0].toLowerCase()] = true;\n    }\n  }\n  const event = name[2] === \":\" ? name.slice(3) : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(name.slice(2));\n  return [event, options];\n}\nlet cachedNow = 0;\nconst p = /* @__PURE__ */Promise.resolve();\nconst getNow = () => cachedNow || (p.then(() => cachedNow = 0), cachedNow = Date.now());\nfunction createInvoker(initialValue, instance) {\n  const invoker = e => {\n    if (!e._vts) {\n      e._vts = Date.now();\n    } else if (e._vts <= invoker.attached) {\n      return;\n    }\n    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.callWithAsyncErrorHandling)(patchStopImmediatePropagation(e, invoker.value), instance, 5, [e]);\n  };\n  invoker.value = initialValue;\n  invoker.attached = getNow();\n  return invoker;\n}\nfunction sanitizeEventValue(value, propName) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {\n    return value;\n  }\n  (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Wrong type passed as event handler to ${propName} - did you forget @ or : in front of your prop?\nExpected function or array of functions, received type ${typeof value}.`);\n  return _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP;\n}\nfunction patchStopImmediatePropagation(e, value) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {\n    const originalStop = e.stopImmediatePropagation;\n    e.stopImmediatePropagation = () => {\n      originalStop.call(e);\n      e._stopped = true;\n    };\n    return value.map(fn => e2 => !e2._stopped && fn && fn(e2));\n  } else {\n    return value;\n  }\n}\nconst isNativeOn = key => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 &&\n// lowercase letter\nkey.charCodeAt(2) > 96 && key.charCodeAt(2) < 123;\nconst patchProp = (el, key, prevValue, nextValue, namespace, parentComponent) => {\n  const isSVG = namespace === \"svg\";\n  if (key === \"class\") {\n    patchClass(el, nextValue, isSVG);\n  } else if (key === \"style\") {\n    patchStyle(el, prevValue, nextValue);\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key)) {\n    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isModelListener)(key)) {\n      patchEvent(el, key, prevValue, nextValue, parentComponent);\n    }\n  } else if (key[0] === \".\" ? (key = key.slice(1), true) : key[0] === \"^\" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {\n    patchDOMProp(el, key, nextValue);\n    if (!el.tagName.includes(\"-\") && (key === \"value\" || key === \"checked\" || key === \"selected\")) {\n      patchAttr(el, key, nextValue, isSVG, parentComponent, key !== \"value\");\n    }\n  } else {\n    if (key === \"true-value\") {\n      el._trueValue = nextValue;\n    } else if (key === \"false-value\") {\n      el._falseValue = nextValue;\n    }\n    patchAttr(el, key, nextValue, isSVG);\n  }\n};\nfunction shouldSetAsProp(el, key, value, isSVG) {\n  if (isSVG) {\n    if (key === \"innerHTML\" || key === \"textContent\") {\n      return true;\n    }\n    if (key in el && isNativeOn(key) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value)) {\n      return true;\n    }\n    return false;\n  }\n  if (key === \"spellcheck\" || key === \"draggable\" || key === \"translate\") {\n    return false;\n  }\n  if (key === \"form\") {\n    return false;\n  }\n  if (key === \"list\" && el.tagName === \"INPUT\") {\n    return false;\n  }\n  if (key === \"type\" && el.tagName === \"TEXTAREA\") {\n    return false;\n  }\n  if (key === \"width\" || key === \"height\") {\n    const tag = el.tagName;\n    if (tag === \"IMG\" || tag === \"VIDEO\" || tag === \"CANVAS\" || tag === \"SOURCE\") {\n      return false;\n    }\n  }\n  if (isNativeOn(key) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(value)) {\n    return false;\n  }\n  if (key in el) {\n    return true;\n  }\n  if (el._isVueCE && (/[A-Z]/.test(key) || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(value))) {\n    return true;\n  }\n  return false;\n}\nconst REMOVAL = {};\n/*! #__NO_SIDE_EFFECTS__ */\n// @__NO_SIDE_EFFECTS__\nfunction defineCustomElement(options, extraOptions, _createApp) {\n  const Comp = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineComponent)(options, extraOptions);\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(Comp)) (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(Comp, extraOptions);\n  class VueCustomElement extends VueElement {\n    constructor(initialProps) {\n      super(Comp, initialProps, _createApp);\n    }\n  }\n  VueCustomElement.def = Comp;\n  return VueCustomElement;\n}\n/*! #__NO_SIDE_EFFECTS__ */\nconst defineSSRCustomElement = /* @__NO_SIDE_EFFECTS__ */(options, extraOptions) => {\n  return /* @__PURE__ */defineCustomElement(options, extraOptions, createSSRApp);\n};\nconst BaseClass = typeof HTMLElement !== \"undefined\" ? HTMLElement : class {};\nclass VueElement extends BaseClass {\n  constructor(_def, _props = {}, _createApp = createApp) {\n    super();\n    this._def = _def;\n    this._props = _props;\n    this._createApp = _createApp;\n    this._isVueCE = true;\n    /**\n     * @internal\n     */\n    this._instance = null;\n    /**\n     * @internal\n     */\n    this._app = null;\n    /**\n     * @internal\n     */\n    this._nonce = this._def.nonce;\n    this._connected = false;\n    this._resolved = false;\n    this._numberProps = null;\n    this._styleChildren = /* @__PURE__ */new WeakSet();\n    this._ob = null;\n    if (this.shadowRoot && _createApp !== createApp) {\n      this._root = this.shadowRoot;\n    } else {\n      if ( true && this.shadowRoot) {\n        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use \\`defineSSRCustomElement\\`.`);\n      }\n      if (_def.shadowRoot !== false) {\n        this.attachShadow({\n          mode: \"open\"\n        });\n        this._root = this.shadowRoot;\n      } else {\n        this._root = this;\n      }\n    }\n    if (!this._def.__asyncLoader) {\n      this._resolveProps(this._def);\n    }\n  }\n  connectedCallback() {\n    if (!this.isConnected) return;\n    if (!this.shadowRoot) {\n      this._parseSlots();\n    }\n    this._connected = true;\n    let parent = this;\n    while (parent = parent && (parent.parentNode || parent.host)) {\n      if (parent instanceof VueElement) {\n        this._parent = parent;\n        break;\n      }\n    }\n    if (!this._instance) {\n      if (this._resolved) {\n        this._setParent();\n        this._update();\n      } else {\n        if (parent && parent._pendingResolve) {\n          this._pendingResolve = parent._pendingResolve.then(() => {\n            this._pendingResolve = void 0;\n            this._resolveDef();\n          });\n        } else {\n          this._resolveDef();\n        }\n      }\n    }\n  }\n  _setParent(parent = this._parent) {\n    if (parent) {\n      this._instance.parent = parent._instance;\n      this._instance.provides = parent._instance.provides;\n    }\n  }\n  disconnectedCallback() {\n    this._connected = false;\n    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => {\n      if (!this._connected) {\n        if (this._ob) {\n          this._ob.disconnect();\n          this._ob = null;\n        }\n        this._app && this._app.unmount();\n        if (this._instance) this._instance.ce = void 0;\n        this._app = this._instance = null;\n      }\n    });\n  }\n  /**\n   * resolve inner component definition (handle possible async component)\n   */\n  _resolveDef() {\n    if (this._pendingResolve) {\n      return;\n    }\n    for (let i = 0; i < this.attributes.length; i++) {\n      this._setAttr(this.attributes[i].name);\n    }\n    this._ob = new MutationObserver(mutations => {\n      for (const m of mutations) {\n        this._setAttr(m.attributeName);\n      }\n    });\n    this._ob.observe(this, {\n      attributes: true\n    });\n    const resolve = (def, isAsync = false) => {\n      this._resolved = true;\n      this._pendingResolve = void 0;\n      const {\n        props,\n        styles\n      } = def;\n      let numberProps;\n      if (props && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(props)) {\n        for (const key in props) {\n          const opt = props[key];\n          if (opt === Number || opt && opt.type === Number) {\n            if (key in this._props) {\n              this._props[key] = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber)(this._props[key]);\n            }\n            (numberProps || (numberProps = /* @__PURE__ */Object.create(null)))[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(key)] = true;\n          }\n        }\n      }\n      this._numberProps = numberProps;\n      if (isAsync) {\n        this._resolveProps(def);\n      }\n      if (this.shadowRoot) {\n        this._applyStyles(styles);\n      } else if ( true && styles) {\n        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(\"Custom element style injection is not supported when using shadowRoot: false\");\n      }\n      this._mount(def);\n    };\n    const asyncDef = this._def.__asyncLoader;\n    if (asyncDef) {\n      this._pendingResolve = asyncDef().then(def => resolve(this._def = def, true));\n    } else {\n      resolve(this._def);\n    }\n  }\n  _mount(def) {\n    if (( true) && !def.name) {\n      def.name = \"VueElement\";\n    }\n    this._app = this._createApp(def);\n    if (def.configureApp) {\n      def.configureApp(this._app);\n    }\n    this._app._ceVNode = this._createVNode();\n    this._app.mount(this._root);\n    const exposed = this._instance && this._instance.exposed;\n    if (!exposed) return;\n    for (const key in exposed) {\n      if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(this, key)) {\n        Object.defineProperty(this, key, {\n          // unwrap ref to be consistent with public instance behavior\n          get: () => (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_2__.unref)(exposed[key])\n        });\n      } else if (true) {\n        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Exposed property \"${key}\" already exists on custom element.`);\n      }\n    }\n  }\n  _resolveProps(def) {\n    const {\n      props\n    } = def;\n    const declaredPropKeys = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(props) ? props : Object.keys(props || {});\n    for (const key of Object.keys(this)) {\n      if (key[0] !== \"_\" && declaredPropKeys.includes(key)) {\n        this._setProp(key, this[key]);\n      }\n    }\n    for (const key of declaredPropKeys.map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)) {\n      Object.defineProperty(this, key, {\n        get() {\n          return this._getProp(key);\n        },\n        set(val) {\n          this._setProp(key, val, true, true);\n        }\n      });\n    }\n  }\n  _setAttr(key) {\n    if (key.startsWith(\"data-v-\")) return;\n    const has = this.hasAttribute(key);\n    let value = has ? this.getAttribute(key) : REMOVAL;\n    const camelKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(key);\n    if (has && this._numberProps && this._numberProps[camelKey]) {\n      value = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber)(value);\n    }\n    this._setProp(camelKey, value, false, true);\n  }\n  /**\n   * @internal\n   */\n  _getProp(key) {\n    return this._props[key];\n  }\n  /**\n   * @internal\n   */\n  _setProp(key, val, shouldReflect = true, shouldUpdate = false) {\n    if (val !== this._props[key]) {\n      if (val === REMOVAL) {\n        delete this._props[key];\n      } else {\n        this._props[key] = val;\n        if (key === \"key\" && this._app) {\n          this._app._ceVNode.key = val;\n        }\n      }\n      if (shouldUpdate && this._instance) {\n        this._update();\n      }\n      if (shouldReflect) {\n        if (val === true) {\n          this.setAttribute((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key), \"\");\n        } else if (typeof val === \"string\" || typeof val === \"number\") {\n          this.setAttribute((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key), val + \"\");\n        } else if (!val) {\n          this.removeAttribute((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key));\n        }\n      }\n    }\n  }\n  _update() {\n    render(this._createVNode(), this._root);\n  }\n  _createVNode() {\n    const baseProps = {};\n    if (!this.shadowRoot) {\n      baseProps.onVnodeMounted = baseProps.onVnodeUpdated = this._renderSlots.bind(this);\n    }\n    const vnode = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createVNode)(this._def, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(baseProps, this._props));\n    if (!this._instance) {\n      vnode.ce = instance => {\n        this._instance = instance;\n        instance.ce = this;\n        instance.isCE = true;\n        if (true) {\n          instance.ceReload = newStyles => {\n            if (this._styles) {\n              this._styles.forEach(s => this._root.removeChild(s));\n              this._styles.length = 0;\n            }\n            this._applyStyles(newStyles);\n            this._instance = null;\n            this._update();\n          };\n        }\n        const dispatch = (event, args) => {\n          this.dispatchEvent(new CustomEvent(event, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(args[0]) ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({\n            detail: args\n          }, args[0]) : {\n            detail: args\n          }));\n        };\n        instance.emit = (event, ...args) => {\n          dispatch(event, args);\n          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(event) !== event) {\n            dispatch((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(event), args);\n          }\n        };\n        this._setParent();\n      };\n    }\n    return vnode;\n  }\n  _applyStyles(styles, owner) {\n    if (!styles) return;\n    if (owner) {\n      if (owner === this._def || this._styleChildren.has(owner)) {\n        return;\n      }\n      this._styleChildren.add(owner);\n    }\n    const nonce = this._nonce;\n    for (let i = styles.length - 1; i >= 0; i--) {\n      const s = document.createElement(\"style\");\n      if (nonce) s.setAttribute(\"nonce\", nonce);\n      s.textContent = styles[i];\n      this.shadowRoot.prepend(s);\n      if (true) {\n        if (owner) {\n          if (owner.__hmrId) {\n            if (!this._childStyles) this._childStyles = /* @__PURE__ */new Map();\n            let entry = this._childStyles.get(owner.__hmrId);\n            if (!entry) {\n              this._childStyles.set(owner.__hmrId, entry = []);\n            }\n            entry.push(s);\n          }\n        } else {\n          (this._styles || (this._styles = [])).push(s);\n        }\n      }\n    }\n  }\n  /**\n   * Only called when shadowRoot is false\n   */\n  _parseSlots() {\n    const slots = this._slots = {};\n    let n;\n    while (n = this.firstChild) {\n      const slotName = n.nodeType === 1 && n.getAttribute(\"slot\") || \"default\";\n      (slots[slotName] || (slots[slotName] = [])).push(n);\n      this.removeChild(n);\n    }\n  }\n  /**\n   * Only called when shadowRoot is false\n   */\n  _renderSlots() {\n    const outlets = (this._teleportTarget || this).querySelectorAll(\"slot\");\n    const scopeId = this._instance.type.__scopeId;\n    for (let i = 0; i < outlets.length; i++) {\n      const o = outlets[i];\n      const slotName = o.getAttribute(\"name\") || \"default\";\n      const content = this._slots[slotName];\n      const parent = o.parentNode;\n      if (content) {\n        for (const n of content) {\n          if (scopeId && n.nodeType === 1) {\n            const id = scopeId + \"-s\";\n            const walker = document.createTreeWalker(n, 1);\n            n.setAttribute(id, \"\");\n            let child;\n            while (child = walker.nextNode()) {\n              child.setAttribute(id, \"\");\n            }\n          }\n          parent.insertBefore(n, o);\n        }\n      } else {\n        while (o.firstChild) parent.insertBefore(o.firstChild, o);\n      }\n      parent.removeChild(o);\n    }\n  }\n  /**\n   * @internal\n   */\n  _injectChildStyle(comp) {\n    this._applyStyles(comp.styles, comp);\n  }\n  /**\n   * @internal\n   */\n  _removeChildStyle(comp) {\n    if (true) {\n      this._styleChildren.delete(comp);\n      if (this._childStyles && comp.__hmrId) {\n        const oldStyles = this._childStyles.get(comp.__hmrId);\n        if (oldStyles) {\n          oldStyles.forEach(s => this._root.removeChild(s));\n          oldStyles.length = 0;\n        }\n      }\n    }\n  }\n}\nfunction useHost(caller) {\n  const instance = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance)();\n  const el = instance && instance.ce;\n  if (el) {\n    return el;\n  } else if (true) {\n    if (!instance) {\n      (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`${caller || \"useHost\"} called without an active component instance.`);\n    } else {\n      (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`${caller || \"useHost\"} can only be used in components defined via defineCustomElement.`);\n    }\n  }\n  return null;\n}\nfunction useShadowRoot() {\n  const el =  true ? useHost(\"useShadowRoot\") : 0;\n  return el && el.shadowRoot;\n}\nfunction useCssModule(name = \"$style\") {\n  {\n    const instance = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance)();\n    if (!instance) {\n       true && (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`useCssModule must be called inside setup()`);\n      return _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;\n    }\n    const modules = instance.type.__cssModules;\n    if (!modules) {\n       true && (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Current instance does not have CSS modules injected.`);\n      return _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;\n    }\n    const mod = modules[name];\n    if (!mod) {\n       true && (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Current instance does not have CSS module named \"${name}\".`);\n      return _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;\n    }\n    return mod;\n  }\n}\nconst positionMap = /* @__PURE__ */new WeakMap();\nconst newPositionMap = /* @__PURE__ */new WeakMap();\nconst moveCbKey = Symbol(\"_moveCb\");\nconst enterCbKey = Symbol(\"_enterCb\");\nconst decorate = t => {\n  delete t.props.mode;\n  return t;\n};\nconst TransitionGroupImpl = /* @__PURE__ */decorate({\n  name: \"TransitionGroup\",\n  props: /* @__PURE__ */(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, TransitionPropsValidators, {\n    tag: String,\n    moveClass: String\n  }),\n  setup(props, {\n    slots\n  }) {\n    const instance = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance)();\n    const state = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useTransitionState)();\n    let prevChildren;\n    let children;\n    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onUpdated)(() => {\n      if (!prevChildren.length) {\n        return;\n      }\n      const moveClass = props.moveClass || `${props.name || \"v\"}-move`;\n      if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {\n        return;\n      }\n      prevChildren.forEach(callPendingCbs);\n      prevChildren.forEach(recordPosition);\n      const movedChildren = prevChildren.filter(applyTranslation);\n      forceReflow();\n      movedChildren.forEach(c => {\n        const el = c.el;\n        const style = el.style;\n        addTransitionClass(el, moveClass);\n        style.transform = style.webkitTransform = style.transitionDuration = \"\";\n        const cb = el[moveCbKey] = e => {\n          if (e && e.target !== el) {\n            return;\n          }\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(\"transitionend\", cb);\n            el[moveCbKey] = null;\n            removeTransitionClass(el, moveClass);\n          }\n        };\n        el.addEventListener(\"transitionend\", cb);\n      });\n    });\n    return () => {\n      const rawProps = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_2__.toRaw)(props);\n      const cssTransitionProps = resolveTransitionProps(rawProps);\n      let tag = rawProps.tag || _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Fragment;\n      prevChildren = [];\n      if (children) {\n        for (let i = 0; i < children.length; i++) {\n          const child = children[i];\n          if (child.el && child.el instanceof Element) {\n            prevChildren.push(child);\n            (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setTransitionHooks)(child, (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveTransitionHooks)(child, cssTransitionProps, state, instance));\n            positionMap.set(child, child.el.getBoundingClientRect());\n          }\n        }\n      }\n      children = slots.default ? (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getTransitionRawChildren)(slots.default()) : [];\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        if (child.key != null) {\n          (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setTransitionHooks)(child, (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveTransitionHooks)(child, cssTransitionProps, state, instance));\n        } else if ( true && child.type !== _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Text) {\n          (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`<TransitionGroup> children must be keyed.`);\n        }\n      }\n      return (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createVNode)(tag, null, children);\n    };\n  }\n});\nconst TransitionGroup = TransitionGroupImpl;\nfunction callPendingCbs(c) {\n  const el = c.el;\n  if (el[moveCbKey]) {\n    el[moveCbKey]();\n  }\n  if (el[enterCbKey]) {\n    el[enterCbKey]();\n  }\n}\nfunction recordPosition(c) {\n  newPositionMap.set(c, c.el.getBoundingClientRect());\n}\nfunction applyTranslation(c) {\n  const oldPos = positionMap.get(c);\n  const newPos = newPositionMap.get(c);\n  const dx = oldPos.left - newPos.left;\n  const dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    const s = c.el.style;\n    s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;\n    s.transitionDuration = \"0s\";\n    return c;\n  }\n}\nfunction hasCSSTransform(el, root, moveClass) {\n  const clone = el.cloneNode();\n  const _vtc = el[vtcKey];\n  if (_vtc) {\n    _vtc.forEach(cls => {\n      cls.split(/\\s+/).forEach(c => c && clone.classList.remove(c));\n    });\n  }\n  moveClass.split(/\\s+/).forEach(c => c && clone.classList.add(c));\n  clone.style.display = \"none\";\n  const container = root.nodeType === 1 ? root : root.parentNode;\n  container.appendChild(clone);\n  const {\n    hasTransform\n  } = getTransitionInfo(clone);\n  container.removeChild(clone);\n  return hasTransform;\n}\nconst getModelAssigner = vnode => {\n  const fn = vnode.props[\"onUpdate:modelValue\"] || false;\n  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(fn) ? value => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(fn, value) : fn;\n};\nfunction onCompositionStart(e) {\n  e.target.composing = true;\n}\nfunction onCompositionEnd(e) {\n  const target = e.target;\n  if (target.composing) {\n    target.composing = false;\n    target.dispatchEvent(new Event(\"input\"));\n  }\n}\nconst assignKey = Symbol(\"_assign\");\nconst vModelText = {\n  created(el, {\n    modifiers: {\n      lazy,\n      trim,\n      number\n    }\n  }, vnode) {\n    el[assignKey] = getModelAssigner(vnode);\n    const castToNumber = number || vnode.props && vnode.props.type === \"number\";\n    addEventListener(el, lazy ? \"change\" : \"input\", e => {\n      if (e.target.composing) return;\n      let domValue = el.value;\n      if (trim) {\n        domValue = domValue.trim();\n      }\n      if (castToNumber) {\n        domValue = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseToNumber)(domValue);\n      }\n      el[assignKey](domValue);\n    });\n    if (trim) {\n      addEventListener(el, \"change\", () => {\n        el.value = el.value.trim();\n      });\n    }\n    if (!lazy) {\n      addEventListener(el, \"compositionstart\", onCompositionStart);\n      addEventListener(el, \"compositionend\", onCompositionEnd);\n      addEventListener(el, \"change\", onCompositionEnd);\n    }\n  },\n  // set value on mounted so it's after min/max for type=\"range\"\n  mounted(el, {\n    value\n  }) {\n    el.value = value == null ? \"\" : value;\n  },\n  beforeUpdate(el, {\n    value,\n    oldValue,\n    modifiers: {\n      lazy,\n      trim,\n      number\n    }\n  }, vnode) {\n    el[assignKey] = getModelAssigner(vnode);\n    if (el.composing) return;\n    const elValue = (number || el.type === \"number\") && !/^0\\d/.test(el.value) ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseToNumber)(el.value) : el.value;\n    const newValue = value == null ? \"\" : value;\n    if (elValue === newValue) {\n      return;\n    }\n    if (document.activeElement === el && el.type !== \"range\") {\n      if (lazy && value === oldValue) {\n        return;\n      }\n      if (trim && el.value.trim() === newValue) {\n        return;\n      }\n    }\n    el.value = newValue;\n  }\n};\nconst vModelCheckbox = {\n  // #4096 array checkboxes need to be deep traversed\n  deep: true,\n  created(el, _, vnode) {\n    el[assignKey] = getModelAssigner(vnode);\n    addEventListener(el, \"change\", () => {\n      const modelValue = el._modelValue;\n      const elementValue = getValue(el);\n      const checked = el.checked;\n      const assign = el[assignKey];\n      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(modelValue)) {\n        const index = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseIndexOf)(modelValue, elementValue);\n        const found = index !== -1;\n        if (checked && !found) {\n          assign(modelValue.concat(elementValue));\n        } else if (!checked && found) {\n          const filtered = [...modelValue];\n          filtered.splice(index, 1);\n          assign(filtered);\n        }\n      } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSet)(modelValue)) {\n        const cloned = new Set(modelValue);\n        if (checked) {\n          cloned.add(elementValue);\n        } else {\n          cloned.delete(elementValue);\n        }\n        assign(cloned);\n      } else {\n        assign(getCheckboxValue(el, checked));\n      }\n    });\n  },\n  // set initial checked on mount to wait for true-value/false-value\n  mounted: setChecked,\n  beforeUpdate(el, binding, vnode) {\n    el[assignKey] = getModelAssigner(vnode);\n    setChecked(el, binding, vnode);\n  }\n};\nfunction setChecked(el, {\n  value,\n  oldValue\n}, vnode) {\n  el._modelValue = value;\n  let checked;\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {\n    checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseIndexOf)(value, vnode.props.value) > -1;\n  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSet)(value)) {\n    checked = value.has(vnode.props.value);\n  } else {\n    checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseEqual)(value, getCheckboxValue(el, true));\n  }\n  if (el.checked !== checked) {\n    el.checked = checked;\n  }\n}\nconst vModelRadio = {\n  created(el, {\n    value\n  }, vnode) {\n    el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseEqual)(value, vnode.props.value);\n    el[assignKey] = getModelAssigner(vnode);\n    addEventListener(el, \"change\", () => {\n      el[assignKey](getValue(el));\n    });\n  },\n  beforeUpdate(el, {\n    value,\n    oldValue\n  }, vnode) {\n    el[assignKey] = getModelAssigner(vnode);\n    if (value !== oldValue) {\n      el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseEqual)(value, vnode.props.value);\n    }\n  }\n};\nconst vModelSelect = {\n  // <select multiple> value need to be deep traversed\n  deep: true,\n  created(el, {\n    value,\n    modifiers: {\n      number\n    }\n  }, vnode) {\n    const isSetModel = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSet)(value);\n    addEventListener(el, \"change\", () => {\n      const selectedVal = Array.prototype.filter.call(el.options, o => o.selected).map(o => number ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseToNumber)(getValue(o)) : getValue(o));\n      el[assignKey](el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);\n      el._assigning = true;\n      (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => {\n        el._assigning = false;\n      });\n    });\n    el[assignKey] = getModelAssigner(vnode);\n  },\n  // set value in mounted & updated because <select> relies on its children\n  // <option>s.\n  mounted(el, {\n    value,\n    modifiers: {\n      number\n    }\n  }) {\n    setSelected(el, value);\n  },\n  beforeUpdate(el, _binding, vnode) {\n    el[assignKey] = getModelAssigner(vnode);\n  },\n  updated(el, {\n    value,\n    modifiers: {\n      number\n    }\n  }) {\n    if (!el._assigning) {\n      setSelected(el, value);\n    }\n  }\n};\nfunction setSelected(el, value, number) {\n  const isMultiple = el.multiple;\n  const isArrayValue = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value);\n  if (isMultiple && !isArrayValue && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSet)(value)) {\n     true && (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);\n    return;\n  }\n  for (let i = 0, l = el.options.length; i < l; i++) {\n    const option = el.options[i];\n    const optionValue = getValue(option);\n    if (isMultiple) {\n      if (isArrayValue) {\n        const optionType = typeof optionValue;\n        if (optionType === \"string\" || optionType === \"number\") {\n          option.selected = value.some(v => String(v) === String(optionValue));\n        } else {\n          option.selected = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseIndexOf)(value, optionValue) > -1;\n        }\n      } else {\n        option.selected = value.has(optionValue);\n      }\n    } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseEqual)(getValue(option), value)) {\n      if (el.selectedIndex !== i) el.selectedIndex = i;\n      return;\n    }\n  }\n  if (!isMultiple && el.selectedIndex !== -1) {\n    el.selectedIndex = -1;\n  }\n}\nfunction getValue(el) {\n  return \"_value\" in el ? el._value : el.value;\n}\nfunction getCheckboxValue(el, checked) {\n  const key = checked ? \"_trueValue\" : \"_falseValue\";\n  return key in el ? el[key] : checked;\n}\nconst vModelDynamic = {\n  created(el, binding, vnode) {\n    callModelHook(el, binding, vnode, null, \"created\");\n  },\n  mounted(el, binding, vnode) {\n    callModelHook(el, binding, vnode, null, \"mounted\");\n  },\n  beforeUpdate(el, binding, vnode, prevVNode) {\n    callModelHook(el, binding, vnode, prevVNode, \"beforeUpdate\");\n  },\n  updated(el, binding, vnode, prevVNode) {\n    callModelHook(el, binding, vnode, prevVNode, \"updated\");\n  }\n};\nfunction resolveDynamicModel(tagName, type) {\n  switch (tagName) {\n    case \"SELECT\":\n      return vModelSelect;\n    case \"TEXTAREA\":\n      return vModelText;\n    default:\n      switch (type) {\n        case \"checkbox\":\n          return vModelCheckbox;\n        case \"radio\":\n          return vModelRadio;\n        default:\n          return vModelText;\n      }\n  }\n}\nfunction callModelHook(el, binding, vnode, prevVNode, hook) {\n  const modelToUse = resolveDynamicModel(el.tagName, vnode.props && vnode.props.type);\n  const fn = modelToUse[hook];\n  fn && fn(el, binding, vnode, prevVNode);\n}\nfunction initVModelForSSR() {\n  vModelText.getSSRProps = ({\n    value\n  }) => ({\n    value\n  });\n  vModelRadio.getSSRProps = ({\n    value\n  }, vnode) => {\n    if (vnode.props && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseEqual)(vnode.props.value, value)) {\n      return {\n        checked: true\n      };\n    }\n  };\n  vModelCheckbox.getSSRProps = ({\n    value\n  }, vnode) => {\n    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {\n      if (vnode.props && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseIndexOf)(value, vnode.props.value) > -1) {\n        return {\n          checked: true\n        };\n      }\n    } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSet)(value)) {\n      if (vnode.props && value.has(vnode.props.value)) {\n        return {\n          checked: true\n        };\n      }\n    } else if (value) {\n      return {\n        checked: true\n      };\n    }\n  };\n  vModelDynamic.getSSRProps = (binding, vnode) => {\n    if (typeof vnode.type !== \"string\") {\n      return;\n    }\n    const modelToUse = resolveDynamicModel(\n    // resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase\n    vnode.type.toUpperCase(), vnode.props && vnode.props.type);\n    if (modelToUse.getSSRProps) {\n      return modelToUse.getSSRProps(binding, vnode);\n    }\n  };\n}\nconst systemModifiers = [\"ctrl\", \"shift\", \"alt\", \"meta\"];\nconst modifierGuards = {\n  stop: e => e.stopPropagation(),\n  prevent: e => e.preventDefault(),\n  self: e => e.target !== e.currentTarget,\n  ctrl: e => !e.ctrlKey,\n  shift: e => !e.shiftKey,\n  alt: e => !e.altKey,\n  meta: e => !e.metaKey,\n  left: e => \"button\" in e && e.button !== 0,\n  middle: e => \"button\" in e && e.button !== 1,\n  right: e => \"button\" in e && e.button !== 2,\n  exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))\n};\nconst withModifiers = (fn, modifiers) => {\n  const cache = fn._withMods || (fn._withMods = {});\n  const cacheKey = modifiers.join(\".\");\n  return cache[cacheKey] || (cache[cacheKey] = (event, ...args) => {\n    for (let i = 0; i < modifiers.length; i++) {\n      const guard = modifierGuards[modifiers[i]];\n      if (guard && guard(event, modifiers)) return;\n    }\n    return fn(event, ...args);\n  });\n};\nconst keyNames = {\n  esc: \"escape\",\n  space: \" \",\n  up: \"arrow-up\",\n  left: \"arrow-left\",\n  right: \"arrow-right\",\n  down: \"arrow-down\",\n  delete: \"backspace\"\n};\nconst withKeys = (fn, modifiers) => {\n  const cache = fn._withKeys || (fn._withKeys = {});\n  const cacheKey = modifiers.join(\".\");\n  return cache[cacheKey] || (cache[cacheKey] = event => {\n    if (!(\"key\" in event)) {\n      return;\n    }\n    const eventKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(event.key);\n    if (modifiers.some(k => k === eventKey || keyNames[k] === eventKey)) {\n      return fn(event);\n    }\n  });\n};\nconst rendererOptions = /* @__PURE__ */(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({\n  patchProp\n}, nodeOps);\nlet renderer;\nlet enabledHydration = false;\nfunction ensureRenderer() {\n  return renderer || (renderer = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createRenderer)(rendererOptions));\n}\nfunction ensureHydrationRenderer() {\n  renderer = enabledHydration ? renderer : (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createHydrationRenderer)(rendererOptions);\n  enabledHydration = true;\n  return renderer;\n}\nconst render = (...args) => {\n  ensureRenderer().render(...args);\n};\nconst hydrate = (...args) => {\n  ensureHydrationRenderer().hydrate(...args);\n};\nconst createApp = (...args) => {\n  const app = ensureRenderer().createApp(...args);\n  if (true) {\n    injectNativeTagCheck(app);\n    injectCompilerOptionsCheck(app);\n  }\n  const {\n    mount\n  } = app;\n  app.mount = containerOrSelector => {\n    const container = normalizeContainer(containerOrSelector);\n    if (!container) return;\n    const component = app._component;\n    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(component) && !component.render && !component.template) {\n      component.template = container.innerHTML;\n    }\n    if (container.nodeType === 1) {\n      container.textContent = \"\";\n    }\n    const proxy = mount(container, false, resolveRootNamespace(container));\n    if (container instanceof Element) {\n      container.removeAttribute(\"v-cloak\");\n      container.setAttribute(\"data-v-app\", \"\");\n    }\n    return proxy;\n  };\n  return app;\n};\nconst createSSRApp = (...args) => {\n  const app = ensureHydrationRenderer().createApp(...args);\n  if (true) {\n    injectNativeTagCheck(app);\n    injectCompilerOptionsCheck(app);\n  }\n  const {\n    mount\n  } = app;\n  app.mount = containerOrSelector => {\n    const container = normalizeContainer(containerOrSelector);\n    if (container) {\n      return mount(container, true, resolveRootNamespace(container));\n    }\n  };\n  return app;\n};\nfunction resolveRootNamespace(container) {\n  if (container instanceof SVGElement) {\n    return \"svg\";\n  }\n  if (typeof MathMLElement === \"function\" && container instanceof MathMLElement) {\n    return \"mathml\";\n  }\n}\nfunction injectNativeTagCheck(app) {\n  Object.defineProperty(app.config, \"isNativeTag\", {\n    value: tag => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isHTMLTag)(tag) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSVGTag)(tag) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isMathMLTag)(tag),\n    writable: false\n  });\n}\nfunction injectCompilerOptionsCheck(app) {\n  if ((0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isRuntimeOnly)()) {\n    const isCustomElement = app.config.isCustomElement;\n    Object.defineProperty(app.config, \"isCustomElement\", {\n      get() {\n        return isCustomElement;\n      },\n      set() {\n        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`The \\`isCustomElement\\` config option is deprecated. Use \\`compilerOptions.isCustomElement\\` instead.`);\n      }\n    });\n    const compilerOptions = app.config.compilerOptions;\n    const msg = `The \\`compilerOptions\\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka \"full build\"). Since you are using the runtime-only build, \\`compilerOptions\\` must be passed to \\`@vue/compiler-dom\\` in the build setup instead.\n- For vue-loader: pass it via vue-loader's \\`compilerOptions\\` loader option.\n- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc`;\n    Object.defineProperty(app.config, \"compilerOptions\", {\n      get() {\n        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(msg);\n        return compilerOptions;\n      },\n      set() {\n        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(msg);\n      }\n    });\n  }\n}\nfunction normalizeContainer(container) {\n  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(container)) {\n    const res = document.querySelector(container);\n    if ( true && !res) {\n      (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Failed to mount app: mount target selector \"${container}\" returned null.`);\n    }\n    return res;\n  }\n  if ( true && window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === \"closed\") {\n    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`mounting on a ShadowRoot with \\`{mode: \"closed\"}\\` may lead to unpredictable bugs`);\n  }\n  return container;\n}\nlet ssrDirectiveInitialized = false;\nconst initDirectivesForSSR = () => {\n  if (!ssrDirectiveInitialized) {\n    ssrDirectiveInitialized = true;\n    initVModelForSSR();\n    initVShowForSSR();\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\n");

/***/ }),

/***/ "./node_modules/@vue/shared/dist/shared.esm-bundler.js":
/*!*************************************************************!*\
  !*** ./node_modules/@vue/shared/dist/shared.esm-bundler.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EMPTY_ARR: () => (/* binding */ EMPTY_ARR),\n/* harmony export */   EMPTY_OBJ: () => (/* binding */ EMPTY_OBJ),\n/* harmony export */   NO: () => (/* binding */ NO),\n/* harmony export */   NOOP: () => (/* binding */ NOOP),\n/* harmony export */   PatchFlagNames: () => (/* binding */ PatchFlagNames),\n/* harmony export */   PatchFlags: () => (/* binding */ PatchFlags),\n/* harmony export */   ShapeFlags: () => (/* binding */ ShapeFlags),\n/* harmony export */   SlotFlags: () => (/* binding */ SlotFlags),\n/* harmony export */   camelize: () => (/* binding */ camelize),\n/* harmony export */   capitalize: () => (/* binding */ capitalize),\n/* harmony export */   cssVarNameEscapeSymbolsRE: () => (/* binding */ cssVarNameEscapeSymbolsRE),\n/* harmony export */   def: () => (/* binding */ def),\n/* harmony export */   escapeHtml: () => (/* binding */ escapeHtml),\n/* harmony export */   escapeHtmlComment: () => (/* binding */ escapeHtmlComment),\n/* harmony export */   extend: () => (/* binding */ extend),\n/* harmony export */   genPropsAccessExp: () => (/* binding */ genPropsAccessExp),\n/* harmony export */   generateCodeFrame: () => (/* binding */ generateCodeFrame),\n/* harmony export */   getEscapedCssVarName: () => (/* binding */ getEscapedCssVarName),\n/* harmony export */   getGlobalThis: () => (/* binding */ getGlobalThis),\n/* harmony export */   hasChanged: () => (/* binding */ hasChanged),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   hyphenate: () => (/* binding */ hyphenate),\n/* harmony export */   includeBooleanAttr: () => (/* binding */ includeBooleanAttr),\n/* harmony export */   invokeArrayFns: () => (/* binding */ invokeArrayFns),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBooleanAttr: () => (/* binding */ isBooleanAttr),\n/* harmony export */   isBuiltInDirective: () => (/* binding */ isBuiltInDirective),\n/* harmony export */   isDate: () => (/* binding */ isDate),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isGloballyAllowed: () => (/* binding */ isGloballyAllowed),\n/* harmony export */   isGloballyWhitelisted: () => (/* binding */ isGloballyWhitelisted),\n/* harmony export */   isHTMLTag: () => (/* binding */ isHTMLTag),\n/* harmony export */   isIntegerKey: () => (/* binding */ isIntegerKey),\n/* harmony export */   isKnownHtmlAttr: () => (/* binding */ isKnownHtmlAttr),\n/* harmony export */   isKnownMathMLAttr: () => (/* binding */ isKnownMathMLAttr),\n/* harmony export */   isKnownSvgAttr: () => (/* binding */ isKnownSvgAttr),\n/* harmony export */   isMap: () => (/* binding */ isMap),\n/* harmony export */   isMathMLTag: () => (/* binding */ isMathMLTag),\n/* harmony export */   isModelListener: () => (/* binding */ isModelListener),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isOn: () => (/* binding */ isOn),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isRenderableAttrValue: () => (/* binding */ isRenderableAttrValue),\n/* harmony export */   isReservedProp: () => (/* binding */ isReservedProp),\n/* harmony export */   isSSRSafeAttrName: () => (/* binding */ isSSRSafeAttrName),\n/* harmony export */   isSVGTag: () => (/* binding */ isSVGTag),\n/* harmony export */   isSet: () => (/* binding */ isSet),\n/* harmony export */   isSpecialBooleanAttr: () => (/* binding */ isSpecialBooleanAttr),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSymbol: () => (/* binding */ isSymbol),\n/* harmony export */   isVoidTag: () => (/* binding */ isVoidTag),\n/* harmony export */   looseEqual: () => (/* binding */ looseEqual),\n/* harmony export */   looseIndexOf: () => (/* binding */ looseIndexOf),\n/* harmony export */   looseToNumber: () => (/* binding */ looseToNumber),\n/* harmony export */   makeMap: () => (/* binding */ makeMap),\n/* harmony export */   normalizeClass: () => (/* binding */ normalizeClass),\n/* harmony export */   normalizeProps: () => (/* binding */ normalizeProps),\n/* harmony export */   normalizeStyle: () => (/* binding */ normalizeStyle),\n/* harmony export */   objectToString: () => (/* binding */ objectToString),\n/* harmony export */   parseStringStyle: () => (/* binding */ parseStringStyle),\n/* harmony export */   propsToAttrMap: () => (/* binding */ propsToAttrMap),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   slotFlagsText: () => (/* binding */ slotFlagsText),\n/* harmony export */   stringifyStyle: () => (/* binding */ stringifyStyle),\n/* harmony export */   toDisplayString: () => (/* binding */ toDisplayString),\n/* harmony export */   toHandlerKey: () => (/* binding */ toHandlerKey),\n/* harmony export */   toNumber: () => (/* binding */ toNumber),\n/* harmony export */   toRawType: () => (/* binding */ toRawType),\n/* harmony export */   toTypeString: () => (/* binding */ toTypeString)\n/* harmony export */ });\n/**\n* @vue/shared v3.5.7\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n/*! #__NO_SIDE_EFFECTS__ */\n// @__NO_SIDE_EFFECTS__\nfunction makeMap(str) {\n  const map = /* @__PURE__ */Object.create(null);\n  for (const key of str.split(\",\")) map[key] = 1;\n  return val => val in map;\n}\nconst EMPTY_OBJ =  true ? Object.freeze({}) : 0;\nconst EMPTY_ARR =  true ? Object.freeze([]) : 0;\nconst NOOP = () => {};\nconst NO = () => false;\nconst isOn = key => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && (\n// uppercase letter\nkey.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);\nconst isModelListener = key => key.startsWith(\"onUpdate:\");\nconst extend = Object.assign;\nconst remove = (arr, el) => {\n  const i = arr.indexOf(el);\n  if (i > -1) {\n    arr.splice(i, 1);\n  }\n};\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst hasOwn = (val, key) => hasOwnProperty.call(val, key);\nconst isArray = Array.isArray;\nconst isMap = val => toTypeString(val) === \"[object Map]\";\nconst isSet = val => toTypeString(val) === \"[object Set]\";\nconst isDate = val => toTypeString(val) === \"[object Date]\";\nconst isRegExp = val => toTypeString(val) === \"[object RegExp]\";\nconst isFunction = val => typeof val === \"function\";\nconst isString = val => typeof val === \"string\";\nconst isSymbol = val => typeof val === \"symbol\";\nconst isObject = val => val !== null && typeof val === \"object\";\nconst isPromise = val => {\n  return (isObject(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);\n};\nconst objectToString = Object.prototype.toString;\nconst toTypeString = value => objectToString.call(value);\nconst toRawType = value => {\n  return toTypeString(value).slice(8, -1);\n};\nconst isPlainObject = val => toTypeString(val) === \"[object Object]\";\nconst isIntegerKey = key => isString(key) && key !== \"NaN\" && key[0] !== \"-\" && \"\" + parseInt(key, 10) === key;\nconst isReservedProp = /* @__PURE__ */makeMap(\n// the leading comma is intentional so empty string \"\" is also included\n\",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted\");\nconst isBuiltInDirective = /* @__PURE__ */makeMap(\"bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo\");\nconst cacheStringFunction = fn => {\n  const cache = /* @__PURE__ */Object.create(null);\n  return str => {\n    const hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n};\nconst camelizeRE = /-(\\w)/g;\nconst camelize = cacheStringFunction(str => {\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : \"\");\n});\nconst hyphenateRE = /\\B([A-Z])/g;\nconst hyphenate = cacheStringFunction(str => str.replace(hyphenateRE, \"-$1\").toLowerCase());\nconst capitalize = cacheStringFunction(str => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n});\nconst toHandlerKey = cacheStringFunction(str => {\n  const s = str ? `on${capitalize(str)}` : ``;\n  return s;\n});\nconst hasChanged = (value, oldValue) => !Object.is(value, oldValue);\nconst invokeArrayFns = (fns, ...arg) => {\n  for (let i = 0; i < fns.length; i++) {\n    fns[i](...arg);\n  }\n};\nconst def = (obj, key, value, writable = false) => {\n  Object.defineProperty(obj, key, {\n    configurable: true,\n    enumerable: false,\n    writable,\n    value\n  });\n};\nconst looseToNumber = val => {\n  const n = parseFloat(val);\n  return isNaN(n) ? val : n;\n};\nconst toNumber = val => {\n  const n = isString(val) ? Number(val) : NaN;\n  return isNaN(n) ? val : n;\n};\nlet _globalThis;\nconst getGlobalThis = () => {\n  return _globalThis || (_globalThis = typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof __webpack_require__.g !== \"undefined\" ? __webpack_require__.g : {});\n};\nconst identRE = /^[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/;\nfunction genPropsAccessExp(name) {\n  return identRE.test(name) ? `__props.${name}` : `__props[${JSON.stringify(name)}]`;\n}\nconst PatchFlags = {\n  \"TEXT\": 1,\n  \"1\": \"TEXT\",\n  \"CLASS\": 2,\n  \"2\": \"CLASS\",\n  \"STYLE\": 4,\n  \"4\": \"STYLE\",\n  \"PROPS\": 8,\n  \"8\": \"PROPS\",\n  \"FULL_PROPS\": 16,\n  \"16\": \"FULL_PROPS\",\n  \"NEED_HYDRATION\": 32,\n  \"32\": \"NEED_HYDRATION\",\n  \"STABLE_FRAGMENT\": 64,\n  \"64\": \"STABLE_FRAGMENT\",\n  \"KEYED_FRAGMENT\": 128,\n  \"128\": \"KEYED_FRAGMENT\",\n  \"UNKEYED_FRAGMENT\": 256,\n  \"256\": \"UNKEYED_FRAGMENT\",\n  \"NEED_PATCH\": 512,\n  \"512\": \"NEED_PATCH\",\n  \"DYNAMIC_SLOTS\": 1024,\n  \"1024\": \"DYNAMIC_SLOTS\",\n  \"DEV_ROOT_FRAGMENT\": 2048,\n  \"2048\": \"DEV_ROOT_FRAGMENT\",\n  \"CACHED\": -1,\n  \"-1\": \"CACHED\",\n  \"BAIL\": -2,\n  \"-2\": \"BAIL\"\n};\nconst PatchFlagNames = {\n  [1]: `TEXT`,\n  [2]: `CLASS`,\n  [4]: `STYLE`,\n  [8]: `PROPS`,\n  [16]: `FULL_PROPS`,\n  [32]: `NEED_HYDRATION`,\n  [64]: `STABLE_FRAGMENT`,\n  [128]: `KEYED_FRAGMENT`,\n  [256]: `UNKEYED_FRAGMENT`,\n  [512]: `NEED_PATCH`,\n  [1024]: `DYNAMIC_SLOTS`,\n  [2048]: `DEV_ROOT_FRAGMENT`,\n  [-1]: `HOISTED`,\n  [-2]: `BAIL`\n};\nconst ShapeFlags = {\n  \"ELEMENT\": 1,\n  \"1\": \"ELEMENT\",\n  \"FUNCTIONAL_COMPONENT\": 2,\n  \"2\": \"FUNCTIONAL_COMPONENT\",\n  \"STATEFUL_COMPONENT\": 4,\n  \"4\": \"STATEFUL_COMPONENT\",\n  \"TEXT_CHILDREN\": 8,\n  \"8\": \"TEXT_CHILDREN\",\n  \"ARRAY_CHILDREN\": 16,\n  \"16\": \"ARRAY_CHILDREN\",\n  \"SLOTS_CHILDREN\": 32,\n  \"32\": \"SLOTS_CHILDREN\",\n  \"TELEPORT\": 64,\n  \"64\": \"TELEPORT\",\n  \"SUSPENSE\": 128,\n  \"128\": \"SUSPENSE\",\n  \"COMPONENT_SHOULD_KEEP_ALIVE\": 256,\n  \"256\": \"COMPONENT_SHOULD_KEEP_ALIVE\",\n  \"COMPONENT_KEPT_ALIVE\": 512,\n  \"512\": \"COMPONENT_KEPT_ALIVE\",\n  \"COMPONENT\": 6,\n  \"6\": \"COMPONENT\"\n};\nconst SlotFlags = {\n  \"STABLE\": 1,\n  \"1\": \"STABLE\",\n  \"DYNAMIC\": 2,\n  \"2\": \"DYNAMIC\",\n  \"FORWARDED\": 3,\n  \"3\": \"FORWARDED\"\n};\nconst slotFlagsText = {\n  [1]: \"STABLE\",\n  [2]: \"DYNAMIC\",\n  [3]: \"FORWARDED\"\n};\nconst GLOBALS_ALLOWED = \"Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol\";\nconst isGloballyAllowed = /* @__PURE__ */makeMap(GLOBALS_ALLOWED);\nconst isGloballyWhitelisted = isGloballyAllowed;\nconst range = 2;\nfunction generateCodeFrame(source, start = 0, end = source.length) {\n  start = Math.max(0, Math.min(start, source.length));\n  end = Math.max(0, Math.min(end, source.length));\n  if (start > end) return \"\";\n  let lines = source.split(/(\\r?\\n)/);\n  const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);\n  lines = lines.filter((_, idx) => idx % 2 === 0);\n  let count = 0;\n  const res = [];\n  for (let i = 0; i < lines.length; i++) {\n    count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);\n    if (count >= start) {\n      for (let j = i - range; j <= i + range || end > count; j++) {\n        if (j < 0 || j >= lines.length) continue;\n        const line = j + 1;\n        res.push(`${line}${\" \".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);\n        const lineLength = lines[j].length;\n        const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;\n        if (j === i) {\n          const pad = start - (count - (lineLength + newLineSeqLength));\n          const length = Math.max(1, end > count ? lineLength - pad : end - start);\n          res.push(`   |  ` + \" \".repeat(pad) + \"^\".repeat(length));\n        } else if (j > i) {\n          if (end > count) {\n            const length = Math.max(Math.min(end - count, lineLength), 1);\n            res.push(`   |  ` + \"^\".repeat(length));\n          }\n          count += lineLength + newLineSeqLength;\n        }\n      }\n      break;\n    }\n  }\n  return res.join(\"\\n\");\n}\nfunction normalizeStyle(value) {\n  if (isArray(value)) {\n    const res = {};\n    for (let i = 0; i < value.length; i++) {\n      const item = value[i];\n      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);\n      if (normalized) {\n        for (const key in normalized) {\n          res[key] = normalized[key];\n        }\n      }\n    }\n    return res;\n  } else if (isString(value) || isObject(value)) {\n    return value;\n  }\n}\nconst listDelimiterRE = /;(?![^(]*\\))/g;\nconst propertyDelimiterRE = /:([^]+)/;\nconst styleCommentRE = /\\/\\*[^]*?\\*\\//g;\nfunction parseStringStyle(cssText) {\n  const ret = {};\n  cssText.replace(styleCommentRE, \"\").split(listDelimiterRE).forEach(item => {\n    if (item) {\n      const tmp = item.split(propertyDelimiterRE);\n      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return ret;\n}\nfunction stringifyStyle(styles) {\n  let ret = \"\";\n  if (!styles || isString(styles)) {\n    return ret;\n  }\n  for (const key in styles) {\n    const value = styles[key];\n    if (isString(value) || typeof value === \"number\") {\n      const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);\n      ret += `${normalizedKey}:${value};`;\n    }\n  }\n  return ret;\n}\nfunction normalizeClass(value) {\n  let res = \"\";\n  if (isString(value)) {\n    res = value;\n  } else if (isArray(value)) {\n    for (let i = 0; i < value.length; i++) {\n      const normalized = normalizeClass(value[i]);\n      if (normalized) {\n        res += normalized + \" \";\n      }\n    }\n  } else if (isObject(value)) {\n    for (const name in value) {\n      if (value[name]) {\n        res += name + \" \";\n      }\n    }\n  }\n  return res.trim();\n}\nfunction normalizeProps(props) {\n  if (!props) return null;\n  let {\n    class: klass,\n    style\n  } = props;\n  if (klass && !isString(klass)) {\n    props.class = normalizeClass(klass);\n  }\n  if (style) {\n    props.style = normalizeStyle(style);\n  }\n  return props;\n}\nconst HTML_TAGS = \"html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot\";\nconst SVG_TAGS = \"svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view\";\nconst MATH_TAGS = \"annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics\";\nconst VOID_TAGS = \"area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr\";\nconst isHTMLTag = /* @__PURE__ */makeMap(HTML_TAGS);\nconst isSVGTag = /* @__PURE__ */makeMap(SVG_TAGS);\nconst isMathMLTag = /* @__PURE__ */makeMap(MATH_TAGS);\nconst isVoidTag = /* @__PURE__ */makeMap(VOID_TAGS);\nconst specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\nconst isSpecialBooleanAttr = /* @__PURE__ */makeMap(specialBooleanAttrs);\nconst isBooleanAttr = /* @__PURE__ */makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);\nfunction includeBooleanAttr(value) {\n  return !!value || value === \"\";\n}\nconst unsafeAttrCharRE = /[>/=\"'\\u0009\\u000a\\u000c\\u0020]/;\nconst attrValidationCache = {};\nfunction isSSRSafeAttrName(name) {\n  if (attrValidationCache.hasOwnProperty(name)) {\n    return attrValidationCache[name];\n  }\n  const isUnsafe = unsafeAttrCharRE.test(name);\n  if (isUnsafe) {\n    console.error(`unsafe attribute name: ${name}`);\n  }\n  return attrValidationCache[name] = !isUnsafe;\n}\nconst propsToAttrMap = {\n  acceptCharset: \"accept-charset\",\n  className: \"class\",\n  htmlFor: \"for\",\n  httpEquiv: \"http-equiv\"\n};\nconst isKnownHtmlAttr = /* @__PURE__ */makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`);\nconst isKnownSvgAttr = /* @__PURE__ */makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);\nconst isKnownMathMLAttr = /* @__PURE__ */makeMap(`accent,accentunder,actiontype,align,alignmentscope,altimg,altimg-height,altimg-valign,altimg-width,alttext,bevelled,close,columnsalign,columnlines,columnspan,denomalign,depth,dir,display,displaystyle,encoding,equalcolumns,equalrows,fence,fontstyle,fontweight,form,frame,framespacing,groupalign,height,href,id,indentalign,indentalignfirst,indentalignlast,indentshift,indentshiftfirst,indentshiftlast,indextype,justify,largetop,largeop,lquote,lspace,mathbackground,mathcolor,mathsize,mathvariant,maxsize,minlabelspacing,mode,other,overflow,position,rowalign,rowlines,rowspan,rquote,rspace,scriptlevel,scriptminsize,scriptsizemultiplier,selection,separator,separators,shift,side,src,stackalign,stretchy,subscriptshift,superscriptshift,symmetric,voffset,width,widths,xlink:href,xlink:show,xlink:type,xmlns`);\nfunction isRenderableAttrValue(value) {\n  if (value == null) {\n    return false;\n  }\n  const type = typeof value;\n  return type === \"string\" || type === \"number\" || type === \"boolean\";\n}\nconst escapeRE = /[\"'&<>]/;\nfunction escapeHtml(string) {\n  const str = \"\" + string;\n  const match = escapeRE.exec(str);\n  if (!match) {\n    return str;\n  }\n  let html = \"\";\n  let escaped;\n  let index;\n  let lastIndex = 0;\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escaped = \"&quot;\";\n        break;\n      case 38:\n        escaped = \"&amp;\";\n        break;\n      case 39:\n        escaped = \"&#39;\";\n        break;\n      case 60:\n        escaped = \"&lt;\";\n        break;\n      case 62:\n        escaped = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    if (lastIndex !== index) {\n      html += str.slice(lastIndex, index);\n    }\n    lastIndex = index + 1;\n    html += escaped;\n  }\n  return lastIndex !== index ? html + str.slice(lastIndex, index) : html;\n}\nconst commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;\nfunction escapeHtmlComment(src) {\n  return src.replace(commentStripRE, \"\");\n}\nconst cssVarNameEscapeSymbolsRE = /[ !\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~]/g;\nfunction getEscapedCssVarName(key, doubleEscape) {\n  return key.replace(cssVarNameEscapeSymbolsRE, s => doubleEscape ? s === '\"' ? '\\\\\\\\\\\\\"' : `\\\\\\\\${s}` : `\\\\${s}`);\n}\nfunction looseCompareArrays(a, b) {\n  if (a.length !== b.length) return false;\n  let equal = true;\n  for (let i = 0; equal && i < a.length; i++) {\n    equal = looseEqual(a[i], b[i]);\n  }\n  return equal;\n}\nfunction looseEqual(a, b) {\n  if (a === b) return true;\n  let aValidType = isDate(a);\n  let bValidType = isDate(b);\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? a.getTime() === b.getTime() : false;\n  }\n  aValidType = isSymbol(a);\n  bValidType = isSymbol(b);\n  if (aValidType || bValidType) {\n    return a === b;\n  }\n  aValidType = isArray(a);\n  bValidType = isArray(b);\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? looseCompareArrays(a, b) : false;\n  }\n  aValidType = isObject(a);\n  bValidType = isObject(b);\n  if (aValidType || bValidType) {\n    if (!aValidType || !bValidType) {\n      return false;\n    }\n    const aKeysCount = Object.keys(a).length;\n    const bKeysCount = Object.keys(b).length;\n    if (aKeysCount !== bKeysCount) {\n      return false;\n    }\n    for (const key in a) {\n      const aHasKey = a.hasOwnProperty(key);\n      const bHasKey = b.hasOwnProperty(key);\n      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n  }\n  return String(a) === String(b);\n}\nfunction looseIndexOf(arr, val) {\n  return arr.findIndex(item => looseEqual(item, val));\n}\nconst isRef = val => {\n  return !!(val && val[\"__v_isRef\"] === true);\n};\nconst toDisplayString = val => {\n  return isString(val) ? val : val == null ? \"\" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? isRef(val) ? toDisplayString(val.value) : JSON.stringify(val, replacer, 2) : String(val);\n};\nconst replacer = (_key, val) => {\n  if (isRef(val)) {\n    return replacer(_key, val.value);\n  } else if (isMap(val)) {\n    return {\n      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2], i) => {\n        entries[stringifySymbol(key, i) + \" =>\"] = val2;\n        return entries;\n      }, {})\n    };\n  } else if (isSet(val)) {\n    return {\n      [`Set(${val.size})`]: [...val.values()].map(v => stringifySymbol(v))\n    };\n  } else if (isSymbol(val)) {\n    return stringifySymbol(val);\n  } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {\n    return String(val);\n  }\n  return val;\n};\nconst stringifySymbol = (v, i = \"\") => {\n  var _a;\n  return (\n    // Symbol.description in es2019+ so we need to cast here to pass\n    // the lib: es2016 check\n    isSymbol(v) ? `Symbol(${(_a = v.description) != null ? _a : i})` : v\n  );\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHZ1ZS9zaGFyZWQvZGlzdC9zaGFyZWQuZXNtLWJ1bmRsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLE9BQU9BLENBQUNDLEdBQUcsRUFBRTtFQUNwQixNQUFNQyxHQUFHLEdBQUcsZUFBZ0JDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQztFQUMvQyxLQUFLLE1BQU1DLEdBQUcsSUFBSUosR0FBRyxDQUFDSyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUVKLEdBQUcsQ0FBQ0csR0FBRyxDQUFDLEdBQUcsQ0FBQztFQUM5QyxPQUFRRSxHQUFHLElBQUtBLEdBQUcsSUFBSUwsR0FBRztBQUM1QjtBQUVBLE1BQU1NLFNBQVMsR0FBRyxLQUF5QyxHQUFHTCxNQUFNLENBQUNTLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUU7QUFDcEYsTUFBTUMsU0FBUyxHQUFHLEtBQXlDLEdBQUdWLE1BQU0sQ0FBQ1MsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUU7QUFDcEYsTUFBTUUsSUFBSSxHQUFHQSxDQUFBLEtBQU0sQ0FDbkIsQ0FBQztBQUNELE1BQU1DLEVBQUUsR0FBR0EsQ0FBQSxLQUFNLEtBQUs7QUFDdEIsTUFBTUMsSUFBSSxHQUFJWCxHQUFHLElBQUtBLEdBQUcsQ0FBQ1ksVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSVosR0FBRyxDQUFDWSxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRztBQUFJO0FBQy9FWixHQUFHLENBQUNZLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUlaLEdBQUcsQ0FBQ1ksVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNuRCxN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QUN3TCxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUNDLEVBQUUsR0FBR0QsQ0FBQyxDQUFDRSxXQUFXLEtBQUssSUFBSSxHQUFHRCxFQUFFLEdBQUd6TSxDQUFDLEdBQUcsR0FBR3dNO0VBQUM7QUFFeEUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL0B2dWUvc2hhcmVkL2Rpc3Qvc2hhcmVkLmVzbS1idW5kbGVyLmpzPzlmZjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIEB2dWUvc2hhcmVkIHYzLjUuN1xuKiAoYykgMjAxOC1wcmVzZW50IFl1eGkgKEV2YW4pIFlvdSBhbmQgVnVlIGNvbnRyaWJ1dG9yc1xuKiBAbGljZW5zZSBNSVRcbioqL1xuLyohICNfX05PX1NJREVfRUZGRUNUU19fICovXG4vLyBAX19OT19TSURFX0VGRkVDVFNfX1xuZnVuY3Rpb24gbWFrZU1hcChzdHIpIHtcbiAgY29uc3QgbWFwID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvciAoY29uc3Qga2V5IG9mIHN0ci5zcGxpdChcIixcIikpIG1hcFtrZXldID0gMTtcbiAgcmV0dXJuICh2YWwpID0+IHZhbCBpbiBtYXA7XG59XG5cbmNvbnN0IEVNUFRZX09CSiA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBPYmplY3QuZnJlZXplKHt9KSA6IHt9O1xuY29uc3QgRU1QVFlfQVJSID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IE9iamVjdC5mcmVlemUoW10pIDogW107XG5jb25zdCBOT09QID0gKCkgPT4ge1xufTtcbmNvbnN0IE5PID0gKCkgPT4gZmFsc2U7XG5jb25zdCBpc09uID0gKGtleSkgPT4ga2V5LmNoYXJDb2RlQXQoMCkgPT09IDExMSAmJiBrZXkuY2hhckNvZGVBdCgxKSA9PT0gMTEwICYmIC8vIHVwcGVyY2FzZSBsZXR0ZXJcbihrZXkuY2hhckNvZGVBdCgyKSA+IDEyMiB8fCBrZXkuY2hhckNvZGVBdCgyKSA8IDk3KTtcbmNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IChrZXkpID0+IGtleS5zdGFydHNXaXRoKFwib25VcGRhdGU6XCIpO1xuY29uc3QgZXh0ZW5kID0gT2JqZWN0LmFzc2lnbjtcbmNvbnN0IHJlbW92ZSA9IChhcnIsIGVsKSA9PiB7XG4gIGNvbnN0IGkgPSBhcnIuaW5kZXhPZihlbCk7XG4gIGlmIChpID4gLTEpIHtcbiAgICBhcnIuc3BsaWNlKGksIDEpO1xuICB9XG59O1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuY29uc3QgaGFzT3duID0gKHZhbCwga2V5KSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbCwga2V5KTtcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuY29uc3QgaXNNYXAgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gXCJbb2JqZWN0IE1hcF1cIjtcbmNvbnN0IGlzU2V0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09IFwiW29iamVjdCBTZXRdXCI7XG5jb25zdCBpc0RhdGUgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gXCJbb2JqZWN0IERhdGVdXCI7XG5jb25zdCBpc1JlZ0V4cCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSBcIltvYmplY3QgUmVnRXhwXVwiO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIjtcbmNvbnN0IGlzU3RyaW5nID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIjtcbmNvbnN0IGlzU3ltYm9sID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzeW1ib2xcIjtcbmNvbnN0IGlzT2JqZWN0ID0gKHZhbCkgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCI7XG5jb25zdCBpc1Byb21pc2UgPSAodmFsKSA9PiB7XG4gIHJldHVybiAoaXNPYmplY3QodmFsKSB8fCBpc0Z1bmN0aW9uKHZhbCkpICYmIGlzRnVuY3Rpb24odmFsLnRoZW4pICYmIGlzRnVuY3Rpb24odmFsLmNhdGNoKTtcbn07XG5jb25zdCBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCB0b1R5cGVTdHJpbmcgPSAodmFsdWUpID0+IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuY29uc3QgdG9SYXdUeXBlID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiB0b1R5cGVTdHJpbmcodmFsdWUpLnNsaWNlKDgsIC0xKTtcbn07XG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09IFwiW29iamVjdCBPYmplY3RdXCI7XG5jb25zdCBpc0ludGVnZXJLZXkgPSAoa2V5KSA9PiBpc1N0cmluZyhrZXkpICYmIGtleSAhPT0gXCJOYU5cIiAmJiBrZXlbMF0gIT09IFwiLVwiICYmIFwiXCIgKyBwYXJzZUludChrZXksIDEwKSA9PT0ga2V5O1xuY29uc3QgaXNSZXNlcnZlZFByb3AgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgLy8gdGhlIGxlYWRpbmcgY29tbWEgaXMgaW50ZW50aW9uYWwgc28gZW1wdHkgc3RyaW5nIFwiXCIgaXMgYWxzbyBpbmNsdWRlZFxuICBcIixrZXkscmVmLHJlZl9mb3IscmVmX2tleSxvblZub2RlQmVmb3JlTW91bnQsb25Wbm9kZU1vdW50ZWQsb25Wbm9kZUJlZm9yZVVwZGF0ZSxvblZub2RlVXBkYXRlZCxvblZub2RlQmVmb3JlVW5tb3VudCxvblZub2RlVW5tb3VudGVkXCJcbik7XG5jb25zdCBpc0J1aWx0SW5EaXJlY3RpdmUgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgXCJiaW5kLGNsb2FrLGVsc2UtaWYsZWxzZSxmb3IsaHRtbCxpZixtb2RlbCxvbixvbmNlLHByZSxzaG93LHNsb3QsdGV4dCxtZW1vXCJcbik7XG5jb25zdCBjYWNoZVN0cmluZ0Z1bmN0aW9uID0gKGZuKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoc3RyKSA9PiB7XG4gICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSk7XG4gIH07XG59O1xuY29uc3QgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbmNvbnN0IGNhbWVsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbihcbiAgKHN0cikgPT4ge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoXywgYykgPT4gYyA/IGMudG9VcHBlckNhc2UoKSA6IFwiXCIpO1xuICB9XG4pO1xuY29uc3QgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xuY29uc3QgaHlwaGVuYXRlID0gY2FjaGVTdHJpbmdGdW5jdGlvbihcbiAgKHN0cikgPT4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKClcbik7XG5jb25zdCBjYXBpdGFsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59KTtcbmNvbnN0IHRvSGFuZGxlcktleSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oXG4gIChzdHIpID0+IHtcbiAgICBjb25zdCBzID0gc3RyID8gYG9uJHtjYXBpdGFsaXplKHN0cil9YCA6IGBgO1xuICAgIHJldHVybiBzO1xuICB9XG4pO1xuY29uc3QgaGFzQ2hhbmdlZCA9ICh2YWx1ZSwgb2xkVmFsdWUpID0+ICFPYmplY3QuaXModmFsdWUsIG9sZFZhbHVlKTtcbmNvbnN0IGludm9rZUFycmF5Rm5zID0gKGZucywgLi4uYXJnKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgZm5zW2ldKC4uLmFyZyk7XG4gIH1cbn07XG5jb25zdCBkZWYgPSAob2JqLCBrZXksIHZhbHVlLCB3cml0YWJsZSA9IGZhbHNlKSA9PiB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZSxcbiAgICB2YWx1ZVxuICB9KTtcbn07XG5jb25zdCBsb29zZVRvTnVtYmVyID0gKHZhbCkgPT4ge1xuICBjb25zdCBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuO1xufTtcbmNvbnN0IHRvTnVtYmVyID0gKHZhbCkgPT4ge1xuICBjb25zdCBuID0gaXNTdHJpbmcodmFsKSA/IE51bWJlcih2YWwpIDogTmFOO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuO1xufTtcbmxldCBfZ2xvYmFsVGhpcztcbmNvbnN0IGdldEdsb2JhbFRoaXMgPSAoKSA9PiB7XG4gIHJldHVybiBfZ2xvYmFsVGhpcyB8fCAoX2dsb2JhbFRoaXMgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHt9KTtcbn07XG5jb25zdCBpZGVudFJFID0gL15bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVtfJGEtekEtWjAtOVxceEEwLVxcdUZGRkZdKiQvO1xuZnVuY3Rpb24gZ2VuUHJvcHNBY2Nlc3NFeHAobmFtZSkge1xuICByZXR1cm4gaWRlbnRSRS50ZXN0KG5hbWUpID8gYF9fcHJvcHMuJHtuYW1lfWAgOiBgX19wcm9wc1ske0pTT04uc3RyaW5naWZ5KG5hbWUpfV1gO1xufVxuXG5jb25zdCBQYXRjaEZsYWdzID0ge1xuICBcIlRFWFRcIjogMSxcbiAgXCIxXCI6IFwiVEVYVFwiLFxuICBcIkNMQVNTXCI6IDIsXG4gIFwiMlwiOiBcIkNMQVNTXCIsXG4gIFwiU1RZTEVcIjogNCxcbiAgXCI0XCI6IFwiU1RZTEVcIixcbiAgXCJQUk9QU1wiOiA4LFxuICBcIjhcIjogXCJQUk9QU1wiLFxuICBcIkZVTExfUFJPUFNcIjogMTYsXG4gIFwiMTZcIjogXCJGVUxMX1BST1BTXCIsXG4gIFwiTkVFRF9IWURSQVRJT05cIjogMzIsXG4gIFwiMzJcIjogXCJORUVEX0hZRFJBVElPTlwiLFxuICBcIlNUQUJMRV9GUkFHTUVOVFwiOiA2NCxcbiAgXCI2NFwiOiBcIlNUQUJMRV9GUkFHTUVOVFwiLFxuICBcIktFWUVEX0ZSQUdNRU5UXCI6IDEyOCxcbiAgXCIxMjhcIjogXCJLRVlFRF9GUkFHTUVOVFwiLFxuICBcIlVOS0VZRURfRlJBR01FTlRcIjogMjU2LFxuICBcIjI1NlwiOiBcIlVOS0VZRURfRlJBR01FTlRcIixcbiAgXCJORUVEX1BBVENIXCI6IDUxMixcbiAgXCI1MTJcIjogXCJORUVEX1BBVENIXCIsXG4gIFwiRFlOQU1JQ19TTE9UU1wiOiAxMDI0LFxuICBcIjEwMjRcIjogXCJEWU5BTUlDX1NMT1RTXCIsXG4gIFwiREVWX1JPT1RfRlJBR01FTlRcIjogMjA0OCxcbiAgXCIyMDQ4XCI6IFwiREVWX1JPT1RfRlJBR01FTlRcIixcbiAgXCJDQUNIRURcIjogLTEsXG4gIFwiLTFcIjogXCJDQUNIRURcIixcbiAgXCJCQUlMXCI6IC0yLFxuICBcIi0yXCI6IFwiQkFJTFwiXG59O1xuY29uc3QgUGF0Y2hGbGFnTmFtZXMgPSB7XG4gIFsxXTogYFRFWFRgLFxuICBbMl06IGBDTEFTU2AsXG4gIFs0XTogYFNUWUxFYCxcbiAgWzhdOiBgUFJPUFNgLFxuICBbMTZdOiBgRlVMTF9QUk9QU2AsXG4gIFszMl06IGBORUVEX0hZRFJBVElPTmAsXG4gIFs2NF06IGBTVEFCTEVfRlJBR01FTlRgLFxuICBbMTI4XTogYEtFWUVEX0ZSQUdNRU5UYCxcbiAgWzI1Nl06IGBVTktFWUVEX0ZSQUdNRU5UYCxcbiAgWzUxMl06IGBORUVEX1BBVENIYCxcbiAgWzEwMjRdOiBgRFlOQU1JQ19TTE9UU2AsXG4gIFsyMDQ4XTogYERFVl9ST09UX0ZSQUdNRU5UYCxcbiAgWy0xXTogYEhPSVNURURgLFxuICBbLTJdOiBgQkFJTGBcbn07XG5cbmNvbnN0IFNoYXBlRmxhZ3MgPSB7XG4gIFwiRUxFTUVOVFwiOiAxLFxuICBcIjFcIjogXCJFTEVNRU5UXCIsXG4gIFwiRlVOQ1RJT05BTF9DT01QT05FTlRcIjogMixcbiAgXCIyXCI6IFwiRlVOQ1RJT05BTF9DT01QT05FTlRcIixcbiAgXCJTVEFURUZVTF9DT01QT05FTlRcIjogNCxcbiAgXCI0XCI6IFwiU1RBVEVGVUxfQ09NUE9ORU5UXCIsXG4gIFwiVEVYVF9DSElMRFJFTlwiOiA4LFxuICBcIjhcIjogXCJURVhUX0NISUxEUkVOXCIsXG4gIFwiQVJSQVlfQ0hJTERSRU5cIjogMTYsXG4gIFwiMTZcIjogXCJBUlJBWV9DSElMRFJFTlwiLFxuICBcIlNMT1RTX0NISUxEUkVOXCI6IDMyLFxuICBcIjMyXCI6IFwiU0xPVFNfQ0hJTERSRU5cIixcbiAgXCJURUxFUE9SVFwiOiA2NCxcbiAgXCI2NFwiOiBcIlRFTEVQT1JUXCIsXG4gIFwiU1VTUEVOU0VcIjogMTI4LFxuICBcIjEyOFwiOiBcIlNVU1BFTlNFXCIsXG4gIFwiQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFXCI6IDI1NixcbiAgXCIyNTZcIjogXCJDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkVcIixcbiAgXCJDT01QT05FTlRfS0VQVF9BTElWRVwiOiA1MTIsXG4gIFwiNTEyXCI6IFwiQ09NUE9ORU5UX0tFUFRfQUxJVkVcIixcbiAgXCJDT01QT05FTlRcIjogNixcbiAgXCI2XCI6IFwiQ09NUE9ORU5UXCJcbn07XG5cbmNvbnN0IFNsb3RGbGFncyA9IHtcbiAgXCJTVEFCTEVcIjogMSxcbiAgXCIxXCI6IFwiU1RBQkxFXCIsXG4gIFwiRFlOQU1JQ1wiOiAyLFxuICBcIjJcIjogXCJEWU5BTUlDXCIsXG4gIFwiRk9SV0FSREVEXCI6IDMsXG4gIFwiM1wiOiBcIkZPUldBUkRFRFwiXG59O1xuY29uc3Qgc2xvdEZsYWdzVGV4dCA9IHtcbiAgWzFdOiBcIlNUQUJMRVwiLFxuICBbMl06IFwiRFlOQU1JQ1wiLFxuICBbM106IFwiRk9SV0FSREVEXCJcbn07XG5cbmNvbnN0IEdMT0JBTFNfQUxMT1dFRCA9IFwiSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTixwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCxNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsQmlnSW50LGNvbnNvbGUsRXJyb3IsU3ltYm9sXCI7XG5jb25zdCBpc0dsb2JhbGx5QWxsb3dlZCA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKEdMT0JBTFNfQUxMT1dFRCk7XG5jb25zdCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQgPSBpc0dsb2JhbGx5QWxsb3dlZDtcblxuY29uc3QgcmFuZ2UgPSAyO1xuZnVuY3Rpb24gZ2VuZXJhdGVDb2RlRnJhbWUoc291cmNlLCBzdGFydCA9IDAsIGVuZCA9IHNvdXJjZS5sZW5ndGgpIHtcbiAgc3RhcnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzdGFydCwgc291cmNlLmxlbmd0aCkpO1xuICBlbmQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihlbmQsIHNvdXJjZS5sZW5ndGgpKTtcbiAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gXCJcIjtcbiAgbGV0IGxpbmVzID0gc291cmNlLnNwbGl0KC8oXFxyP1xcbikvKTtcbiAgY29uc3QgbmV3bGluZVNlcXVlbmNlcyA9IGxpbmVzLmZpbHRlcigoXywgaWR4KSA9PiBpZHggJSAyID09PSAxKTtcbiAgbGluZXMgPSBsaW5lcy5maWx0ZXIoKF8sIGlkeCkgPT4gaWR4ICUgMiA9PT0gMCk7XG4gIGxldCBjb3VudCA9IDA7XG4gIGNvbnN0IHJlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY291bnQgKz0gbGluZXNbaV0ubGVuZ3RoICsgKG5ld2xpbmVTZXF1ZW5jZXNbaV0gJiYgbmV3bGluZVNlcXVlbmNlc1tpXS5sZW5ndGggfHwgMCk7XG4gICAgaWYgKGNvdW50ID49IHN0YXJ0KSB7XG4gICAgICBmb3IgKGxldCBqID0gaSAtIHJhbmdlOyBqIDw9IGkgKyByYW5nZSB8fCBlbmQgPiBjb3VudDsgaisrKSB7XG4gICAgICAgIGlmIChqIDwgMCB8fCBqID49IGxpbmVzLmxlbmd0aCkgY29udGludWU7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBqICsgMTtcbiAgICAgICAgcmVzLnB1c2goXG4gICAgICAgICAgYCR7bGluZX0ke1wiIFwiLnJlcGVhdChNYXRoLm1heCgzIC0gU3RyaW5nKGxpbmUpLmxlbmd0aCwgMCkpfXwgICR7bGluZXNbal19YFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBsaW5lTGVuZ3RoID0gbGluZXNbal0ubGVuZ3RoO1xuICAgICAgICBjb25zdCBuZXdMaW5lU2VxTGVuZ3RoID0gbmV3bGluZVNlcXVlbmNlc1tqXSAmJiBuZXdsaW5lU2VxdWVuY2VzW2pdLmxlbmd0aCB8fCAwO1xuICAgICAgICBpZiAoaiA9PT0gaSkge1xuICAgICAgICAgIGNvbnN0IHBhZCA9IHN0YXJ0IC0gKGNvdW50IC0gKGxpbmVMZW5ndGggKyBuZXdMaW5lU2VxTGVuZ3RoKSk7XG4gICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgZW5kID4gY291bnQgPyBsaW5lTGVuZ3RoIC0gcGFkIDogZW5kIC0gc3RhcnRcbiAgICAgICAgICApO1xuICAgICAgICAgIHJlcy5wdXNoKGAgICB8ICBgICsgXCIgXCIucmVwZWF0KHBhZCkgKyBcIl5cIi5yZXBlYXQobGVuZ3RoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaiA+IGkpIHtcbiAgICAgICAgICBpZiAoZW5kID4gY291bnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KE1hdGgubWluKGVuZCAtIGNvdW50LCBsaW5lTGVuZ3RoKSwgMSk7XG4gICAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArIFwiXlwiLnJlcGVhdChsZW5ndGgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY291bnQgKz0gbGluZUxlbmd0aCArIG5ld0xpbmVTZXFMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzLmpvaW4oXCJcXG5cIik7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlKHZhbHVlKSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB2YWx1ZVtpXTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBpc1N0cmluZyhpdGVtKSA/IHBhcnNlU3RyaW5nU3R5bGUoaXRlbSkgOiBub3JtYWxpemVTdHlsZShpdGVtKTtcbiAgICAgIGlmIChub3JtYWxpemVkKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5vcm1hbGl6ZWQpIHtcbiAgICAgICAgICByZXNba2V5XSA9IG5vcm1hbGl6ZWRba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fCBpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbmNvbnN0IGxpc3REZWxpbWl0ZXJSRSA9IC87KD8hW14oXSpcXCkpL2c7XG5jb25zdCBwcm9wZXJ0eURlbGltaXRlclJFID0gLzooW15dKykvO1xuY29uc3Qgc3R5bGVDb21tZW50UkUgPSAvXFwvXFwqW15dKj9cXCpcXC8vZztcbmZ1bmN0aW9uIHBhcnNlU3RyaW5nU3R5bGUoY3NzVGV4dCkge1xuICBjb25zdCByZXQgPSB7fTtcbiAgY3NzVGV4dC5yZXBsYWNlKHN0eWxlQ29tbWVudFJFLCBcIlwiKS5zcGxpdChsaXN0RGVsaW1pdGVyUkUpLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgY29uc3QgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlclJFKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXRbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5U3R5bGUoc3R5bGVzKSB7XG4gIGxldCByZXQgPSBcIlwiO1xuICBpZiAoIXN0eWxlcyB8fCBpc1N0cmluZyhzdHlsZXMpKSB7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBzdHlsZXMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHN0eWxlc1trZXldO1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0ga2V5LnN0YXJ0c1dpdGgoYC0tYCkgPyBrZXkgOiBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIHJldCArPSBgJHtub3JtYWxpemVkS2V5fToke3ZhbHVlfTtgO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplQ2xhc3ModmFsdWUpIHtcbiAgbGV0IHJlcyA9IFwiXCI7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICByZXMgPSB2YWx1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVDbGFzcyh2YWx1ZVtpXSk7XG4gICAgICBpZiAobm9ybWFsaXplZCkge1xuICAgICAgICByZXMgKz0gbm9ybWFsaXplZCArIFwiIFwiO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZVtuYW1lXSkge1xuICAgICAgICByZXMgKz0gbmFtZSArIFwiIFwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzLnRyaW0oKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzKHByb3BzKSB7XG4gIGlmICghcHJvcHMpIHJldHVybiBudWxsO1xuICBsZXQgeyBjbGFzczoga2xhc3MsIHN0eWxlIH0gPSBwcm9wcztcbiAgaWYgKGtsYXNzICYmICFpc1N0cmluZyhrbGFzcykpIHtcbiAgICBwcm9wcy5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKGtsYXNzKTtcbiAgfVxuICBpZiAoc3R5bGUpIHtcbiAgICBwcm9wcy5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKHN0eWxlKTtcbiAgfVxuICByZXR1cm4gcHJvcHM7XG59XG5cbmNvbnN0IEhUTUxfVEFHUyA9IFwiaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaGdyb3VwLGgxLGgyLGgzLGg0LGg1LGg2LG5hdixzZWN0aW9uLGRpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLGEsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLGVtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSxkZXRhaWxzLGRpYWxvZyxtZW51LHN1bW1hcnksdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3RcIjtcbmNvbnN0IFNWR19UQUdTID0gXCJzdmcsYW5pbWF0ZSxhbmltYXRlTW90aW9uLGFuaW1hdGVUcmFuc2Zvcm0sY2lyY2xlLGNsaXBQYXRoLGNvbG9yLXByb2ZpbGUsZGVmcyxkZXNjLGRpc2NhcmQsZWxsaXBzZSxmZUJsZW5kLGZlQ29sb3JNYXRyaXgsZmVDb21wb25lbnRUcmFuc2ZlcixmZUNvbXBvc2l0ZSxmZUNvbnZvbHZlTWF0cml4LGZlRGlmZnVzZUxpZ2h0aW5nLGZlRGlzcGxhY2VtZW50TWFwLGZlRGlzdGFudExpZ2h0LGZlRHJvcFNoYWRvdyxmZUZsb29kLGZlRnVuY0EsZmVGdW5jQixmZUZ1bmNHLGZlRnVuY1IsZmVHYXVzc2lhbkJsdXIsZmVJbWFnZSxmZU1lcmdlLGZlTWVyZ2VOb2RlLGZlTW9ycGhvbG9neSxmZU9mZnNldCxmZVBvaW50TGlnaHQsZmVTcGVjdWxhckxpZ2h0aW5nLGZlU3BvdExpZ2h0LGZlVGlsZSxmZVR1cmJ1bGVuY2UsZmlsdGVyLGZvcmVpZ25PYmplY3QsZyxoYXRjaCxoYXRjaHBhdGgsaW1hZ2UsbGluZSxsaW5lYXJHcmFkaWVudCxtYXJrZXIsbWFzayxtZXNoLG1lc2hncmFkaWVudCxtZXNocGF0Y2gsbWVzaHJvdyxtZXRhZGF0YSxtcGF0aCxwYXRoLHBhdHRlcm4scG9seWdvbixwb2x5bGluZSxyYWRpYWxHcmFkaWVudCxyZWN0LHNldCxzb2xpZGNvbG9yLHN0b3Asc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRQYXRoLHRpdGxlLHRzcGFuLHVua25vd24sdXNlLHZpZXdcIjtcbmNvbnN0IE1BVEhfVEFHUyA9IFwiYW5ub3RhdGlvbixhbm5vdGF0aW9uLXhtbCxtYWN0aW9uLG1hbGlnbmdyb3VwLG1hbGlnbm1hcmssbWF0aCxtZW5jbG9zZSxtZXJyb3IsbWZlbmNlZCxtZnJhYyxtZnJhY3Rpb24sbWdseXBoLG1pLG1sYWJlbGVkdHIsbWxvbmdkaXYsbW11bHRpc2NyaXB0cyxtbixtbyxtb3ZlcixtcGFkZGVkLG1waGFudG9tLG1wcmVzY3JpcHRzLG1yb290LG1yb3csbXMsbXNjYXJyaWVzLG1zY2FycnksbXNncm91cCxtc2xpbmUsbXNwYWNlLG1zcXJ0LG1zcm93LG1zdGFjayxtc3R5bGUsbXN1Yixtc3Vic3VwLG1zdXAsbXRhYmxlLG10ZCxtdGV4dCxtdHIsbXVuZGVyLG11bmRlcm92ZXIsbm9uZSxzZW1hbnRpY3NcIjtcbmNvbnN0IFZPSURfVEFHUyA9IFwiYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxocixpbWcsaW5wdXQsbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnJcIjtcbmNvbnN0IGlzSFRNTFRhZyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKEhUTUxfVEFHUyk7XG5jb25zdCBpc1NWR1RhZyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFNWR19UQUdTKTtcbmNvbnN0IGlzTWF0aE1MVGFnID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoTUFUSF9UQUdTKTtcbmNvbnN0IGlzVm9pZFRhZyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFZPSURfVEFHUyk7XG5cbmNvbnN0IHNwZWNpYWxCb29sZWFuQXR0cnMgPSBgaXRlbXNjb3BlLGFsbG93ZnVsbHNjcmVlbixmb3Jtbm92YWxpZGF0ZSxpc21hcCxub21vZHVsZSxub3ZhbGlkYXRlLHJlYWRvbmx5YDtcbmNvbnN0IGlzU3BlY2lhbEJvb2xlYW5BdHRyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoc3BlY2lhbEJvb2xlYW5BdHRycyk7XG5jb25zdCBpc0Jvb2xlYW5BdHRyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoXG4gIHNwZWNpYWxCb29sZWFuQXR0cnMgKyBgLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjb250cm9scyxkZWZhdWx0LGRlZmVyLGRpc2FibGVkLGhpZGRlbixpbmVydCxsb29wLG9wZW4scmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLGNoZWNrZWQsbXV0ZWQsbXVsdGlwbGUsc2VsZWN0ZWRgXG4pO1xuZnVuY3Rpb24gaW5jbHVkZUJvb2xlYW5BdHRyKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlIHx8IHZhbHVlID09PSBcIlwiO1xufVxuY29uc3QgdW5zYWZlQXR0ckNoYXJSRSA9IC9bPi89XCInXFx1MDAwOVxcdTAwMGFcXHUwMDBjXFx1MDAyMF0vO1xuY29uc3QgYXR0clZhbGlkYXRpb25DYWNoZSA9IHt9O1xuZnVuY3Rpb24gaXNTU1JTYWZlQXR0ck5hbWUobmFtZSkge1xuICBpZiAoYXR0clZhbGlkYXRpb25DYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHJldHVybiBhdHRyVmFsaWRhdGlvbkNhY2hlW25hbWVdO1xuICB9XG4gIGNvbnN0IGlzVW5zYWZlID0gdW5zYWZlQXR0ckNoYXJSRS50ZXN0KG5hbWUpO1xuICBpZiAoaXNVbnNhZmUpIHtcbiAgICBjb25zb2xlLmVycm9yKGB1bnNhZmUgYXR0cmlidXRlIG5hbWU6ICR7bmFtZX1gKTtcbiAgfVxuICByZXR1cm4gYXR0clZhbGlkYXRpb25DYWNoZVtuYW1lXSA9ICFpc1Vuc2FmZTtcbn1cbmNvbnN0IHByb3BzVG9BdHRyTWFwID0ge1xuICBhY2NlcHRDaGFyc2V0OiBcImFjY2VwdC1jaGFyc2V0XCIsXG4gIGNsYXNzTmFtZTogXCJjbGFzc1wiLFxuICBodG1sRm9yOiBcImZvclwiLFxuICBodHRwRXF1aXY6IFwiaHR0cC1lcXVpdlwiXG59O1xuY29uc3QgaXNLbm93bkh0bWxBdHRyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoXG4gIGBhY2NlcHQsYWNjZXB0LWNoYXJzZXQsYWNjZXNza2V5LGFjdGlvbixhbGlnbixhbGxvdyxhbHQsYXN5bmMsYXV0b2NhcGl0YWxpemUsYXV0b2NvbXBsZXRlLGF1dG9mb2N1cyxhdXRvcGxheSxiYWNrZ3JvdW5kLGJnY29sb3IsYm9yZGVyLGJ1ZmZlcmVkLGNhcHR1cmUsY2hhbGxlbmdlLGNoYXJzZXQsY2hlY2tlZCxjaXRlLGNsYXNzLGNvZGUsY29kZWJhc2UsY29sb3IsY29scyxjb2xzcGFuLGNvbnRlbnQsY29udGVudGVkaXRhYmxlLGNvbnRleHRtZW51LGNvbnRyb2xzLGNvb3Jkcyxjcm9zc29yaWdpbixjc3AsZGF0YSxkYXRldGltZSxkZWNvZGluZyxkZWZhdWx0LGRlZmVyLGRpcixkaXJuYW1lLGRpc2FibGVkLGRvd25sb2FkLGRyYWdnYWJsZSxkcm9wem9uZSxlbmN0eXBlLGVudGVya2V5aGludCxmb3IsZm9ybSxmb3JtYWN0aW9uLGZvcm1lbmN0eXBlLGZvcm1tZXRob2QsZm9ybW5vdmFsaWRhdGUsZm9ybXRhcmdldCxoZWFkZXJzLGhlaWdodCxoaWRkZW4saGlnaCxocmVmLGhyZWZsYW5nLGh0dHAtZXF1aXYsaWNvbixpZCxpbXBvcnRhbmNlLGluZXJ0LGludGVncml0eSxpc21hcCxpdGVtcHJvcCxrZXl0eXBlLGtpbmQsbGFiZWwsbGFuZyxsYW5ndWFnZSxsb2FkaW5nLGxpc3QsbG9vcCxsb3csbWFuaWZlc3QsbWF4LG1heGxlbmd0aCxtaW5sZW5ndGgsbWVkaWEsbWluLG11bHRpcGxlLG11dGVkLG5hbWUsbm92YWxpZGF0ZSxvcGVuLG9wdGltdW0scGF0dGVybixwaW5nLHBsYWNlaG9sZGVyLHBvc3RlcixwcmVsb2FkLHJhZGlvZ3JvdXAscmVhZG9ubHkscmVmZXJyZXJwb2xpY3kscmVsLHJlcXVpcmVkLHJldmVyc2VkLHJvd3Mscm93c3BhbixzYW5kYm94LHNjb3BlLHNjb3BlZCxzZWxlY3RlZCxzaGFwZSxzaXplLHNpemVzLHNsb3Qsc3BhbixzcGVsbGNoZWNrLHNyYyxzcmNkb2Msc3JjbGFuZyxzcmNzZXQsc3RhcnQsc3RlcCxzdHlsZSxzdW1tYXJ5LHRhYmluZGV4LHRhcmdldCx0aXRsZSx0cmFuc2xhdGUsdHlwZSx1c2VtYXAsdmFsdWUsd2lkdGgsd3JhcGBcbik7XG5jb25zdCBpc0tub3duU3ZnQXR0ciA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFxuICBgeG1sbnMsYWNjZW50LWhlaWdodCxhY2N1bXVsYXRlLGFkZGl0aXZlLGFsaWdubWVudC1iYXNlbGluZSxhbHBoYWJldGljLGFtcGxpdHVkZSxhcmFiaWMtZm9ybSxhc2NlbnQsYXR0cmlidXRlTmFtZSxhdHRyaWJ1dGVUeXBlLGF6aW11dGgsYmFzZUZyZXF1ZW5jeSxiYXNlbGluZS1zaGlmdCxiYXNlUHJvZmlsZSxiYm94LGJlZ2luLGJpYXMsYnksY2FsY01vZGUsY2FwLWhlaWdodCxjbGFzcyxjbGlwLGNsaXBQYXRoVW5pdHMsY2xpcC1wYXRoLGNsaXAtcnVsZSxjb2xvcixjb2xvci1pbnRlcnBvbGF0aW9uLGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyxjb2xvci1wcm9maWxlLGNvbG9yLXJlbmRlcmluZyxjb250ZW50U2NyaXB0VHlwZSxjb250ZW50U3R5bGVUeXBlLGNyb3Nzb3JpZ2luLGN1cnNvcixjeCxjeSxkLGRlY2VsZXJhdGUsZGVzY2VudCxkaWZmdXNlQ29uc3RhbnQsZGlyZWN0aW9uLGRpc3BsYXksZGl2aXNvcixkb21pbmFudC1iYXNlbGluZSxkdXIsZHgsZHksZWRnZU1vZGUsZWxldmF0aW9uLGVuYWJsZS1iYWNrZ3JvdW5kLGVuZCxleHBvbmVudCxmaWxsLGZpbGwtb3BhY2l0eSxmaWxsLXJ1bGUsZmlsdGVyLGZpbHRlclJlcyxmaWx0ZXJVbml0cyxmbG9vZC1jb2xvcixmbG9vZC1vcGFjaXR5LGZvbnQtZmFtaWx5LGZvbnQtc2l6ZSxmb250LXNpemUtYWRqdXN0LGZvbnQtc3RyZXRjaCxmb250LXN0eWxlLGZvbnQtdmFyaWFudCxmb250LXdlaWdodCxmb3JtYXQsZnJvbSxmcixmeCxmeSxnMSxnMixnbHlwaC1uYW1lLGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwsZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwsZ2x5cGhSZWYsZ3JhZGllbnRUcmFuc2Zvcm0sZ3JhZGllbnRVbml0cyxoYW5naW5nLGhlaWdodCxocmVmLGhyZWZsYW5nLGhvcml6LWFkdi14LGhvcml6LW9yaWdpbi14LGlkLGlkZW9ncmFwaGljLGltYWdlLXJlbmRlcmluZyxpbixpbjIsaW50ZXJjZXB0LGssazEsazIsazMsazQsa2VybmVsTWF0cml4LGtlcm5lbFVuaXRMZW5ndGgsa2VybmluZyxrZXlQb2ludHMsa2V5U3BsaW5lcyxrZXlUaW1lcyxsYW5nLGxlbmd0aEFkanVzdCxsZXR0ZXItc3BhY2luZyxsaWdodGluZy1jb2xvcixsaW1pdGluZ0NvbmVBbmdsZSxsb2NhbCxtYXJrZXItZW5kLG1hcmtlci1taWQsbWFya2VyLXN0YXJ0LG1hcmtlckhlaWdodCxtYXJrZXJVbml0cyxtYXJrZXJXaWR0aCxtYXNrLG1hc2tDb250ZW50VW5pdHMsbWFza1VuaXRzLG1hdGhlbWF0aWNhbCxtYXgsbWVkaWEsbWV0aG9kLG1pbixtb2RlLG5hbWUsbnVtT2N0YXZlcyxvZmZzZXQsb3BhY2l0eSxvcGVyYXRvcixvcmRlcixvcmllbnQsb3JpZW50YXRpb24sb3JpZ2luLG92ZXJmbG93LG92ZXJsaW5lLXBvc2l0aW9uLG92ZXJsaW5lLXRoaWNrbmVzcyxwYW5vc2UtMSxwYWludC1vcmRlcixwYXRoLHBhdGhMZW5ndGgscGF0dGVybkNvbnRlbnRVbml0cyxwYXR0ZXJuVHJhbnNmb3JtLHBhdHRlcm5Vbml0cyxwaW5nLHBvaW50ZXItZXZlbnRzLHBvaW50cyxwb2ludHNBdFgscG9pbnRzQXRZLHBvaW50c0F0WixwcmVzZXJ2ZUFscGhhLHByZXNlcnZlQXNwZWN0UmF0aW8scHJpbWl0aXZlVW5pdHMscixyYWRpdXMscmVmZXJyZXJQb2xpY3kscmVmWCxyZWZZLHJlbCxyZW5kZXJpbmctaW50ZW50LHJlcGVhdENvdW50LHJlcGVhdER1cixyZXF1aXJlZEV4dGVuc2lvbnMscmVxdWlyZWRGZWF0dXJlcyxyZXN0YXJ0LHJlc3VsdCxyb3RhdGUscngscnksc2NhbGUsc2VlZCxzaGFwZS1yZW5kZXJpbmcsc2xvcGUsc3BhY2luZyxzcGVjdWxhckNvbnN0YW50LHNwZWN1bGFyRXhwb25lbnQsc3BlZWQsc3ByZWFkTWV0aG9kLHN0YXJ0T2Zmc2V0LHN0ZERldmlhdGlvbixzdGVtaCxzdGVtdixzdGl0Y2hUaWxlcyxzdG9wLWNvbG9yLHN0b3Atb3BhY2l0eSxzdHJpa2V0aHJvdWdoLXBvc2l0aW9uLHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzLHN0cmluZyxzdHJva2Usc3Ryb2tlLWRhc2hhcnJheSxzdHJva2UtZGFzaG9mZnNldCxzdHJva2UtbGluZWNhcCxzdHJva2UtbGluZWpvaW4sc3Ryb2tlLW1pdGVybGltaXQsc3Ryb2tlLW9wYWNpdHksc3Ryb2tlLXdpZHRoLHN0eWxlLHN1cmZhY2VTY2FsZSxzeXN0ZW1MYW5ndWFnZSx0YWJpbmRleCx0YWJsZVZhbHVlcyx0YXJnZXQsdGFyZ2V0WCx0YXJnZXRZLHRleHQtYW5jaG9yLHRleHQtZGVjb3JhdGlvbix0ZXh0LXJlbmRlcmluZyx0ZXh0TGVuZ3RoLHRvLHRyYW5zZm9ybSx0cmFuc2Zvcm0tb3JpZ2luLHR5cGUsdTEsdTIsdW5kZXJsaW5lLXBvc2l0aW9uLHVuZGVybGluZS10aGlja25lc3MsdW5pY29kZSx1bmljb2RlLWJpZGksdW5pY29kZS1yYW5nZSx1bml0cy1wZXItZW0sdi1hbHBoYWJldGljLHYtaGFuZ2luZyx2LWlkZW9ncmFwaGljLHYtbWF0aGVtYXRpY2FsLHZhbHVlcyx2ZWN0b3ItZWZmZWN0LHZlcnNpb24sdmVydC1hZHYteSx2ZXJ0LW9yaWdpbi14LHZlcnQtb3JpZ2luLXksdmlld0JveCx2aWV3VGFyZ2V0LHZpc2liaWxpdHksd2lkdGgsd2lkdGhzLHdvcmQtc3BhY2luZyx3cml0aW5nLW1vZGUseCx4LWhlaWdodCx4MSx4Mix4Q2hhbm5lbFNlbGVjdG9yLHhsaW5rOmFjdHVhdGUseGxpbms6YXJjcm9sZSx4bGluazpocmVmLHhsaW5rOnJvbGUseGxpbms6c2hvdyx4bGluazp0aXRsZSx4bGluazp0eXBlLHhtbG5zOnhsaW5rLHhtbDpiYXNlLHhtbDpsYW5nLHhtbDpzcGFjZSx5LHkxLHkyLHlDaGFubmVsU2VsZWN0b3Iseix6b29tQW5kUGFuYFxuKTtcbmNvbnN0IGlzS25vd25NYXRoTUxBdHRyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoXG4gIGBhY2NlbnQsYWNjZW50dW5kZXIsYWN0aW9udHlwZSxhbGlnbixhbGlnbm1lbnRzY29wZSxhbHRpbWcsYWx0aW1nLWhlaWdodCxhbHRpbWctdmFsaWduLGFsdGltZy13aWR0aCxhbHR0ZXh0LGJldmVsbGVkLGNsb3NlLGNvbHVtbnNhbGlnbixjb2x1bW5saW5lcyxjb2x1bW5zcGFuLGRlbm9tYWxpZ24sZGVwdGgsZGlyLGRpc3BsYXksZGlzcGxheXN0eWxlLGVuY29kaW5nLGVxdWFsY29sdW1ucyxlcXVhbHJvd3MsZmVuY2UsZm9udHN0eWxlLGZvbnR3ZWlnaHQsZm9ybSxmcmFtZSxmcmFtZXNwYWNpbmcsZ3JvdXBhbGlnbixoZWlnaHQsaHJlZixpZCxpbmRlbnRhbGlnbixpbmRlbnRhbGlnbmZpcnN0LGluZGVudGFsaWdubGFzdCxpbmRlbnRzaGlmdCxpbmRlbnRzaGlmdGZpcnN0LGluZGVudHNoaWZ0bGFzdCxpbmRleHR5cGUsanVzdGlmeSxsYXJnZXRvcCxsYXJnZW9wLGxxdW90ZSxsc3BhY2UsbWF0aGJhY2tncm91bmQsbWF0aGNvbG9yLG1hdGhzaXplLG1hdGh2YXJpYW50LG1heHNpemUsbWlubGFiZWxzcGFjaW5nLG1vZGUsb3RoZXIsb3ZlcmZsb3cscG9zaXRpb24scm93YWxpZ24scm93bGluZXMscm93c3BhbixycXVvdGUscnNwYWNlLHNjcmlwdGxldmVsLHNjcmlwdG1pbnNpemUsc2NyaXB0c2l6ZW11bHRpcGxpZXIsc2VsZWN0aW9uLHNlcGFyYXRvcixzZXBhcmF0b3JzLHNoaWZ0LHNpZGUsc3JjLHN0YWNrYWxpZ24sc3RyZXRjaHksc3Vic2NyaXB0c2hpZnQsc3VwZXJzY3JpcHRzaGlmdCxzeW1tZXRyaWMsdm9mZnNldCx3aWR0aCx3aWR0aHMseGxpbms6aHJlZix4bGluazpzaG93LHhsaW5rOnR5cGUseG1sbnNgXG4pO1xuZnVuY3Rpb24gaXNSZW5kZXJhYmxlQXR0clZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB0eXBlID09PSBcInN0cmluZ1wiIHx8IHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJib29sZWFuXCI7XG59XG5cbmNvbnN0IGVzY2FwZVJFID0gL1tcIicmPD5dLztcbmZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyaW5nKSB7XG4gIGNvbnN0IHN0ciA9IFwiXCIgKyBzdHJpbmc7XG4gIGNvbnN0IG1hdGNoID0gZXNjYXBlUkUuZXhlYyhzdHIpO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICBsZXQgaHRtbCA9IFwiXCI7XG4gIGxldCBlc2NhcGVkO1xuICBsZXQgaW5kZXg7XG4gIGxldCBsYXN0SW5kZXggPSAwO1xuICBmb3IgKGluZGV4ID0gbWF0Y2guaW5kZXg7IGluZGV4IDwgc3RyLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHN3aXRjaCAoc3RyLmNoYXJDb2RlQXQoaW5kZXgpKSB7XG4gICAgICBjYXNlIDM0OlxuICAgICAgICBlc2NhcGVkID0gXCImcXVvdDtcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM4OlxuICAgICAgICBlc2NhcGVkID0gXCImYW1wO1wiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzk6XG4gICAgICAgIGVzY2FwZWQgPSBcIiYjMzk7XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2MDpcbiAgICAgICAgZXNjYXBlZCA9IFwiJmx0O1wiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjI6XG4gICAgICAgIGVzY2FwZWQgPSBcIiZndDtcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGxhc3RJbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgIGh0bWwgKz0gc3RyLnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpO1xuICAgIH1cbiAgICBsYXN0SW5kZXggPSBpbmRleCArIDE7XG4gICAgaHRtbCArPSBlc2NhcGVkO1xuICB9XG4gIHJldHVybiBsYXN0SW5kZXggIT09IGluZGV4ID8gaHRtbCArIHN0ci5zbGljZShsYXN0SW5kZXgsIGluZGV4KSA6IGh0bWw7XG59XG5jb25zdCBjb21tZW50U3RyaXBSRSA9IC9eLT8+fDwhLS18LS0+fC0tIT58PCEtJC9nO1xuZnVuY3Rpb24gZXNjYXBlSHRtbENvbW1lbnQoc3JjKSB7XG4gIHJldHVybiBzcmMucmVwbGFjZShjb21tZW50U3RyaXBSRSwgXCJcIik7XG59XG5jb25zdCBjc3NWYXJOYW1lRXNjYXBlU3ltYm9sc1JFID0gL1sgIVwiIyQlJicoKSorLC4vOjs8PT4/QFtcXFxcXFxdXmB7fH1+XS9nO1xuZnVuY3Rpb24gZ2V0RXNjYXBlZENzc1Zhck5hbWUoa2V5LCBkb3VibGVFc2NhcGUpIHtcbiAgcmV0dXJuIGtleS5yZXBsYWNlKFxuICAgIGNzc1Zhck5hbWVFc2NhcGVTeW1ib2xzUkUsXG4gICAgKHMpID0+IGRvdWJsZUVzY2FwZSA/IHMgPT09ICdcIicgPyAnXFxcXFxcXFxcXFxcXCInIDogYFxcXFxcXFxcJHtzfWAgOiBgXFxcXCR7c31gXG4gICk7XG59XG5cbmZ1bmN0aW9uIGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSB7XG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgbGV0IGVxdWFsID0gdHJ1ZTtcbiAgZm9yIChsZXQgaSA9IDA7IGVxdWFsICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgZXF1YWwgPSBsb29zZUVxdWFsKGFbaV0sIGJbaV0pO1xuICB9XG4gIHJldHVybiBlcXVhbDtcbn1cbmZ1bmN0aW9uIGxvb3NlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG4gIGxldCBhVmFsaWRUeXBlID0gaXNEYXRlKGEpO1xuICBsZXQgYlZhbGlkVHlwZSA9IGlzRGF0ZShiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKCkgOiBmYWxzZTtcbiAgfVxuICBhVmFsaWRUeXBlID0gaXNTeW1ib2woYSk7XG4gIGJWYWxpZFR5cGUgPSBpc1N5bWJvbChiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG4gIGFWYWxpZFR5cGUgPSBpc0FycmF5KGEpO1xuICBiVmFsaWRUeXBlID0gaXNBcnJheShiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBsb29zZUNvbXBhcmVBcnJheXMoYSwgYikgOiBmYWxzZTtcbiAgfVxuICBhVmFsaWRUeXBlID0gaXNPYmplY3QoYSk7XG4gIGJWYWxpZFR5cGUgPSBpc09iamVjdChiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIGlmICghYVZhbGlkVHlwZSB8fCAhYlZhbGlkVHlwZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBhS2V5c0NvdW50ID0gT2JqZWN0LmtleXMoYSkubGVuZ3RoO1xuICAgIGNvbnN0IGJLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhiKS5sZW5ndGg7XG4gICAgaWYgKGFLZXlzQ291bnQgIT09IGJLZXlzQ291bnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgICAgY29uc3QgYUhhc0tleSA9IGEuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgIGNvbnN0IGJIYXNLZXkgPSBiLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICBpZiAoYUhhc0tleSAmJiAhYkhhc0tleSB8fCAhYUhhc0tleSAmJiBiSGFzS2V5IHx8ICFsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbn1cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZihhcnIsIHZhbCkge1xuICByZXR1cm4gYXJyLmZpbmRJbmRleCgoaXRlbSkgPT4gbG9vc2VFcXVhbChpdGVtLCB2YWwpKTtcbn1cblxuY29uc3QgaXNSZWYgPSAodmFsKSA9PiB7XG4gIHJldHVybiAhISh2YWwgJiYgdmFsW1wiX192X2lzUmVmXCJdID09PSB0cnVlKTtcbn07XG5jb25zdCB0b0Rpc3BsYXlTdHJpbmcgPSAodmFsKSA9PiB7XG4gIHJldHVybiBpc1N0cmluZyh2YWwpID8gdmFsIDogdmFsID09IG51bGwgPyBcIlwiIDogaXNBcnJheSh2YWwpIHx8IGlzT2JqZWN0KHZhbCkgJiYgKHZhbC50b1N0cmluZyA9PT0gb2JqZWN0VG9TdHJpbmcgfHwgIWlzRnVuY3Rpb24odmFsLnRvU3RyaW5nKSkgPyBpc1JlZih2YWwpID8gdG9EaXNwbGF5U3RyaW5nKHZhbC52YWx1ZSkgOiBKU09OLnN0cmluZ2lmeSh2YWwsIHJlcGxhY2VyLCAyKSA6IFN0cmluZyh2YWwpO1xufTtcbmNvbnN0IHJlcGxhY2VyID0gKF9rZXksIHZhbCkgPT4ge1xuICBpZiAoaXNSZWYodmFsKSkge1xuICAgIHJldHVybiByZXBsYWNlcihfa2V5LCB2YWwudmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzTWFwKHZhbCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2BNYXAoJHt2YWwuc2l6ZX0pYF06IFsuLi52YWwuZW50cmllcygpXS5yZWR1Y2UoXG4gICAgICAgIChlbnRyaWVzLCBba2V5LCB2YWwyXSwgaSkgPT4ge1xuICAgICAgICAgIGVudHJpZXNbc3RyaW5naWZ5U3ltYm9sKGtleSwgaSkgKyBcIiA9PlwiXSA9IHZhbDI7XG4gICAgICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgICAgIH0sXG4gICAgICAgIHt9XG4gICAgICApXG4gICAgfTtcbiAgfSBlbHNlIGlmIChpc1NldCh2YWwpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtgU2V0KCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLnZhbHVlcygpXS5tYXAoKHYpID0+IHN0cmluZ2lmeVN5bWJvbCh2KSlcbiAgICB9O1xuICB9IGVsc2UgaWYgKGlzU3ltYm9sKHZhbCkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5U3ltYm9sKHZhbCk7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSAmJiAhaXNBcnJheSh2YWwpICYmICFpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICByZXR1cm4gU3RyaW5nKHZhbCk7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn07XG5jb25zdCBzdHJpbmdpZnlTeW1ib2wgPSAodiwgaSA9IFwiXCIpID0+IHtcbiAgdmFyIF9hO1xuICByZXR1cm4gKFxuICAgIC8vIFN5bWJvbC5kZXNjcmlwdGlvbiBpbiBlczIwMTkrIHNvIHdlIG5lZWQgdG8gY2FzdCBoZXJlIHRvIHBhc3NcbiAgICAvLyB0aGUgbGliOiBlczIwMTYgY2hlY2tcbiAgICBpc1N5bWJvbCh2KSA/IGBTeW1ib2woJHsoX2EgPSB2LmRlc2NyaXB0aW9uKSAhPSBudWxsID8gX2EgOiBpfSlgIDogdlxuICApO1xufTtcblxuZXhwb3J0IHsgRU1QVFlfQVJSLCBFTVBUWV9PQkosIE5PLCBOT09QLCBQYXRjaEZsYWdOYW1lcywgUGF0Y2hGbGFncywgU2hhcGVGbGFncywgU2xvdEZsYWdzLCBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgY3NzVmFyTmFtZUVzY2FwZVN5bWJvbHNSRSwgZGVmLCBlc2NhcGVIdG1sLCBlc2NhcGVIdG1sQ29tbWVudCwgZXh0ZW5kLCBnZW5Qcm9wc0FjY2Vzc0V4cCwgZ2VuZXJhdGVDb2RlRnJhbWUsIGdldEVzY2FwZWRDc3NWYXJOYW1lLCBnZXRHbG9iYWxUaGlzLCBoYXNDaGFuZ2VkLCBoYXNPd24sIGh5cGhlbmF0ZSwgaW5jbHVkZUJvb2xlYW5BdHRyLCBpbnZva2VBcnJheUZucywgaXNBcnJheSwgaXNCb29sZWFuQXR0ciwgaXNCdWlsdEluRGlyZWN0aXZlLCBpc0RhdGUsIGlzRnVuY3Rpb24sIGlzR2xvYmFsbHlBbGxvd2VkLCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQsIGlzSFRNTFRhZywgaXNJbnRlZ2VyS2V5LCBpc0tub3duSHRtbEF0dHIsIGlzS25vd25NYXRoTUxBdHRyLCBpc0tub3duU3ZnQXR0ciwgaXNNYXAsIGlzTWF0aE1MVGFnLCBpc01vZGVsTGlzdGVuZXIsIGlzT2JqZWN0LCBpc09uLCBpc1BsYWluT2JqZWN0LCBpc1Byb21pc2UsIGlzUmVnRXhwLCBpc1JlbmRlcmFibGVBdHRyVmFsdWUsIGlzUmVzZXJ2ZWRQcm9wLCBpc1NTUlNhZmVBdHRyTmFtZSwgaXNTVkdUYWcsIGlzU2V0LCBpc1NwZWNpYWxCb29sZWFuQXR0ciwgaXNTdHJpbmcsIGlzU3ltYm9sLCBpc1ZvaWRUYWcsIGxvb3NlRXF1YWwsIGxvb3NlSW5kZXhPZiwgbG9vc2VUb051bWJlciwgbWFrZU1hcCwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVByb3BzLCBub3JtYWxpemVTdHlsZSwgb2JqZWN0VG9TdHJpbmcsIHBhcnNlU3RyaW5nU3R5bGUsIHByb3BzVG9BdHRyTWFwLCByZW1vdmUsIHNsb3RGbGFnc1RleHQsIHN0cmluZ2lmeVN0eWxlLCB0b0Rpc3BsYXlTdHJpbmcsIHRvSGFuZGxlcktleSwgdG9OdW1iZXIsIHRvUmF3VHlwZSwgdG9UeXBlU3RyaW5nIH07XG4iXSwibmFtZXMiOlsibWFrZU1hcCIsInN0ciIsIm1hcCIsIk9iamVjdCIsImNyZWF0ZSIsImtleSIsInNwbGl0IiwidmFsIiwiRU1QVFlfT0JKIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiZnJlZXplIiwiRU1QVFlfQVJSIiwiTk9PUCIsIk5PIiwiaXNPbiIsImNoYXJDb2RlQXQiLCJpc01vZGVsTGlzdGVuZXIiLCJzdGFydHNXaXRoIiwiZXh0ZW5kIiwiYXNzaWduIiwicmVtb3ZlIiwiYXJyIiwiZWwiLCJpIiwiaW5kZXhPZiIsInNwbGljZSIsImhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duIiwiY2FsbCIsImlzQXJyYXkiLCJBcnJheSIsImlzTWFwIiwidG9UeXBlU3RyaW5nIiwiaXNTZXQiLCJpc0RhdGUiLCJpc1JlZ0V4cCIsImlzRnVuY3Rpb24iLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNPYmplY3QiLCJpc1Byb21pc2UiLCJ0aGVuIiwiY2F0Y2giLCJvYmplY3RUb1N0cmluZyIsInRvU3RyaW5nIiwidmFsdWUiLCJ0b1Jhd1R5cGUiLCJzbGljZSIsImlzUGxhaW5PYmplY3QiLCJpc0ludGVnZXJLZXkiLCJwYXJzZUludCIsImlzUmVzZXJ2ZWRQcm9wIiwiaXNCdWlsdEluRGlyZWN0aXZlIiwiY2FjaGVTdHJpbmdGdW5jdGlvbiIsImZuIiwiY2FjaGUiLCJoaXQiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJyZXBsYWNlIiwiXyIsImMiLCJ0b1VwcGVyQ2FzZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwidG9Mb3dlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwidG9IYW5kbGVyS2V5IiwicyIsImhhc0NoYW5nZWQiLCJvbGRWYWx1ZSIsImlzIiwiaW52b2tlQXJyYXlGbnMiLCJmbnMiLCJhcmciLCJsZW5ndGgiLCJkZWYiLCJvYmoiLCJ3cml0YWJsZSIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImxvb3NlVG9OdW1iZXIiLCJuIiwicGFyc2VGbG9hdCIsImlzTmFOIiwidG9OdW1iZXIiLCJOdW1iZXIiLCJOYU4iLCJfZ2xvYmFsVGhpcyIsImdldEdsb2JhbFRoaXMiLCJnbG9iYWxUaGlzIiwic2VsZiIsIndpbmRvdyIsImdsb2JhbCIsImlkZW50UkUiLCJnZW5Qcm9wc0FjY2Vzc0V4cCIsIm5hbWUiLCJ0ZXN0IiwiSlNPTiIsInN0cmluZ2lmeSIsIlBhdGNoRmxhZ3MiLCJQYXRjaEZsYWdOYW1lcyIsIlNoYXBlRmxhZ3MiLCJTbG90RmxhZ3MiLCJzbG90RmxhZ3NUZXh0IiwiR0xPQkFMU19BTExPV0VEIiwiaXNHbG9iYWxseUFsbG93ZWQiLCJpc0dsb2JhbGx5V2hpdGVsaXN0ZWQiLCJyYW5nZSIsImdlbmVyYXRlQ29kZUZyYW1lIiwic291cmNlIiwic3RhcnQiLCJlbmQiLCJNYXRoIiwibWF4IiwibWluIiwibGluZXMiLCJuZXdsaW5lU2VxdWVuY2VzIiwiZmlsdGVyIiwiaWR4IiwiY291bnQiLCJyZXMiLCJqIiwibGluZSIsInB1c2giLCJyZXBlYXQiLCJTdHJpbmciLCJsaW5lTGVuZ3RoIiwibmV3TGluZVNlcUxlbmd0aCIsInBhZCIsImpvaW4iLCJub3JtYWxpemVTdHlsZSIsIml0ZW0iLCJub3JtYWxpemVkIiwicGFyc2VTdHJpbmdTdHlsZSIsImxpc3REZWxpbWl0ZXJSRSIsInByb3BlcnR5RGVsaW1pdGVyUkUiLCJzdHlsZUNvbW1lbnRSRSIsImNzc1RleHQiLCJyZXQiLCJmb3JFYWNoIiwidG1wIiwidHJpbSIsInN0cmluZ2lmeVN0eWxlIiwic3R5bGVzIiwibm9ybWFsaXplZEtleSIsIm5vcm1hbGl6ZUNsYXNzIiwibm9ybWFsaXplUHJvcHMiLCJwcm9wcyIsImNsYXNzIiwia2xhc3MiLCJzdHlsZSIsIkhUTUxfVEFHUyIsIlNWR19UQUdTIiwiTUFUSF9UQUdTIiwiVk9JRF9UQUdTIiwiaXNIVE1MVGFnIiwiaXNTVkdUYWciLCJpc01hdGhNTFRhZyIsImlzVm9pZFRhZyIsInNwZWNpYWxCb29sZWFuQXR0cnMiLCJpc1NwZWNpYWxCb29sZWFuQXR0ciIsImlzQm9vbGVhbkF0dHIiLCJpbmNsdWRlQm9vbGVhbkF0dHIiLCJ1bnNhZmVBdHRyQ2hhclJFIiwiYXR0clZhbGlkYXRpb25DYWNoZSIsImlzU1NSU2FmZUF0dHJOYW1lIiwiaXNVbnNhZmUiLCJjb25zb2xlIiwiZXJyb3IiLCJwcm9wc1RvQXR0ck1hcCIsImFjY2VwdENoYXJzZXQiLCJjbGFzc05hbWUiLCJodG1sRm9yIiwiaHR0cEVxdWl2IiwiaXNLbm93bkh0bWxBdHRyIiwiaXNLbm93blN2Z0F0dHIiLCJpc0tub3duTWF0aE1MQXR0ciIsImlzUmVuZGVyYWJsZUF0dHJWYWx1ZSIsInR5cGUiLCJlc2NhcGVSRSIsImVzY2FwZUh0bWwiLCJzdHJpbmciLCJtYXRjaCIsImV4ZWMiLCJodG1sIiwiZXNjYXBlZCIsImluZGV4IiwibGFzdEluZGV4IiwiY29tbWVudFN0cmlwUkUiLCJlc2NhcGVIdG1sQ29tbWVudCIsInNyYyIsImNzc1Zhck5hbWVFc2NhcGVTeW1ib2xzUkUiLCJnZXRFc2NhcGVkQ3NzVmFyTmFtZSIsImRvdWJsZUVzY2FwZSIsImxvb3NlQ29tcGFyZUFycmF5cyIsImEiLCJiIiwiZXF1YWwiLCJsb29zZUVxdWFsIiwiYVZhbGlkVHlwZSIsImJWYWxpZFR5cGUiLCJnZXRUaW1lIiwiYUtleXNDb3VudCIsImtleXMiLCJiS2V5c0NvdW50IiwiYUhhc0tleSIsImJIYXNLZXkiLCJsb29zZUluZGV4T2YiLCJmaW5kSW5kZXgiLCJpc1JlZiIsInRvRGlzcGxheVN0cmluZyIsInJlcGxhY2VyIiwiX2tleSIsInNpemUiLCJlbnRyaWVzIiwicmVkdWNlIiwidmFsMiIsInN0cmluZ2lmeVN5bWJvbCIsInZhbHVlcyIsInYiLCJfYSIsImRlc2NyaXB0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@vue/shared/dist/shared.esm-bundler.js\n");

/***/ }),

/***/ "./node_modules/vue-loader/dist/exportHelper.js":
/*!******************************************************!*\
  !*** ./node_modules/vue-loader/dist/exportHelper.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports[\"default\"] = (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RDtBQUNBO0FBQ0FELGtCQUFlLEdBQUcsQ0FBQ0csR0FBRyxFQUFFQyxLQUFLLEtBQUs7RUFDOUIsTUFBTUMsTUFBTSxHQUFHRixHQUFHLENBQUNHLFNBQVMsSUFBSUgsR0FBRztFQUNuQyxLQUFLLE1BQU0sQ0FBQ0ksR0FBRyxFQUFFQyxHQUFHLENBQUMsSUFBSUosS0FBSyxFQUFFO0lBQzVCQyxNQUFNLENBQUNFLEdBQUcsQ0FBQyxHQUFHQyxHQUFHO0VBQ3JCO0VBQ0EsT0FBT0gsTUFBTTtBQUNqQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlLXRlc3QvLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qcz9iOWE2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gcnVudGltZSBoZWxwZXIgZm9yIHNldHRpbmcgcHJvcGVydGllcyBvbiBjb21wb25lbnRzXG4vLyBpbiBhIHRyZWUtc2hha2FibGUgd2F5XG5leHBvcnRzLmRlZmF1bHQgPSAoc2ZjLCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IHNmYy5fX3ZjY09wdHMgfHwgc2ZjO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBwcm9wcykge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0Iiwic2ZjIiwicHJvcHMiLCJ0YXJnZXQiLCJfX3ZjY09wdHMiLCJrZXkiLCJ2YWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/exportHelper.js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[5].use[0]!./src/App.vue?vue&type=template&id=7ba5bd90":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[5].use[0]!./src/App.vue?vue&type=template&id=7ba5bd90 ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render)
/* harmony export */ });
function render(_ctx, _cache) {
  return null;
}

/***/ }),

/***/ "./node_modules/vue/dist/vue.runtime.esm-bundler.js":
/*!**********************************************************!*\
  !*** ./node_modules/vue/dist/vue.runtime.esm-bundler.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTransition: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.BaseTransition),\n/* harmony export */   BaseTransitionPropsValidators: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.BaseTransitionPropsValidators),\n/* harmony export */   Comment: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Comment),\n/* harmony export */   DeprecationTypes: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.DeprecationTypes),\n/* harmony export */   EffectScope: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.EffectScope),\n/* harmony export */   ErrorCodes: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.ErrorCodes),\n/* harmony export */   ErrorTypeStrings: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.ErrorTypeStrings),\n/* harmony export */   Fragment: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Fragment),\n/* harmony export */   KeepAlive: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.KeepAlive),\n/* harmony export */   ReactiveEffect: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.ReactiveEffect),\n/* harmony export */   Static: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Static),\n/* harmony export */   Suspense: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Suspense),\n/* harmony export */   Teleport: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Teleport),\n/* harmony export */   Text: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Text),\n/* harmony export */   TrackOpTypes: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.TrackOpTypes),\n/* harmony export */   Transition: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Transition),\n/* harmony export */   TransitionGroup: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.TransitionGroup),\n/* harmony export */   TriggerOpTypes: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.TriggerOpTypes),\n/* harmony export */   VueElement: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.VueElement),\n/* harmony export */   assertNumber: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.assertNumber),\n/* harmony export */   callWithAsyncErrorHandling: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.callWithAsyncErrorHandling),\n/* harmony export */   callWithErrorHandling: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.callWithErrorHandling),\n/* harmony export */   camelize: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.camelize),\n/* harmony export */   capitalize: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.capitalize),\n/* harmony export */   cloneVNode: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.cloneVNode),\n/* harmony export */   compatUtils: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.compatUtils),\n/* harmony export */   compile: () => (/* binding */ compile),\n/* harmony export */   computed: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.computed),\n/* harmony export */   createApp: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createApp),\n/* harmony export */   createBlock: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createBlock),\n/* harmony export */   createCommentVNode: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode),\n/* harmony export */   createElementBlock: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createElementBlock),\n/* harmony export */   createElementVNode: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createElementVNode),\n/* harmony export */   createHydrationRenderer: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createHydrationRenderer),\n/* harmony export */   createPropsRestProxy: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createPropsRestProxy),\n/* harmony export */   createRenderer: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createRenderer),\n/* harmony export */   createSSRApp: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createSSRApp),\n/* harmony export */   createSlots: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createSlots),\n/* harmony export */   createStaticVNode: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createStaticVNode),\n/* harmony export */   createTextVNode: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createTextVNode),\n/* harmony export */   createVNode: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createVNode),\n/* harmony export */   customRef: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.customRef),\n/* harmony export */   defineAsyncComponent: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineAsyncComponent),\n/* harmony export */   defineComponent: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineComponent),\n/* harmony export */   defineCustomElement: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineCustomElement),\n/* harmony export */   defineEmits: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineEmits),\n/* harmony export */   defineExpose: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineExpose),\n/* harmony export */   defineModel: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineModel),\n/* harmony export */   defineOptions: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineOptions),\n/* harmony export */   defineProps: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineProps),\n/* harmony export */   defineSSRCustomElement: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineSSRCustomElement),\n/* harmony export */   defineSlots: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineSlots),\n/* harmony export */   devtools: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.devtools),\n/* harmony export */   effect: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.effect),\n/* harmony export */   effectScope: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.effectScope),\n/* harmony export */   getCurrentInstance: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance),\n/* harmony export */   getCurrentScope: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope),\n/* harmony export */   getCurrentWatcher: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.getCurrentWatcher),\n/* harmony export */   getTransitionRawChildren: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.getTransitionRawChildren),\n/* harmony export */   guardReactiveProps: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.guardReactiveProps),\n/* harmony export */   h: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   handleError: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.handleError),\n/* harmony export */   hasInjectionContext: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.hasInjectionContext),\n/* harmony export */   hydrate: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.hydrate),\n/* harmony export */   hydrateOnIdle: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.hydrateOnIdle),\n/* harmony export */   hydrateOnInteraction: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.hydrateOnInteraction),\n/* harmony export */   hydrateOnMediaQuery: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.hydrateOnMediaQuery),\n/* harmony export */   hydrateOnVisible: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.hydrateOnVisible),\n/* harmony export */   initCustomFormatter: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.initCustomFormatter),\n/* harmony export */   initDirectivesForSSR: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.initDirectivesForSSR),\n/* harmony export */   inject: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.inject),\n/* harmony export */   isMemoSame: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isMemoSame),\n/* harmony export */   isProxy: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isProxy),\n/* harmony export */   isReactive: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isReactive),\n/* harmony export */   isReadonly: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isReadonly),\n/* harmony export */   isRef: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isRef),\n/* harmony export */   isRuntimeOnly: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isRuntimeOnly),\n/* harmony export */   isShallow: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isShallow),\n/* harmony export */   isVNode: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isVNode),\n/* harmony export */   markRaw: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.markRaw),\n/* harmony export */   mergeDefaults: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.mergeDefaults),\n/* harmony export */   mergeModels: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.mergeModels),\n/* harmony export */   mergeProps: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.mergeProps),\n/* harmony export */   nextTick: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.nextTick),\n/* harmony export */   normalizeClass: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.normalizeClass),\n/* harmony export */   normalizeProps: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.normalizeProps),\n/* harmony export */   normalizeStyle: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle),\n/* harmony export */   onActivated: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onActivated),\n/* harmony export */   onBeforeMount: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onBeforeMount),\n/* harmony export */   onBeforeUnmount: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onBeforeUnmount),\n/* harmony export */   onBeforeUpdate: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onBeforeUpdate),\n/* harmony export */   onDeactivated: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onDeactivated),\n/* harmony export */   onErrorCaptured: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onErrorCaptured),\n/* harmony export */   onMounted: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onMounted),\n/* harmony export */   onRenderTracked: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onRenderTracked),\n/* harmony export */   onRenderTriggered: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onRenderTriggered),\n/* harmony export */   onScopeDispose: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onScopeDispose),\n/* harmony export */   onServerPrefetch: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onServerPrefetch),\n/* harmony export */   onUnmounted: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onUnmounted),\n/* harmony export */   onUpdated: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onUpdated),\n/* harmony export */   onWatcherCleanup: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onWatcherCleanup),\n/* harmony export */   openBlock: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.openBlock),\n/* harmony export */   popScopeId: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.popScopeId),\n/* harmony export */   provide: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.provide),\n/* harmony export */   proxyRefs: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.proxyRefs),\n/* harmony export */   pushScopeId: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.pushScopeId),\n/* harmony export */   queuePostFlushCb: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.queuePostFlushCb),\n/* harmony export */   reactive: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.reactive),\n/* harmony export */   readonly: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.readonly),\n/* harmony export */   ref: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.ref),\n/* harmony export */   registerRuntimeCompiler: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.registerRuntimeCompiler),\n/* harmony export */   render: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.render),\n/* harmony export */   renderList: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.renderList),\n/* harmony export */   renderSlot: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.renderSlot),\n/* harmony export */   resolveComponent: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.resolveComponent),\n/* harmony export */   resolveDirective: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.resolveDirective),\n/* harmony export */   resolveDynamicComponent: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent),\n/* harmony export */   resolveFilter: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.resolveFilter),\n/* harmony export */   resolveTransitionHooks: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.resolveTransitionHooks),\n/* harmony export */   setBlockTracking: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.setBlockTracking),\n/* harmony export */   setDevtoolsHook: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.setDevtoolsHook),\n/* harmony export */   setTransitionHooks: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.setTransitionHooks),\n/* harmony export */   shallowReactive: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.shallowReactive),\n/* harmony export */   shallowReadonly: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly),\n/* harmony export */   shallowRef: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.shallowRef),\n/* harmony export */   ssrContextKey: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.ssrContextKey),\n/* harmony export */   ssrUtils: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.ssrUtils),\n/* harmony export */   stop: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.stop),\n/* harmony export */   toDisplayString: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toDisplayString),\n/* harmony export */   toHandlerKey: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toHandlerKey),\n/* harmony export */   toHandlers: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toHandlers),\n/* harmony export */   toRaw: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toRaw),\n/* harmony export */   toRef: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toRef),\n/* harmony export */   toRefs: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toRefs),\n/* harmony export */   toValue: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toValue),\n/* harmony export */   transformVNodeArgs: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.transformVNodeArgs),\n/* harmony export */   triggerRef: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.triggerRef),\n/* harmony export */   unref: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.unref),\n/* harmony export */   useAttrs: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useAttrs),\n/* harmony export */   useCssModule: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useCssModule),\n/* harmony export */   useCssVars: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useCssVars),\n/* harmony export */   useHost: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useHost),\n/* harmony export */   useId: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useId),\n/* harmony export */   useModel: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useModel),\n/* harmony export */   useSSRContext: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useSSRContext),\n/* harmony export */   useShadowRoot: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useShadowRoot),\n/* harmony export */   useSlots: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useSlots),\n/* harmony export */   useTemplateRef: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useTemplateRef),\n/* harmony export */   useTransitionState: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useTransitionState),\n/* harmony export */   vModelCheckbox: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vModelCheckbox),\n/* harmony export */   vModelDynamic: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vModelDynamic),\n/* harmony export */   vModelRadio: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vModelRadio),\n/* harmony export */   vModelSelect: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vModelSelect),\n/* harmony export */   vModelText: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vModelText),\n/* harmony export */   vShow: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vShow),\n/* harmony export */   version: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.version),\n/* harmony export */   warn: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.warn),\n/* harmony export */   watch: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.watch),\n/* harmony export */   watchEffect: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.watchEffect),\n/* harmony export */   watchPostEffect: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.watchPostEffect),\n/* harmony export */   watchSyncEffect: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.watchSyncEffect),\n/* harmony export */   withAsyncContext: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withAsyncContext),\n/* harmony export */   withCtx: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withCtx),\n/* harmony export */   withDefaults: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withDefaults),\n/* harmony export */   withDirectives: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withDirectives),\n/* harmony export */   withKeys: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withKeys),\n/* harmony export */   withMemo: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withMemo),\n/* harmony export */   withModifiers: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withModifiers),\n/* harmony export */   withScopeId: () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withScopeId)\n/* harmony export */ });\n/* harmony import */ var _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vue/runtime-dom */ \"./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\");\n/* harmony import */ var _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/runtime-dom */ \"./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\");\n/**\n* vue v3.5.7\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n\n\nfunction initDev() {\n  {\n    (0,_vue_runtime_dom__WEBPACK_IMPORTED_MODULE_1__.initCustomFormatter)();\n  }\n}\nif (true) {\n  initDev();\n}\nconst compile = () => {\n  if (true) {\n    (0,_vue_runtime_dom__WEBPACK_IMPORTED_MODULE_1__.warn)(`Runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias \"vue\" to \"vue/dist/vue.esm-bundler.js\".`);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLWJ1bmRsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM2RDtBQUM1QjtBQUVqQyxTQUFTRSxPQUFPQSxDQUFBLEVBQUc7RUFDakI7SUFDRUYscUVBQW1CLENBQUMsQ0FBQztFQUN2QjtBQUNGO0FBRUEsSUFBSSxJQUF5QyxFQUFFO0VBQzdDRSxPQUFPLENBQUMsQ0FBQztBQUNYO0FBQ0EsTUFBTUksT0FBTyxHQUFHQSxDQUFBLEtBQU07RUFDcEIsSUFBSSxJQUF5QyxFQUFFO0lBQzdDTCxzREFBSSxDQUNGLDREQUE0RCxHQUFJLDBFQUNsRSxDQUFDO0VBQ0g7QUFDRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlLXRlc3QvLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLWJ1bmRsZXIuanM/N2EyMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogdnVlIHYzLjUuN1xuKiAoYykgMjAxOC1wcmVzZW50IFl1eGkgKEV2YW4pIFlvdSBhbmQgVnVlIGNvbnRyaWJ1dG9yc1xuKiBAbGljZW5zZSBNSVRcbioqL1xuaW1wb3J0IHsgaW5pdEN1c3RvbUZvcm1hdHRlciwgd2FybiB9IGZyb20gJ0B2dWUvcnVudGltZS1kb20nO1xuZXhwb3J0ICogZnJvbSAnQHZ1ZS9ydW50aW1lLWRvbSc7XG5cbmZ1bmN0aW9uIGluaXREZXYoKSB7XG4gIHtcbiAgICBpbml0Q3VzdG9tRm9ybWF0dGVyKCk7XG4gIH1cbn1cblxuaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgaW5pdERldigpO1xufVxuY29uc3QgY29tcGlsZSA9ICgpID0+IHtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuKFxuICAgICAgYFJ1bnRpbWUgY29tcGlsYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJ1aWxkIG9mIFZ1ZS5gICsgKGAgQ29uZmlndXJlIHlvdXIgYnVuZGxlciB0byBhbGlhcyBcInZ1ZVwiIHRvIFwidnVlL2Rpc3QvdnVlLmVzbS1idW5kbGVyLmpzXCIuYCApXG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgY29tcGlsZSB9O1xuIl0sIm5hbWVzIjpbImluaXRDdXN0b21Gb3JtYXR0ZXIiLCJ3YXJuIiwiaW5pdERldiIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImNvbXBpbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vue/dist/vue.runtime.esm-bundler.js\n");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var _App_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./App.vue */ \"./src/App.vue\");\n\n\n(0,vue__WEBPACK_IMPORTED_MODULE_0__.createApp)(_App_vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"]).mount();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQWdDO0FBQ0o7QUFFNUJBLDhDQUFTLENBQUNDLGdEQUFHLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUtdGVzdC8uL3NyYy9pbmRleC50cz9mZmI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUFwcCB9IGZyb20gXCJ2dWVcIjtcclxuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHAudnVlXCI7XHJcblxyXG5jcmVhdGVBcHAoQXBwKS5tb3VudCgpO1xyXG4iXSwibmFtZXMiOlsiY3JlYXRlQXBwIiwiQXBwIiwibW91bnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ }),

/***/ "./src/App.vue":
/*!*********************!*\
  !*** ./src/App.vue ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _App_vue_vue_type_template_id_7ba5bd90__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=template&id=7ba5bd90 */ \"./src/App.vue?vue&type=template&id=7ba5bd90\");\n/* harmony import */ var _node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/vue-loader/dist/exportHelper.js */ \"./node_modules/vue-loader/dist/exportHelper.js\");\n\nconst script = {}\n\n;\nconst __exports__ = /*#__PURE__*/(0,_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(script, [['render',_App_vue_vue_type_template_id_7ba5bd90__WEBPACK_IMPORTED_MODULE_0__.render],['__file',\"src/App.vue\"]])\n/* hot reload */\nif (false) {}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvQXBwLnZ1ZSIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0U7QUFDaEU7O0FBRUEsQ0FBNkU7QUFDN0UsaUNBQWlDLHlGQUFlLG9CQUFvQiwwRUFBTTtBQUMxRTtBQUNBLElBQUksS0FBVSxFQUFFLEVBWWY7OztBQUdELGlFQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlLXRlc3QvLi9zcmMvQXBwLnZ1ZT85YjU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2JhNWJkOTBcIlxuY29uc3Qgc2NyaXB0ID0ge31cblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcInNyYy9BcHAudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjdiYTViZDkwXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnN2JhNWJkOTAnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCc3YmE1YmQ5MCcsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03YmE1YmQ5MFwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc3YmE1YmQ5MCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/App.vue\n");

/***/ }),

/***/ "./src/App.vue?vue&type=template&id=7ba5bd90":
/*!***************************************************!*\
  !*** ./src/App.vue?vue&type=template&id=7ba5bd90 ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_1_rules_5_use_0_App_vue_vue_type_template_id_7ba5bd90__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_1_rules_5_use_0_App_vue_vue_type_template_id_7ba5bd90__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[5].use[0]!./App.vue?vue&type=template&id=7ba5bd90 */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[5].use[0]!./src/App.vue?vue&type=template&id=7ba5bd90");


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;